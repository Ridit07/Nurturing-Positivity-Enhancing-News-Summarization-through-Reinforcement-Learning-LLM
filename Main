{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Dataset Extraction"
      ],
      "metadata": {
        "id": "WosSscRGyGbc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import csv\n",
        "import os\n",
        "from time import sleep\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "\n",
        "def fetch_articles(api_key, query, begin_date, end_date, page):\n",
        "    url = \"https://api.nytimes.com/svc/search/v2/articlesearch.json\"\n",
        "    params = {\n",
        "        'q': query,\n",
        "        'begin_date': begin_date,\n",
        "        'end_date': end_date,\n",
        "        'page': page,\n",
        "        'api-key': api_key\n",
        "    }\n",
        "    response = requests.get(url, params=params)\n",
        "    data = response.json()\n",
        "    # Check if there are any errors in the response\n",
        "    if 'response' not in data:\n",
        "        if 'message' in data:\n",
        "            print(f\"Error: {data['message']}\")\n",
        "        else:\n",
        "            print(\"Unexpected API response:\", data)\n",
        "        return None\n",
        "    return data['response']['docs']\n",
        "\n",
        "def save_articles_to_csv(articles, filename):\n",
        "    # Check if file exists to write headers only once\n",
        "    file_exists = os.path.isfile(filename)\n",
        "\n",
        "    with open(filename, mode='a', newline='', encoding='utf-8') as file:\n",
        "        writer = csv.writer(file)\n",
        "        if not file_exists:\n",
        "            writer.writerow(['Headline', 'Abstract', 'Publication Date', 'URL'])\n",
        "\n",
        "        for article in articles:\n",
        "            headline = article['headline']['main']\n",
        "            abstract = article['abstract']\n",
        "            pub_date = article['pub_date']\n",
        "            url = article['web_url']\n",
        "            writer.writerow([headline, abstract, pub_date, url])\n",
        "\n",
        "api_key = '3LfsAwcMAv4XZ2WSdP1GE4LKVNNw5ZDu'\n",
        "query = 'positive news'\n",
        "filename = 'nyt_articles.csv'\n",
        "\n",
        "# Define the start and end dates for fetching articles (every month)\n",
        "start_year = 2019\n",
        "end_year = 2023\n",
        "\n",
        "for year in range(start_year, end_year + 1):\n",
        "    for month in range(1, 13):\n",
        "        begin_date = f\"{year}{month:02d}01\"  # Format YYYYMMDD\n",
        "        end_date = datetime(year, month, 1).replace(day=1, month=month % 12 + 1, year=year if month % 12 != 12 else year + 1)  # Last day of the month\n",
        "        end_date -= timedelta(days=1)  # Subtract one day to get the last day of the current month\n",
        "        end_date = end_date.strftime(\"%Y%m%d\")  # Format YYYYMMDD\n",
        "        for page in range(5):  # We will fetch and store the first 5 pages of results for each month\n",
        "            articles = fetch_articles(api_key, query, begin_date, end_date, page)\n",
        "            if articles:\n",
        "                save_articles_to_csv(articles, filename)\n",
        "                sleep(10)  # Sleep to avoid hitting the API rate limit\n",
        "            else:\n",
        "                print(\"Stopping data collection due to API errors.\")\n",
        "                sleep(10)\n",
        "                break\n",
        "\n",
        "print(\"Data collection complete and saved to:\", filename)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UNvzqkc8HE6I",
        "outputId": "fa020603-e897-44cd-bc52-04e009aff512"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Stopping data collection due to API errors.\n",
            "Unexpected API response: {'fault': {'faultstring': 'Rate limit quota violation. Quota limit  exceeded. Identifier : 7ca987d6-b66a-45b9-a5a5-beff0b75ec3d', 'detail': {'errorcode': 'policies.ratelimit.QuotaViolation'}}}\n",
            "Stopping data collection due to API errors.\n",
            "Stopping data collection due to API errors.\n",
            "Data collection complete and saved to: nyt_articles.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Importing The Dataset"
      ],
      "metadata": {
        "id": "P5S-pZ4pf400"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LXVdWo5rfyzu"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv('/home/ridit.jain.21cse/llma/cleaned_nyt_articles.csv')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EDA"
      ],
      "metadata": {
        "id": "DxPOvgCjf4LZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ODdNpJ3lfyz2",
        "outputId": "8a078459-c015-4a37-e2ea-e7c48434d6d9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Headline</th>\n",
              "      <th>Abstract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>when a book deal feels like ‘winning the middl...</td>\n",
              "      <td>dann mcdorman, the executive producer of “the ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>after fox news, geraldo rivera boats into the ...</td>\n",
              "      <td>at 80 years old, the longtime television perso...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>the tyranny of relentless positivity</td>\n",
              "      <td>samantha irby is akin to our poet laureate of ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>the only positive of smokemageddon</td>\n",
              "      <td>wildfire smoke creates local cooling — for a w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>a positive covid milestone</td>\n",
              "      <td>in a sign that the pandemic really is over, th...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10345</th>\n",
              "      <td>u.k. sets an immigration record that the torie...</td>\n",
              "      <td>amid nippy u. s. - cathay dealings, eleven jin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>brain study suggests traumatic memories are pr...</td>\n",
              "      <td>old dominion, florida and south dakota have no...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10347</th>\n",
              "      <td>pandas, ping-pong and profits: chinese leader ...</td>\n",
              "      <td>virginia, florida and south dakota have new st...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10348</th>\n",
              "      <td>for republican governors, civics is the latest...</td>\n",
              "      <td>wednesday ’ s four - hr meeting in san francis...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10349</th>\n",
              "      <td>what the biden-xi talks accomplished (and didn't)</td>\n",
              "      <td>wednesday ’ sulfur four - hour meeting in san ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10350 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                Headline   \n",
              "0      when a book deal feels like ‘winning the middl...  \\\n",
              "1      after fox news, geraldo rivera boats into the ...   \n",
              "2                   the tyranny of relentless positivity   \n",
              "3                     the only positive of smokemageddon   \n",
              "4                             a positive covid milestone   \n",
              "...                                                  ...   \n",
              "10345  u.k. sets an immigration record that the torie...   \n",
              "10346  brain study suggests traumatic memories are pr...   \n",
              "10347  pandas, ping-pong and profits: chinese leader ...   \n",
              "10348  for republican governors, civics is the latest...   \n",
              "10349  what the biden-xi talks accomplished (and didn't)   \n",
              "\n",
              "                                                Abstract  \n",
              "0      dann mcdorman, the executive producer of “the ...  \n",
              "1      at 80 years old, the longtime television perso...  \n",
              "2      samantha irby is akin to our poet laureate of ...  \n",
              "3      wildfire smoke creates local cooling — for a w...  \n",
              "4      in a sign that the pandemic really is over, th...  \n",
              "...                                                  ...  \n",
              "10345  amid nippy u. s. - cathay dealings, eleven jin...  \n",
              "10346  old dominion, florida and south dakota have no...  \n",
              "10347  virginia, florida and south dakota have new st...  \n",
              "10348  wednesday ’ s four - hr meeting in san francis...  \n",
              "10349  wednesday ’ sulfur four - hour meeting in san ...  \n",
              "\n",
              "[10350 rows x 2 columns]"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L_iBDr7xfyzy",
        "outputId": "a678d44d-39fa-41cb-e60e-18a6f3fec9d6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Combine all headlines into a single string\n",
        "headline_text = ' '.join(df['Headline'])\n",
        "\n",
        "# Combine all abstracts into a single string\n",
        "abstract_text = ' '.join(df['Abstract'])\n",
        "\n",
        "# Generate word clouds\n",
        "wordcloud_headlines = WordCloud(width=800, height=400, background_color='white').generate(headline_text)\n",
        "wordcloud_abstracts = WordCloud(width=800, height=400, background_color='white').generate(abstract_text)\n",
        "\n",
        "# Plot the word clouds\n",
        "plt.figure(figsize=(15, 8))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.imshow(wordcloud_headlines, interpolation='bilinear')\n",
        "plt.title('Word Cloud for Headlines')\n",
        "plt.axis('off')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.imshow(wordcloud_abstracts, interpolation='bilinear')\n",
        "plt.title('Word Cloud for Abstracts')\n",
        "plt.axis('off')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d4jCtrzNfyzz",
        "outputId": "0d4db0e5-1a48-4296-e7a0-97540fc47c50"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from collections import Counter\n",
        "import seaborn as sns\n",
        "\n",
        "# Tokenize the words in the headlines and abstracts\n",
        "headline_words = headline_text.split()\n",
        "abstract_words = abstract_text.split()\n",
        "\n",
        "# Get the most common words\n",
        "common_words_headlines = Counter(headline_words).most_common(20)\n",
        "common_words_abstracts = Counter(abstract_words).most_common(20)\n",
        "\n",
        "# Convert to DataFrame for plotting\n",
        "df_common_headlines = pd.DataFrame(common_words_headlines, columns=['Word', 'Frequency'])\n",
        "df_common_abstracts = pd.DataFrame(common_words_abstracts, columns=['Word', 'Frequency'])\n",
        "\n",
        "# Plot the frequency distribution\n",
        "plt.figure(figsize=(15, 8))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.barplot(x='Frequency', y='Word', data=df_common_headlines)\n",
        "plt.title('Top 20 Most Common Words in Headlines')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.barplot(x='Frequency', y='Word', data=df_common_abstracts)\n",
        "plt.title('Top 20 Most Common Words in Abstracts')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ym8zHMlafyz0",
        "outputId": "a575a9b1-ffe6-47e6-8c12-fa974c783c4a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "count    10350.000000\n",
            "mean         0.064264\n",
            "std          0.209393\n",
            "min         -1.000000\n",
            "25%          0.000000\n",
            "50%          0.000000\n",
            "75%          0.170341\n",
            "max          1.000000\n",
            "Name: Sentiment, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "from textblob import TextBlob\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to get sentiment\n",
        "def get_sentiment(text):\n",
        "    blob = TextBlob(text)\n",
        "    return blob.sentiment.polarity\n",
        "\n",
        "# Apply sentiment analysis to abstracts\n",
        "df['Sentiment'] = df['Abstract'].apply(get_sentiment)\n",
        "\n",
        "# Plot the distribution of sentiments using matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(df['Sentiment'], bins=20, edgecolor='k', alpha=0.7)\n",
        "plt.title('Sentiment Distribution of Abstracts')\n",
        "plt.xlabel('Sentiment Polarity')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "print(df['Sentiment'].describe())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p-GuX6befyz0",
        "outputId": "d840c0a0-a703-480d-ca88-a58abb9a93a5"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Topic 1</th>\n",
              "      <th>Topic 2</th>\n",
              "      <th>Topic 3</th>\n",
              "      <th>Topic 4</th>\n",
              "      <th>Topic 5</th>\n",
              "      <th>Topic 6</th>\n",
              "      <th>Topic 7</th>\n",
              "      <th>Topic 8</th>\n",
              "      <th>Topic 9</th>\n",
              "      <th>Topic 10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>said</td>\n",
              "      <td>health</td>\n",
              "      <td>coronavirus</td>\n",
              "      <td>new</td>\n",
              "      <td>positive</td>\n",
              "      <td>people</td>\n",
              "      <td>covid</td>\n",
              "      <td>say</td>\n",
              "      <td>virus</td>\n",
              "      <td>president</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>said</td>\n",
              "      <td>president</td>\n",
              "      <td>new</td>\n",
              "      <td>coronavirus</td>\n",
              "      <td>states</td>\n",
              "      <td>positive</td>\n",
              "      <td>state</td>\n",
              "      <td>information</td>\n",
              "      <td>united</td>\n",
              "      <td>week</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>news</td>\n",
              "      <td>information</td>\n",
              "      <td>health</td>\n",
              "      <td>technology</td>\n",
              "      <td>mr</td>\n",
              "      <td>virus</td>\n",
              "      <td>coronavirus</td>\n",
              "      <td>said</td>\n",
              "      <td>world</td>\n",
              "      <td>need</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>coronavirus</td>\n",
              "      <td>city</td>\n",
              "      <td>new</td>\n",
              "      <td>positive</td>\n",
              "      <td>president</td>\n",
              "      <td>said</td>\n",
              "      <td>year</td>\n",
              "      <td>week</td>\n",
              "      <td>team</td>\n",
              "      <td>york</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>president</td>\n",
              "      <td>trump</td>\n",
              "      <td>biden</td>\n",
              "      <td>said</td>\n",
              "      <td>coronavirus</td>\n",
              "      <td>election</td>\n",
              "      <td>state</td>\n",
              "      <td>home</td>\n",
              "      <td>mr</td>\n",
              "      <td>news</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Topic 1      Topic 2      Topic 3      Topic 4      Topic 5   Topic 6   \n",
              "0         said       health  coronavirus          new     positive    people  \\\n",
              "1         said    president          new  coronavirus       states  positive   \n",
              "2         news  information       health   technology           mr     virus   \n",
              "3  coronavirus         city          new     positive    president      said   \n",
              "4    president        trump        biden         said  coronavirus  election   \n",
              "\n",
              "       Topic 7      Topic 8 Topic 9   Topic 10  \n",
              "0        covid          say   virus  president  \n",
              "1        state  information  united       week  \n",
              "2  coronavirus         said   world       need  \n",
              "3         year         week    team       york  \n",
              "4        state         home      mr       news  "
            ]
          },
          "execution_count": 133,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "\n",
        "# Vectorize the abstracts\n",
        "vectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')\n",
        "dtm = vectorizer.fit_transform(df['Abstract'])\n",
        "\n",
        "# Fit LDA model\n",
        "lda = LatentDirichletAllocation(n_components=5, random_state=42)\n",
        "lda.fit(dtm)\n",
        "\n",
        "# Function to display topics\n",
        "def display_topics(model, feature_names, no_top_words):\n",
        "    topics = {}\n",
        "    for topic_idx, topic in enumerate(model.components_):\n",
        "        topics[topic_idx] = [feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]\n",
        "    return topics\n",
        "\n",
        "# Display the topics\n",
        "no_top_words = 10\n",
        "feature_names = vectorizer.get_feature_names_out()\n",
        "topics = display_topics(lda, feature_names, no_top_words)\n",
        "topics_df = pd.DataFrame(topics).transpose()\n",
        "topics_df.columns = [f'Topic {i+1}' for i in range(no_top_words)]\n",
        "topics_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0qqyybohfyz1",
        "outputId": "886f343d-30a3-4f3b-8d05-47101b926065"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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HHB99+4dHj16hGnTpqFZs2alGnAlIiIi+pLdvHkThw8fhqOjI968eYNly5bhxo0b6N+/f3lXjYiIiOg/j4Ou9FV78eIFJk2ahLS0NOjr66Ndu3Zyd8eNjo5GmzZtYGVlhR07dpRjTYmIiIgUq0KFCggNDYWvry8EQUDdunVx5MgR2NjYfPhiIiIiIvqsOOhKXzUPDw94eHgUed7JyQncQYOIiIi+RSYmJoiOji7vahARERFRIb76G2kRERERERERERERfUk46EpERERERERERESkQNxegKgE9If0LbM7DxMRERFR2WGcR0RERJ8DZ7oSERERERERERERKRAHXYmIiIiIiIiIiIgUiIOuRERERERERERERArEQVciIiIiIiIiIiIiBeKgKxEREREREREREZECcdCViIiIiIiIiIiISIGUy7sCRF+De2sXIlOqVt7VICKij2A0Ylp5V4GIvmCM84joa8T4hujLx5muRERERERERERERArEQVciIiIiIiIiIiIiBeKgKxEREREREREREZECcdCViIiIiIiIiIiISIE46EpERERERERERESkQBx0JSIiIiIiIiIiIlIgDroSAMDLywvdunUr1zqYmZlh8eLFxabx8/ND/fr1y6Q+REREVLYYj/x3ODk5YezYseVdDSIiIqLPhoOuZeRzBJZfwhcTRTp79iyGDRsmPpdIJNi1a5dcGl9fX0RGRpZxzYiIiL4NjEc+jPFI2QgPD8fs2bPLuxpEREREn41yeVeAKI+BgcEH08hkMshksjKoDREREf0XfavxSHZ2NiQSCSpU+DLmXOjq6hZ7/u3bt1BRUSmj2hAREREp3pcRdX3jvLy8cOzYMQQHB0MikUAikSA1NRUAcPnyZXTs2BEymQyGhoYYMGAAHj58KF67Y8cO2NraQiqVQk9PD+3atcPLly/h5+eHDRs2YPfu3WKeUVFRAIBbt26hT58+0NHRga6uLrp27SqWB+QG3ePHj4eOjg709PQwceJECIJQbBtCQ0Oho6ODXbt2wdLSEmpqanBxccGtW7fk0q1YsQLm5uZQUVGBtbU1Nm3aJJ4TBAF+fn6oXr06VFVVYWxsDB8fH/F8/uV8ZmZmAIDu3btDIpGIz/Mv5zt8+DDU1NTw9OlTuTqMGTMGzs7O4vOTJ0+iVatWkEqlMDExgY+PD16+fFlse4mIiL41jEdy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BqJOnTpYtWoVQkJC4OTkBCD3JhRr1qyBg4MD7OzscOTIEfz555/Q09MrtLygoCBERETAxMQE9vb2RdbLwsICTZo0wcWLFwsE9HZ2djh27BiSkpLQqlUr2NvbY8aMGTA2Nv5ge4mIiL41jEe+nnjEyckJ27dvx549e1C/fn04OzvjzJkz4vmQkBA0bNgQnTt3RvPmzSEIAvbv3//B2aQfe11+69atw5MnT9CgQQMMGDAAPj4+qFy5coF07u7uuHr1KqpWrVpgn92SqFixIrZs2YJr167Bzs4OCxYswJw5c+TSZGdnY9SoUbCxsUGHDh1gZWWF5cuXl7osIiIiIkWTCPk3SSIqQmhoKMaOHVuiGSjfkufPn0NbWxtJQVOhKS14Z2EiIvryGY2YVt5VIAX5muKRvBji2bNn4kAzfVkY5xHR14zxDVH5KWmcx5muRERERERERERERArEQVciIiIiIiIiIiIiBeKgK5WIl5fXV7GUj4iIiL5djEeIiIiI6GvBQVciIiIiIiIiIiIiBeKgKxEREREREREREZECKZd3BYi+BoZDJvLOw0RERETfIMZ5RERE9DlwpisRERERERERERGRAnHQlYiIiIiIiIiIiEiBOOhKREREREREREREpEAcdCUiIiIiIiIiIiJSIA66EhERERERERERESmQcnlXgOhrkLS6H2TSiuVdDSKiz67WqN3lXQUiojLFOO/rx88uIiL6EnGmKxEREREREREREZECcdCViIiIiIiIiIiISIE46EpERERERERERESkQBx0JSIiIiIiIiIiIlIgDroSERERERERERERKRAHXYmIiIiIiIiIiIgUiIOuRERERERERERERArEQdf/CC8vL3Tr1q28q/FRnJycMHbs2PKuBhER0VcpKioKEokET58+LfE1X1Lc4Ofnh/r163/2cj6mn77kcr527CciIiL62imXdwX+q1JTU1GjRg1cuHChTL5IBAcHQxCEz14OERERfVlatGiB9PR0aGtrl/ia0sQNXl5eePr0KXbt2vWRNfwyfEw/fcnllIREIsHOnTu/mAF2IiIiom8JB13/I76EwP5Lkp2dDYlEggoVONmbiIi+bSoqKjAyMirVNeURN7x9+xYqKiplXm6ej+mnL7kcIiIiIipfHHH6TA4ePIiWLVtCR0cHenp66Ny5M1JSUsTzNWrUAADY29tD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c+bMAoOwREREROWFg66fQYUKFbB161acO3cOdevWxbhx4/Dzzz/LpVFWVsaSJUuwatUqGBsbo2vXrgAAHx8fjB8/HhMmTICtrS0OHjyIPXv2wNLSUqF1nD59OiZMmIAZM2bAxsYGffv2/ej9sfKsX78eWVlZaNiwIcaOHYs5c+YoqLaAh4cHXr16hSZNmmDUqFEYM2YMhg0bJp4PCQmBh4cHJkyYAGtra3Tr1g1nz55F9erVFVYHIiKi/yItLS0cP34crq6usLKywrRp0xAUFISOHTsCAIYOHQpra2s0atQIBgYGiI6Ohrq6Oo4fP47q1aujR48esLGxweDBg/H69euPmvlqYWGBHj16wNXVFd999x3s7OywfPly8fyQIUOwdu1ahISEwNbWFo6OjggNDS1y+4OSmDZtGho0aAAXFxc4OTnByMgI3bp1++j8ypqLiwv27t2Lw4cPo3HjxmjWrBkWLVokLvEHgKCgIERERMDExERcqfTLL7+gUqVKaNGiBbp06QIXFxc0aNDgo+rg5uYGZWVluLm5yW1pYGBggNDQUGzfvh21a9fG/PnzERgY+FFtnD59OiZOnIjGjRvjxYsX8PDw+Ki6EhERESmaRCjJhlFE/1HPnz+HtrY2zv7cETIpl6oR0bev1qjdH05E9A06dOgQOnbsiNevX5fo5l4fkhdDPHv2TCFbLHyNUlNTYW5ujrNnz370wO3nxDjv28HPLiIiKksljfO4pysRERER/afdu3cPu3fvhqWlpUIGXP/r3r17h0ePHmHatGlo1qzZFzngSkRERPS5cdCViIiIiP7TXF1d8eLFC7ktC+jjRUdHo02bNrCyssKOHTvKuzpERERE5YKDrkRERET0n3bu3LnyrsI3xcnJCdzBjIiIiP7reCMtIiIiIiIiIiIiIgXioCsRERERERERERGRAnF7AaISsBq29T9752EiIiKibxnjPCIiIvocONOViIiIiIiIiIiISIE46EpERERERERERESkQBx0JSIiIiIiIiIiIlIgDroSERERERERERERKRAHXYmIiIiIiIiIiIgUSLm8K0D0NTgR2gsa0orlXQ0i+g9xGrqvvKtARPSfwDjvy8HPPiIi+pZwpisRERERERERERGRAnHQlYiIiIiIiIiIiEiBOOhKREREREREREREpEAcdCUiIiIiIiIiIiJSIA66EhER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jTVr1hS44dRPP/2E0NBQrFixAsnJyfjll18QHh4u3oC1JAIDA+Hu7g5nZ2dcu3at0DRqamqYNGkSJk6ciI0bNyIlJQV///031q1bV2h6U1NTSCQS7N27Fw8ePBBvHPah9hARERGVJw66foGmTJkCR0dHdO7cGZ06dUK3bt1gbm7+SXm2aNECP/74I/r27QsDAwMsXLgQABASEgIPDw9MmDAB1tbW6NatG86ePSveFKFZs2ZYs2YNgoODUa9ePRw+fBjTpk0rtixNTU0sXLgQjRo1QuPGjZGamor9+/ejQoXct1tQUBAiIiJgYmICe3t7ALkDtZUqVUKLFi3QpUsXuLi4oEGDBnL5zpo1C6mpqTA3NxdvwGVnZ4djx44hKSkJrVq1gr29PWbMmAFjY2MAuTNCwsPD4ezsDBsbG6xcuRJbtmxBnTp1Pqk/iYiIiBRJIpFg//79aN26NQYOHAgrKyv069cPN2/ehKGhoZjO0dER2dnZcnu3Ojk5FThWFG1tbfTs2RMymQzdunWTO9etWzcEBwcjMDAQderUwapVqxASElKifPNbtGgR+vTpA2dnZyQlJRWaZvr06ZgwYQJmzJgBGxsb9O3bt8h7E1StWhX+/v6YPHkyDA0NxR/XP9QeIiIiovIkEd7fPJSIRM+fP4e2tjb2BreHhrTihy8gIlIQp6Gl32eRiL4ceTHEs2fPoKWlVd7VkdO2bVvUqVMHS5YsKe+qKMTHtodx3peHn31ERPQ1KGmcxz1diYiIiIj+A548eYKoqChERUVh+fLl5V2dT/attYeIiIi+LRx0JSIiIiL6D7C3t8eTJ0+wYMGCb2J/+2+tPURERPRt4aArEREREdF/QGpqanlXQaG+tfYQERHRt4U30iIiIiIiIiIiIiJSIA66EhERERERERERESkQtxcgKoFWXju+uDsPExEREdGnY5xHREREnwNnuhIREREREREREREpEAddiYiIiIiIiIiIiBSIg65ERERERERERERECsRBVyIiIiIiIiIiIiIF4qArERERERERERERkQIpl3cFiL4Gu37rAXUp/1yIqOR6DTxY3lUgIqISYJxX/viZSURE3yLOdCUiIiIiIiIiIiJSIA66EhERERERERERESkQB12JiIiIiIiIiIiIFIiDrkREREREREREREQKxEFXIiIiIiIiIiIiIgXioCsRERER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LBERERH5F7h48SJbtmwxRu+KiIiIyCMquv7L7d27l8mTJ3P79m2KFCnCrFmz6NKlS2aHJSIiIiL/AmXKlKFAgQKEhIRkdigiIiIi/ygquv7LffHFF5kdgoiIiPzLhIWFZXYI8g9x5cqVzA5BRERE5B9JD9ISERERERERERERSUcquoqIiIiIiIiIiIikIy0vIJIGnVqt/9c/eVhERETkdaQ8T0RERF4GjXQVERERERERERERSUcquoqIiIiIiIiIiIikIxVdRURERERERERERNKRiq4iIiIiIiIiIiIi6UhFVxEREREREREREZF0pKKriIiIiIiIiIiISDqyyuwARF4FE9a9jY2d/ncREXPBLb7J7BBEROQFKc97PvoMFBERSZ1GuoqIiIiIiIiIiIikIxVdRURERERERERERNKRiq4iIiIiIiIiIiIi6UhFVxEREREREREREZF0pKKriIiIiIiIiIiISDpS0VVEREREREREREQkHanoKobo6GhMJhOHDx9O8ZiwsDBMJhM3btxI8RiTycSGDRvSPb7HpSVWgMDAQPr27ftSYxEREZF/h7TkOQDu7u7MmDEjQ2L6N0prHiciIiLyKlPRVf4V0volSURERF7My/iDZocOHWjSpEm6tvk8KleuTGxsLE5OTgCEhITg7Oyc5Lh9+/bRrVu3DI7u38PV1ZXY2FhKlSqV2aGIiIiIvDRWmR2A/DP8/fffmR2CiIiISKaytrYmb968Tz0ud+7cGRBN+vr777+xtrbO7DAAsLS0TPU+P3z4kPj4eKys9FVFREREXl0a6foK2LRpE87OzsTHxwNw+PBhTCYTQ4cONY7p0qUL7777rvF+7dq1lCxZEhsbG9zd3Zk6dapZm+7u7owdO5agoCAcHR1THK2xZcsWPD09sbW15Y033iA6OjpNMV+9epW3334bOzs7PDw82Lhxo9n+n376iXr16uHg4ICLiwvt2rXj6tWrxv5t27ZRpUoVnJ2dyZkzJw0bNuTs2bPJ9hUdHc0bb7wBQPbs2TGZTHTo0MHYn5CQwODBg8mRIwd58+YlODg4TdcgIiIi5jp06EB4eDgzZ87EZDJhMpmM3OBpn+1r1qzBx8cHW1tbcubMSa1atbhz5w7BwcEsXbqUr776ymgzLCws2f4DAwPp1asXvXr1wsnJiVy5cjFixAgePnxoHHP9+nWCgoLInj07dnZ21KtXjzNnzhj7L1y4QKNGjciePTv29vaULFmSLVu2AOYzZ8LCwujYsSM3b9404krMIR5fXqBNmza0bNnSLM779+9TuHBh431CQgITJkygcOHC2Nra4ufnx5o1a1K91/fu3WPIkCG4urpiY2NDsWLFWLRokbE/PDycChUqYGNjQ758+Rg6dCgPHjxIcq/69u1Lrly5qFOnTprP6927d6q507Rp0/Dx8cHe3h5XV1fef/994uLiALh16xa2trZs3brV7Jz169eTLVs27t69m2R5gcT7vnXrVsqWLYuNjQ27d+9OdgR03759CQwMNN6n9HslIiIiktlUdH0FVK1aldu3b3Po0CHgUbKcK1cusy8k4eHhRgJ64MABWrRoQatWrTh27BjBwcGMGDGCkJAQs3anTJmCn58fhw4dYsSIEUn6vXjxIk2bNqVRo0YcPnyYLl26mBV6UzN69GhatGjB0aNHqV+/Pm3btuXatWsA3Lhxgxo1auDv78/+/fvZtm0bv//+Oy1atDDOv3PnDv3792f//v2EhoZiYWHB22+/TUJCQpK+XF1dWbt2LQCnTp0iNjaWmTNnGvuXLl2Kvb09kZGRTJ48mTFjxrB9+/Zk47537x63bt0ye4mIiMgjM2fOpFKlSnTt2pXY2FhiY2NxdXV96md7bGwsrVu3plOnTkRFRREWFkbTpk15+PAhAwcOpEWLFtStW9dos3LlyinGsHTpUqysrNi7dy8zZ85k2rRpLFy40NjfoUMH9u/fz8aNG/nhhx94+PAh9evX5/79+wD07NmTe/fu8d1333Hs2DEmTZqEg4NDkn4qV67MjBkzcHR0NOIaOHBgkuPatm3L119/bRQdAb755hv+/PNP4/2ECRNYtmwZ8+bN4/jx4/Tr1493332X8PDwFK8zKCiIlStXMmvWLKKiopg/f74R56+//kr9+vUpX748R44cYe7cuSxatIhx48YluVfW1tZEREQwb968ZzovtdzJwsKCWbNmcfz4cZYuXcrOnTsZPHgwAI6OjjRs2JAVK1aYtbl8+XKaNGmCnZ1ditc8dOhQJk6cSFRUFL6+vikelyi136vkKM8TERGRjKQ5O68AJycnSpcuTVhYGOXKlSMsLIx+/foxevRo4uLiuHnzJj///DPVq1cHHo0+qFmzplFI9fT05MSJE3z88cdmI0Br1KjBgAED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TiNdRURERERERERERNKRiq4iIiIiIiIiIiIi6UhFVxEREREREREREZF0pKKriIiIiIiIiIiISDpS0VVEREREREREREQkHanoKiIiIiIiIiIiIpKOVHQVERERERERERERSUcqur6iAgMD6du3b6rHuLu7M2PGjAyJR0RERERerrTkf6+TsLAwTCYTN27cyOxQRERERJJQ0fUVtW7dOsaOHZvh/aY12VfBV0REREREREREXldWmR3A6+jvv//G2tr6hdrIkSNHOkWTeeLj4zGZTFhYqPYvIiIiIml3//79zA5BREREJFWqdr2gwMBAevXqRa9evXByciJXrlyMGDGChw8fGse4u7szduxYgoKCcHR0pFu3bgDs3r2bqlWrYmtri6urK7179+bOnTvGeZ9++ikeHh5kzZoVFxcXmjVrZtbv4yNOL1++TKNGjbC1taVw4cIsX748Saw3btygS5cu5M6dG0dHR2rUqMGRI0eM/cHBwZQuXZrPP/8cd3d3nJycaNWqFbdv3wagQ4cOhIeHM3PmTEwmEyaTiejo6GTvyYULF+jXr59xHEBISAjOzs5s3LiREiVKYGNjQ0xMTLKjZ5s0aUKHDh3M7uG4ceMICgrCwcEBNzc3Nm7cyJUrV2jcuDEODg74+vqyf/9+45zE/jZs2GDcxzp16nDx4sVUfqIiIiIiSQUGBtK7d28GDx5Mjhw5yJs3L8HBwWbHPJ5rFSxYEIBjx44BcPPmTSwtLY1cJSEhgRw5clCxYkXj/P/973+4urqmGkdCQkKqMcTExBi5kaOjIy1atOD333839nfo0IEmTZqYndO3b18CAwON92vWrMHHxwdbW1ty5sxJrVq1zHLUhQsX4u3tTdasWSlevDiffvppivEuW7aMnDlzcu/ePbPtTZo0oV27dsb7uXPnUrRoUaytrfHy8uLzzz83O95kMjF37lzeeust7O3t+eijj5L0dffuXerVq0dAQICWHBAREZFMp6JrOli6dClWVlbs3buXmTNnMm3aNBYuXGh2zJQpU/Dz8+PQoUOMGDGCs2fPUrduXd555x2OHj3K6tWr2b17N7169QJg//799O7dmzFjxnDq1Cm2bdtGtWrVUoyhQ4cOXLx4kV27drFmzRo+/fRTLl++bHZM8+bNuXz5Mlu3buXAgQOUKVOGmjVrcu3aNeOYs2fPsmHDBjZt2sSm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WisaYWWX5ekniEgSWxuvzewQREQyXGIOcfPmTRwdHTM7nH+EmjVrUrJkSWbNmpXZoQDK816UPt9FROR1ldY8Tw/SEhERERGRl+b69euEhYURFhbGp59+mtnhiIiIiGQIFV1FREREROSl8ff35/r160yaNCnZ5xOIiIiI/Bup6PqCwsLCMjsESUGHDh3o0KFDZochIiIi8lqLjo7O7BBEREREMpwepCUiIiIiIiIiIiKSjlR0FREREREREREREUlHWl5AJA3WNvifnjwsIiIi8i+kPE9EREReBo10FREREREREREREUlHKrqKiIiIiIiIiIiIpCMVXUVERERERERERETSkYquIiIiIiIiIiIiIulIRVcRERERERERERGRdGSV2QGIvAre+XoyWeyyZnYYIv8YW97+MLNDEBERSRfK85LS57yIiMiL00hXERERERERERERkXSkoquIiIiIiIiIiIhIOlLRVURERERERERERCQdqegqIiIiIiIiIiIiko5UdBURERERERERERFJRyq6ioiIiIiIiIiIiKQjFV1FRERERERERERE0pGKrq+A6OhoTCYThw8fzuxQ0iQkJARnZ+dnOicwMJC+ffu+lHhERERE/gk6dOhAkyZNMjuM56JcTUREROTZqOj6CnB1dSU2NpZSpUpldihp0rJlS06fPv1M56xbt46xY8em6Vgl/SIiIpIeMvoP2zNnziQkJCRD+nrV9e7dm7Jly2JjY0Pp0qWTPebhw4dMmTIFT09PbGxsKFCgAB999FHGBioiIiKSAqvMDkBS9/fff2NtbU3evHkzO5Q0s7W1xdbW9pnOyZEjx0uKJmWJ91ZEREQkIzg5OWV2CP8o8fHxmEwmLCySHwfSqVMnIiMjOXr0aLL7+/Tpw7fffsuUKVPw8fHh2rVrXLt27WWGLCIiIpJmGumagQIDA+nVqxe9evXCycmJXLlyMWLECB4+fGgc4+7uztixYwkKCsLR0ZFu3bolGYURFhaGyWTim2++wd/fH1tbW2rUqMHly5fZunUr3t7eODo60qZNG+7evWu0nZCQwIQJEyhcuDC2trb4+fmxZs2aVGN2d3dn3LhxBAUF4eDggJubGxs3buTKlSs0btwYBwcHfH192b9/v3HOk8sLBAcHU7p0aT7//HPc3d1xcnKiVatW3L592+zePD569dNPP8XDw4OsWbPi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sWfPHohEIpw8eRLt2rXDkCFDYG5ujn79+uHx48dfVCgWiUTo378/YmNjv2iWKwC4u7vD19cX06ZNQ4sWLfD69WsMGjRI2K+pqYmLFy+iU6dOMDc3x+zZsxEYGIiOHTt+0fmIiIjo21fa3/+hQ4di8ODBGDRoEJycnGBqaor27dsX6mfKlCmIioqCnZ0dFixYgBUrVsDd3b3Ic6qqquLBgwfo2bMnzM3NhQdMFXzpvWLFCtSsWRNt2rSBp6cn3N3dYW9v/1nj+vHHHzFp0iSMGzcOTZs2xZUrV+Dr61vqcXJycti7dy+io6PRpEkTTJo0CcuWLfuscxfF1tYWK1aswJIlS9CkSROEhIRg8eLF/7nfAiXl0l96LYiIiIjKi0jy6YJWVKmlpKSgfv36uHXrFpo2bVrR4VR6r169gpaWFjrvOIUaqqWvVUuV35Ge35feiIiIqBQFOURmZibXDv1GVdc8j7kOERHRf1PWPI8zXYmIiIiIiIiIiIhkiEVXIiIiIiIiIiIiIhlSqOgASLZMTEzAFSOIiIiIiIiIiIgqDme6EhEREREREREREckQi65EREREREREREREMsTlBYjKYHdXBz55mIiIiKgKYp5HREREXwNnuhIRERERERERERHJEIuuRERERERERERERDLEoisRERERERERERGRDLHoSkRERERERERERCRDLLoSERERERERERERyZBCRQdAVBl4H0tGDVWNig6DvoJ9PRpWdAhERERUgapDnsd8h4iIqPxxpisRERERERERERGRDLHoSkRERERERERERCRDLLoSERERERERERERyRCLrkREREREREREREQyxKIrERERERERERERkQyx6EpEREREREREREQkQyy6EhEREREREREREckQi65VWHBwMLS1tUts4+3tjW7dulXIuYmIiIiqkq+VV30OExMTrFq1qsQ2fn5+aNq0abnEUxyxWAyRSISMjIwKjYOIiIjoa2HRtZoLCgpCcHCw8NrZ2RkTJ06ssHiIiIiIivM18pRvoVAqSzdu3MDIkSOF1yKRCKGhoVJtfHx8EBYWVs6RSWvTpg3S0tKgpaVVoXEQERERfS0KFR0AVSwmukRERERVh66ubqlt1NXVoa6uXg7RFE9RURH6+vrF7s/Ly4NIJIKcHOeIEBERUeXELKYSOX78OLS1tZGXlwcAiImJgUgk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aYnLKnh5eeHmzZtYuHAhevXqJTUjdPr06bhy5QrGjRuHmJgYJCYm4ujRo8U+SKtAjx498Pr1a/z8889o3749DAwMSr0+n3JxccGJEydw4sQJPHjwAD///LPUdT5+/DhWr16NmJgYPH78GDt27EB+fj4sLCw++1xEREREssSiayXk5OSEvLw8oehaq1YtNGrUCPr6+v85wfTx8YG8vDwaNWoEXV1dpKamCjNS8/Ly8MMPP8Da2hoTJ06Etra2sATAlxg/fjwmT56MKVOmwNraGqdOncKxY8eENWlr1KiBPXv24MGDB7CxscGSJUuwYMECqT7y8vIwduxYWFlZwcPDA+bm5li/fj0AfLW4iYiIqGJ8SZ6iqamJixcvolOnTjA3N8fs2bMRGBiIjh07AgBGjBgBCwsLNG/eHLq6uoiIiICqqiouXrwIIyMjYf38YcOG4e3bt9DU1AQATJkyBQMHDsTgwYPh4OAADQ0NdO/evdQxqKqqYvr06RgwYAAcHR2hrq6Offv2Cfu7deuGoKAgLF++HI0bN8amTZuwbds2Ie/T1tbGli1b4OjoCBsbG5w7dw6//fYbdHR0ijxfYGAgzp49C0NDw2IfMAV8+LK7ZcuWuH37Nry8vKT22djYIDw8HAkJCWjbti3s7OwwZ86cUouoGhoa8PT0RGxsbKE+y2ro0KEYPHgwBg0aBCcnJ5iamqJ9+/bCfm1tbRw+fBguLi6wsrLCxo0bsWfPHjRu3PiLzkdEREQkKyLJ5y7wSVSNvHr1ClpaWui+8yZqqGpUdDj0Fezr0bCiQyAioiqoIIfIzMwUCrXBwcGYOHFimWbE0tdXnfI85jtERESyU1SeVxRO9yMiIiIiIiIiIiKSIRZdiYiIiIiIiIiIiGSIRVciIiIionLg7e3NpQWIiIiIqgkWXYmIiIiIiIiIiIhkiEVXIiIiIiIiIiIiIhlSqOgAiCqD4B8blPhEOiIiIiKqnJjnERER0dfAma5EREREREREREREMsSiKxEREREREREREZEMsehKREREREREREREJEMsuhIRERERERERERHJEIuuRERERERERERERDKkUNEBEFUGm39Lh4rqvxUdBpVgbHe9ig6BiIiIKqGqnOcxPyIiIqo4nOlKREREREREREREJEMsuhIRERERERERERHJEIuuRERERERERERERDLEoisRERER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lYHtYF0+eZiIiIioCmKeR0RERF8DZ7oSERERERERERERyRCLrkREREREREREREQyxKIrERERERERERERkQyx6EpEREREREREREQkQyy6EhEREREREREREcmQQkUHQFQZPF31F7KVX1d0GNVK3Wn1KjoEIiIiqgaqcp7HfIqIiKjicKYrERERERERERERkQyx6EpEREREREREREQkQyy6EhEREREREREREckQi65EREREREREREREMsSiKxEREREREREREZEMsehKREREREREREREJEMsuhIRERERERERERHJEIuuFSQlJQUikQgxMTHFtgkODoa2tvZn9fv06VN06NABampqn33st64s14yIiIioqviSXJCIiIiIvg0sun7D+vbti4SEhM86ZuXKlUhLS0NMTMxnH/st8fb2Rrdu3aS2GRoaIi0tDU2aNKmYoIiIiIiIiIiIiMpAoaIDoOKpqKhARUXls45JTk5Gs2bNYGZm9pWiqjjy8vLQ19ev6DCIiIiIvgnv3r2DoqJiRYdBREREREXgTNevKD8/H0uXLkXDhg2hpKQEIyMjLFy4UKrNw4cP0b59e6iqqsLW1hZXr14V9hV1S9nRo0dhb28PZWVlmJqawt/fH+/fvwcAmJiY4NChQ9ixYwdEIhG8vb2LjW3r1q2wsrKCsrIyLC0tsX79emHf0KFDYWNjg5ycHAAfEno7OzsMGjSoTHEAQEZGBkaNGgU9PT0oKyujSZMmOH78OADAz88PTZs2lYpn1apVMDExEfZv374dR48ehUgkgkgkglgsllpeID8/H9999x02bNgg1c+tW7cgJyeHx48fC3EMHz4curq60NTUhIuLC2JjY4u9LkRERFR5vX79Gl5eXlBTU0PdunWxcuVKODs7Y+LEiUKbly9fYtCgQahZsyZUVVXRsWNHJCYmAgBevXoFFRUV/P7771L9HjlyBBoaGnjz5k2R5z116hS+//57aGtrQ0dHB126dMHDhw+F/QU5zOHDh4vN+4APuZ+RkRFUVVXRvXt3PH/+XGp/QQ61detW1K9fH8rKygBKzncyMzMhLy+PqKgoAB/y01q1aqF169ZCv7t27YKhoWGx17WknFYsFkMkEiEjI0NoHxMTA5FIhJSUFGHboUOH0LhxYygpKcHExASBgYFS5zAxMcGCBQswaNAgqKurw9jYGMeOHcM///yD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",
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from collections import Counter\n",
        "\n",
        "# Function to get n-grams\n",
        "def get_ngrams(text, n=2):\n",
        "    vec = CountVectorizer(ngram_range=(n, n), stop_words='english').fit(text)\n",
        "    bag_of_words = vec.transform(text)\n",
        "    sum_words = bag_of_words.sum(axis=0)\n",
        "    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n",
        "    words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)\n",
        "    return words_freq\n",
        "\n",
        "# Get the most common bigrams and trigrams\n",
        "bigrams = get_ngrams(df['Abstract'], 2)\n",
        "trigrams = get_ngrams(df['Abstract'], 3)\n",
        "\n",
        "# Convert to DataFrame for plotting\n",
        "df_bigrams = pd.DataFrame(bigrams[:20], columns=['Bigram', 'Frequency'])\n",
        "df_trigrams = pd.DataFrame(trigrams[:20], columns=['Trigram', 'Frequency'])\n",
        "\n",
        "# Plot the bigrams and trigrams\n",
        "plt.figure(figsize=(15, 8))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.barplot(x='Frequency', y='Bigram', data=df_bigrams)\n",
        "plt.title('Top 20 Most Common Bigrams in Abstracts')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.barplot(x='Frequency', y='Trigram', data=df_trigrams)\n",
        "plt.title('Top 20 Most Common Trigrams in Abstracts')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Cleaning"
      ],
      "metadata": {
        "id": "rrfjZVx9geZV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zFdkY6A6fyz3",
        "outputId": "96f4155d-1588-45c4-8289-6cc3806ed9a8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Headline</th>\n",
              "      <th>Abstract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>when a book deal feels like ‘winning the middl...</td>\n",
              "      <td>dann mcdorman the executive producer of “the b...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>after fox news geraldo rivera boats into the s...</td>\n",
              "      <td>at  years old the longtime television personal...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>the tyranny of relentless positivity</td>\n",
              "      <td>samantha irby is akin to our poet laureate of ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>the only positive of smokemageddon</td>\n",
              "      <td>wildfire smoke creates local cooling — for a w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>a positive covid milestone</td>\n",
              "      <td>in a sign that the pandemic really is over the...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            Headline   \n",
              "0  when a book deal feels like ‘winning the middl...  \\\n",
              "1  after fox news geraldo rivera boats into the s...   \n",
              "2               the tyranny of relentless positivity   \n",
              "3                 the only positive of smokemageddon   \n",
              "4                         a positive covid milestone   \n",
              "\n",
              "                                            Abstract  \n",
              "0  dann mcdorman the executive producer of “the b...  \n",
              "1  at  years old the longtime television personal...  \n",
              "2  samantha irby is akin to our poet laureate of ...  \n",
              "3  wildfire smoke creates local cooling — for a w...  \n",
              "4  in a sign that the pandemic really is over the...  "
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import re\n",
        "import string\n",
        "\n",
        "def clean_text(text):\n",
        "    \"\"\" Lowercase, remove text in square brackets, remove links, remove punctuation, and remove words containing numbers. \"\"\"\n",
        "    text = text.lower()\n",
        "    text = re.sub(r'\\[.*?\\]', '', text)\n",
        "    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n",
        "    text = re.sub(r'<.*?>+', '', text)\n",
        "    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)\n",
        "    text = re.sub(r'\\n', '', text)\n",
        "    text = re.sub(r'\\w*\\d\\w*', '', text)\n",
        "    return text\n",
        "\n",
        "# Applying the cleaning function to both columns\n",
        "data['Headline'] = data['Headline'].apply(clean_text)\n",
        "data['Abstract'] = data['Abstract'].apply(clean_text)\n",
        "\n",
        "# Show cleaned data\n",
        "data.head()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Argumentation"
      ],
      "metadata": {
        "id": "q10vWvIcgWxR"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oA2IS43Bfyz2"
      },
      "outputs": [],
      "source": [
        "import nlpaug.augmenter.word as naw\n",
        "\n",
        "def augment_text(texts, augmenter, num_augments=1):\n",
        "    augmented_texts = []\n",
        "    for text in texts:\n",
        "        augmented = augmenter.augment(text, n=num_augments)\n",
        "        augmented_texts.extend(augmented)\n",
        "    return augmented_texts\n",
        "\n",
        "# Create augmenters\n",
        "syn_aug = naw.SynonymAug(aug_src='wordnet')\n",
        "\n",
        "# Apply augmentations to the dataset\n",
        "df_aug = pd.DataFrame({\n",
        "    'Abstract': augment_text(df['Abstract'].tolist(), syn_aug, num_augments=2),\n",
        "    'Headline': df['Headline'].tolist() * 2  # Duplicate the headlines for the augmented abstracts\n",
        "})\n",
        "\n",
        "# Combine the original and augmented datasets\n",
        "df_combined = pd.concat([df, df_aug], ignore_index=True)\n",
        "\n",
        "# Save the augmented dataset\n",
        "df_combined.to_csv('/home/ridit.jain.21cse/llma/augmented_dataset2.csv', index=False)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Combine headline and abstract for summarization tasks"
      ],
      "metadata": {
        "id": "GUCqYoqsg54v"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Hz_jknWwfyz3",
        "outputId": "589ff114-3b0a-4dc6-cc67-87b1e949a1f1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                                             content   \n",
            "0  when a book deal feels like ‘winning the middl...  \\\n",
            "1  after fox news, geraldo rivera boats into the ...   \n",
            "2  the tyranny of relentless positivity. samantha...   \n",
            "3  the only positive of smokemageddon. wildfire s...   \n",
            "4  a positive covid milestone. in a sign that the...   \n",
            "\n",
            "                                            Abstract  \n",
            "0  dann mcdorman, the executive producer of “the ...  \n",
            "1  at 80 years old, the longtime television perso...  \n",
            "2  samantha irby is akin to our poet laureate of ...  \n",
            "3  wildfire smoke creates local cooling — for a w...  \n",
            "4  in a sign that the pandemic really is over, th...  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data['content'] = data['Headline'] + '. ' + data['Abstract']\n",
        "data = data[['content', 'Abstract']]\n",
        "\n",
        "print(data.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lwEp43Rgfyz3"
      },
      "outputs": [],
      "source": [
        "data['content'] = data['content'].str.strip()\n",
        "data['Abstract'] = data['Abstract'].str.strip()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Loading the T5 Transformer"
      ],
      "metadata": {
        "id": "EAyIjFUsglV6"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3oCYnC_Cfyz3",
        "outputId": "d1002f21-dbc2-43f3-aec8-1e60965d4cc5"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "T5ForConditionalGeneration(\n",
              "  (shared): Embedding(32128, 768)\n",
              "  (encoder): T5Stack(\n",
              "    (embed_tokens): Embedding(32128, 768)\n",
              "    (block): ModuleList(\n",
              "      (0): T5Block(\n",
              "        (layer): ModuleList(\n",
              "          (0): T5LayerSelfAttention(\n",
              "            (SelfAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (relative_attention_bias): Embedding(32, 12)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (1): T5LayerFF(\n",
              "            (DenseReluDense): T5DenseGatedActDense(\n",
              "              (wi_0): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wi_1): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wo): Linear(in_features=2048, out_features=768, bias=False)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "              (act): NewGELUActivation()\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "      (1-11): 11 x T5Block(\n",
              "        (layer): ModuleList(\n",
              "          (0): T5LayerSelfAttention(\n",
              "            (SelfAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (1): T5LayerFF(\n",
              "            (DenseReluDense): T5DenseGatedActDense(\n",
              "              (wi_0): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wi_1): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wo): Linear(in_features=2048, out_features=768, bias=False)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "              (act): NewGELUActivation()\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (final_layer_norm): T5LayerNorm()\n",
              "    (dropout): Dropout(p=0.1, inplace=False)\n",
              "  )\n",
              "  (decoder): T5Stack(\n",
              "    (embed_tokens): Embedding(32128, 768)\n",
              "    (block): ModuleList(\n",
              "      (0): T5Block(\n",
              "        (layer): ModuleList(\n",
              "          (0): T5LayerSelfAttention(\n",
              "            (SelfAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (relative_attention_bias): Embedding(32, 12)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (1): T5LayerCrossAttention(\n",
              "            (EncDecAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (2): T5LayerFF(\n",
              "            (DenseReluDense): T5DenseGatedActDense(\n",
              "              (wi_0): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wi_1): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wo): Linear(in_features=2048, out_features=768, bias=False)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "              (act): NewGELUActivation()\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "      (1-11): 11 x T5Block(\n",
              "        (layer): ModuleList(\n",
              "          (0): T5LayerSelfAttention(\n",
              "            (SelfAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (1): T5LayerCrossAttention(\n",
              "            (EncDecAttention): T5Attention(\n",
              "              (q): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (k): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (v): Linear(in_features=768, out_features=768, bias=False)\n",
              "              (o): Linear(in_features=768, out_features=768, bias=False)\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "          (2): T5LayerFF(\n",
              "            (DenseReluDense): T5DenseGatedActDense(\n",
              "              (wi_0): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wi_1): Linear(in_features=768, out_features=2048, bias=False)\n",
              "              (wo): Linear(in_features=2048, out_features=768, bias=False)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "              (act): NewGELUActivation()\n",
              "            )\n",
              "            (layer_norm): T5LayerNorm()\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (final_layer_norm): T5LayerNorm()\n",
              "    (dropout): Dropout(p=0.1, inplace=False)\n",
              "  )\n",
              "  (lm_head): Linear(in_features=768, out_features=32128, bias=False)\n",
              ")"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from transformers import T5Tokenizer, T5ForConditionalGeneration, AdamW\n",
        "import torch\n",
        "\n",
        "# Set device\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# Load the model and tokenizer\n",
        "model_name = \"google/flan-t5-base\"\n",
        "tokenizer = T5Tokenizer.from_pretrained(model_name)\n",
        "model = T5ForConditionalGeneration.from_pretrained(model_name)\n",
        "model.to(device)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  Create dataset and dataloader for model"
      ],
      "metadata": {
        "id": "xjo6smQ-hCAl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wk4AyhL6fyz4"
      },
      "outputs": [],
      "source": [
        "from torch.utils.data import Dataset, DataLoader, RandomSampler\n",
        "\n",
        "class NewsSummaryDataset(Dataset):\n",
        "    def __init__(self, tokenizer, data, max_length=512):\n",
        "        self.tokenizer = tokenizer\n",
        "        self.data = data\n",
        "        self.max_length = max_length\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        item = self.data.iloc[idx]\n",
        "        encodings = self.tokenizer(item['content'], max_length=self.max_length, truncation=True, padding=\"max_length\", return_tensors=\"pt\")\n",
        "        target_encodings = self.tokenizer(item['Abstract'], max_length=128, truncation=True, padding=\"max_length\", return_tensors=\"pt\")\n",
        "        return encodings.input_ids.squeeze(), encodings.attention_mask.squeeze(), target_encodings.input_ids.squeeze()\n",
        "\n",
        "\n",
        "train_dataset = NewsSummaryDataset(tokenizer, data)\n",
        "train_dataloader = DataLoader(train_dataset, sampler=RandomSampler(train_dataset), batch_size=4)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Incorporating Facebook Hate Speach Model"
      ],
      "metadata": {
        "id": "ltiF4oMEhKYw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader, RandomSampler\n",
        "from transformers import T5Tokenizer, T5ForConditionalGeneration, AdamW\n",
        "from transformers import pipeline\n"
      ],
      "metadata": {
        "id": "YastOqMShRn0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tokens = [\"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\", \"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\", \"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\"]\n",
        "\n",
        "current_token_index = 0"
      ],
      "metadata": {
        "id": "WVbIA3T4hSVZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_headers():\n",
        "    global current_token_index\n",
        "    return {\"Authorization\": f\"Bearer {tokens[current_token_index]}\"}"
      ],
      "metadata": {
        "id": "u9-A63r2hV5Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def query_hate_speech(text):\n",
        "    global current_token_index\n",
        "    API_URL = \"https://api-inference.huggingface.co/models/facebook/roberta-hate-speech-dynabench-r4-target\"\n",
        "    headers = get_headers()\n",
        "    payload = {\"inputs\": text}\n",
        "    response = requests.post(API_URL, headers=headers, json=payload)\n",
        "\n",
        "    if response.status_code == 429:\n",
        "        print(\"Rate limit reached with current token, switching to next token.\")\n",
        "        current_token_index = (current_token_index + 1) % len(tokens)\n",
        "        if current_token_index == 0:\n",
        "            print(\"All tokens have reached rate limits. Training will stop and model will be saved.\")\n",
        "            raise RuntimeError(\"All tokens exhausted\")\n",
        "        headers = get_headers()\n",
        "        return query_hate_speech(text)\n",
        "\n",
        "    return response.json()"
      ],
      "metadata": {
        "id": "OeSEtFPQhXQi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_reward(predictions, device):\n",
        "    rewards = []\n",
        "    for prediction in predictions:\n",
        "        result = query_hate_speech(prediction)\n",
        "        print(\"API Response:\", result)\n",
        "        try:\n",
        "            response_content = result[0]\n",
        "            print(\"First item of the response:\", response_content)\n",
        "\n",
        "            if 'score' in response_content and response_content['score'] > 0.5:\n",
        "                rewards.append(-1)\n",
        "            else:\n",
        "                rewards.append(1)\n",
        "        except (IndexError, KeyError):\n",
        "            print(\"Unexpected API response format or index error:\", result)\n",
        "            rewards.append(0)\n",
        "    return torch.tensor(rewards, dtype=torch.float, device=device)"
      ],
      "metadata": {
        "id": "1wJ-_DBjhZCU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_data_loader(dataset, batch_size=4):\n",
        "    sampler = RandomSampler(dataset)\n",
        "    return DataLoader(dataset, sampler=sampler, batch_size=batch_size)"
      ],
      "metadata": {
        "id": "5MS-y1HwhlY5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_loader = create_data_loader(NewsSummaryDataset(tokenizer, df))\n",
        "\n",
        "optimizer = AdamW(model.parameters(), lr=5e-5)"
      ],
      "metadata": {
        "id": "itYzWzlEhtfL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model.to(device)"
      ],
      "metadata": {
        "id": "Ubdtb_85hx_r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Trainging the Model"
      ],
      "metadata": {
        "id": "VKYB0oo0ifxu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qPuMnFakfyz4",
        "outputId": "17f94995-af3a-43e7-8576-f10257a5a2fe"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.\n",
            "/home/ridit.jain.21cse/.local/lib/python3.8/site-packages/transformers/optimization.py:457: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Epoch 1, Loss: 30.186389923095703\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: [[{'label': 'nothate', 'score': 0.940955638885498}, {'label': 'hate', 'score': 0.05904437229037285}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.940955638885498}, {'label': 'hate', 'score': 0.05904437229037285}]\n",
            "Epoch 1, Loss: 35.83033752441406\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996223449707031}, {'label': 'hate', 'score': 0.0003776595403905958}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996223449707031}, {'label': 'hate', 'score': 0.0003776595403905958}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998383522033691}, {'label': 'hate', 'score': 0.00016156211495399475}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998383522033691}, {'label': 'hate', 'score': 0.00016156211495399475}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9165992140769958}, {'label': 'hate', 'score': 0.08340079337358475}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9165992140769958}, {'label': 'hate', 'score': 0.08340079337358475}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993908405303955}, {'label': 'hate', 'score': 0.000609174370765686}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993908405303955}, {'label': 'hate', 'score': 0.000609174370765686}]\n",
            "Epoch 1, Loss: 34.58445358276367\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9339553117752075}, {'label': 'hate', 'score': 0.06604469567537308}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9339553117752075}, {'label': 'hate', 'score': 0.06604469567537308}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985969662666321}, {'label': 'hate', 'score': 0.0014030466554686427}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985969662666321}, {'label': 'hate', 'score': 0.0014030466554686427}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9939568042755127}, {'label': 'hate', 'score': 0.006043227389454842}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9939568042755127}, {'label': 'hate', 'score': 0.006043227389454842}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9528912901878357}, {'label': 'hate', 'score': 0.04710865393280983}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9528912901878357}, {'label': 'hate', 'score': 0.04710865393280983}]\n",
            "Epoch 1, Loss: 32.4539680480957\n",
            "API Response: [[{'label': 'nothate', 'score': 0.994697093963623}, {'label': 'hate', 'score': 0.005302906036376953}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.994697093963623}, {'label': 'hate', 'score': 0.005302906036376953}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979221224784851}, {'label': 'hate', 'score': 0.002077866345643997}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979221224784851}, {'label': 'hate', 'score': 0.002077866345643997}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9862300157546997}, {'label': 'hate', 'score': 0.013770035468041897}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9862300157546997}, {'label': 'hate', 'score': 0.013770035468041897}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9181930422782898}, {'label': 'hate', 'score': 0.08180691301822662}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9181930422782898}, {'label': 'hate', 'score': 0.08180691301822662}]\n",
            "Epoch 1, Loss: 32.417293548583984\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990932941436768}, {'label': 'hate', 'score': 0.0009067420032806695}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990932941436768}, {'label': 'hate', 'score': 0.0009067420032806695}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.9929928779602051}, {'label': 'nothate', 'score': 0.0070071895606815815}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.9929928779602051}, {'label': 'nothate', 'score': 0.0070071895606815815}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966689944267273}, {'label': 'hate', 'score': 0.0033309967257082462}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966689944267273}, {'label': 'hate', 'score': 0.0033309967257082462}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9974912405014038}, {'label': 'hate', 'score': 0.002508769975975156}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9974912405014038}, {'label': 'hate', 'score': 0.002508769975975156}]\n",
            "Epoch 1, Loss: 28.317964553833008\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987063407897949}, {'label': 'hate', 'score': 0.0012936359271407127}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987063407897949}, {'label': 'hate', 'score': 0.0012936359271407127}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997761845588684}, {'label': 'hate', 'score': 0.00022380950395017862}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997761845588684}, {'label': 'hate', 'score': 0.00022380950395017862}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9904035329818726}, {'label': 'hate', 'score': 0.009596509858965874}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9904035329818726}, {'label': 'hate', 'score': 0.009596509858965874}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997668445110321}, {'label': 'hate', 'score': 0.002331549534574151}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997668445110321}, {'label': 'hate', 'score': 0.002331549534574151}]\n",
            "Epoch 1, Loss: 28.315784454345703\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9213088154792786}, {'label': 'hate', 'score': 0.07869115471839905}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9213088154792786}, {'label': 'hate', 'score': 0.07869115471839905}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9947786331176758}, {'label': 'hate', 'score': 0.005221344064921141}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9947786331176758}, {'label': 'hate', 'score': 0.005221344064921141}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9398424625396729}, {'label': 'hate', 'score': 0.060157593339681625}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9398424625396729}, {'label': 'hate', 'score': 0.060157593339681625}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995489716529846}, {'label': 'hate', 'score': 0.00045098186819814146}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995489716529846}, {'label': 'hate', 'score': 0.00045098186819814146}]\n",
            "Epoch 1, Loss: 27.94441795349121\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9882783889770508}, {'label': 'hate', 'score': 0.01172154862433672}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9882783889770508}, {'label': 'hate', 'score': 0.01172154862433672}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9911049008369446}, {'label': 'hate', 'score': 0.008895134553313255}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9911049008369446}, {'label': 'hate', 'score': 0.008895134553313255}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981083869934082}, {'label': 'hate', 'score': 0.0018916587578132749}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981083869934082}, {'label': 'hate', 'score': 0.0018916587578132749}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993461966514587}, {'label': 'hate', 'score': 0.0006538404850289226}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993461966514587}, {'label': 'hate', 'score': 0.0006538404850289226}]\n",
            "Epoch 1, Loss: 25.11480140686035\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992139339447021}, {'label': 'hate', 'score': 0.000786034797783941}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992139339447021}, {'label': 'hate', 'score': 0.000786034797783941}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994645714759827}, {'label': 'hate', 'score': 0.0005354671156965196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994645714759827}, {'label': 'hate', 'score': 0.0005354671156965196}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999567449092865}, {'label': 'hate', 'score': 0.0004324834153521806}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999567449092865}, {'label': 'hate', 'score': 0.0004324834153521806}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9921425580978394}, {'label': 'hate', 'score': 0.007857483811676502}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9921425580978394}, {'label': 'hate', 'score': 0.007857483811676502}]\n",
            "Epoch 1, Loss: 26.579599380493164\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9793562293052673}, {'label': 'hate', 'score': 0.020643819123506546}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9793562293052673}, {'label': 'hate', 'score': 0.020643819123506546}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998334646224976}, {'label': 'hate', 'score': 0.0001664866431383416}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998334646224976}, {'label': 'hate', 'score': 0.0001664866431383416}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979276657104492}, {'label': 'hate', 'score': 0.002072354778647423}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979276657104492}, {'label': 'hate', 'score': 0.002072354778647423}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9333191514015198}, {'label': 'hate', 'score': 0.06668082624673843}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9333191514015198}, {'label': 'hate', 'score': 0.06668082624673843}]\n",
            "Epoch 1, Loss: 23.600271224975586\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992941617965698}, {'label': 'hate', 'score': 0.0007057813927531242}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992941617965698}, {'label': 'hate', 'score': 0.0007057813927531242}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994066953659058}, {'label': 'hate', 'score': 0.0005933195352554321}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994066953659058}, {'label': 'hate', 'score': 0.0005933195352554321}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984304308891296}, {'label': 'hate', 'score': 0.001569543033838272}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984304308891296}, {'label': 'hate', 'score': 0.001569543033838272}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9226804971694946}, {'label': 'hate', 'score': 0.07731947302818298}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9226804971694946}, {'label': 'hate', 'score': 0.07731947302818298}]\n",
            "Epoch 1, Loss: 23.588041305541992\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9922685027122498}, {'label': 'hate', 'score': 0.007731553167104721}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9922685027122498}, {'label': 'hate', 'score': 0.007731553167104721}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9972233772277832}, {'label': 'hate', 'score': 0.002776601118966937}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9972233772277832}, {'label': 'hate', 'score': 0.002776601118966937}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.6891027092933655}, {'label': 'hate', 'score': 0.3108972907066345}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.6891027092933655}, {'label': 'hate', 'score': 0.3108972907066345}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.7029193043708801}, {'label': 'nothate', 'score': 0.2970806658267975}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.7029193043708801}, {'label': 'nothate', 'score': 0.2970806658267975}]\n",
            "Epoch 1, Loss: 21.279640197753906\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969735145568848}, {'label': 'hate', 'score': 0.003026505233719945}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969735145568848}, {'label': 'hate', 'score': 0.003026505233719945}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994569420814514}, {'label': 'hate', 'score': 0.0005430049495771527}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994569420814514}, {'label': 'hate', 'score': 0.0005430049495771527}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.996300458908081}, {'label': 'hate', 'score': 0.0036995289847254753}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.996300458908081}, {'label': 'hate', 'score': 0.0036995289847254753}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997713565826416}, {'label': 'hate', 'score': 0.002286431146785617}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997713565826416}, {'label': 'hate', 'score': 0.002286431146785617}]\n",
            "Epoch 1, Loss: 25.03566551208496\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9416875243186951}, {'label': 'hate', 'score': 0.05831249803304672}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9416875243186951}, {'label': 'hate', 'score': 0.05831249803304672}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9907270669937134}, {'label': 'hate', 'score': 0.009272935800254345}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9907270669937134}, {'label': 'hate', 'score': 0.009272935800254345}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9927954077720642}, {'label': 'hate', 'score': 0.007204550318419933}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9927954077720642}, {'label': 'hate', 'score': 0.007204550318419933}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998494386672974}, {'label': 'hate', 'score': 0.00015048256318550557}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998494386672974}, {'label': 'hate', 'score': 0.00015048256318550557}]\n",
            "Epoch 1, Loss: 22.1937255859375\n",
            "API Response: [[{'label': 'nothate', 'score': 0.946008026599884}, {'label': 'hate', 'score': 0.05399197340011597}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.946008026599884}, {'label': 'hate', 'score': 0.05399197340011597}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989628791809082}, {'label': 'hate', 'score': 0.0010371044045314193}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989628791809082}, {'label': 'hate', 'score': 0.0010371044045314193}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.986349880695343}, {'label': 'hate', 'score': 0.013650093227624893}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.986349880695343}, {'label': 'hate', 'score': 0.013650093227624893}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995280504226685}, {'label': 'hate', 'score': 0.00047198618995025754}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995280504226685}, {'label': 'hate', 'score': 0.00047198618995025754}]\n",
            "Epoch 1, Loss: 22.130027770996094\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993403553962708}, {'label': 'hate', 'score': 0.0006596155581064522}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993403553962708}, {'label': 'hate', 'score': 0.0006596155581064522}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9952801465988159}, {'label': 'hate', 'score': 0.00471985200420022}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9952801465988159}, {'label': 'hate', 'score': 0.00471985200420022}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9814829230308533}, {'label': 'hate', 'score': 0.018517041578888893}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9814829230308533}, {'label': 'hate', 'score': 0.018517041578888893}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8121920824050903}, {'label': 'hate', 'score': 0.18780793249607086}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8121920824050903}, {'label': 'hate', 'score': 0.18780793249607086}]\n",
            "Epoch 1, Loss: 19.86228370666504\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9974120259284973}, {'label': 'hate', 'score': 0.0025880434550344944}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9974120259284973}, {'label': 'hate', 'score': 0.0025880434550344944}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989920258522034}, {'label': 'hate', 'score': 0.001007984858006239}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989920258522034}, {'label': 'hate', 'score': 0.001007984858006239}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997662901878357}, {'label': 'hate', 'score': 0.00023372139548882842}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997662901878357}, {'label': 'hate', 'score': 0.00023372139548882842}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.959137499332428}, {'label': 'hate', 'score': 0.040862515568733215}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.959137499332428}, {'label': 'hate', 'score': 0.040862515568733215}]\n",
            "Epoch 1, Loss: 21.826091766357422\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998549222946167}, {'label': 'hate', 'score': 0.00014504177670460194}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998549222946167}, {'label': 'hate', 'score': 0.00014504177670460194}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993940591812134}, {'label': 'hate', 'score': 0.0006058792932890356}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993940591812134}, {'label': 'hate', 'score': 0.0006058792932890356}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990052580833435}, {'label': 'hate', 'score': 0.000994818634353578}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990052580833435}, {'label': 'hate', 'score': 0.000994818634353578}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987882971763611}, {'label': 'hate', 'score': 0.0012117773294448853}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987882971763611}, {'label': 'hate', 'score': 0.0012117773294448853}]\n",
            "Epoch 1, Loss: 21.220823287963867\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7663024663925171}, {'label': 'hate', 'score': 0.2336975634098053}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7663024663925171}, {'label': 'hate', 'score': 0.2336975634098053}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9782649278640747}, {'label': 'hate', 'score': 0.021735040470957756}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9782649278640747}, {'label': 'hate', 'score': 0.021735040470957756}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987587928771973}, {'label': 'hate', 'score': 0.0012412415817379951}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987587928771973}, {'label': 'hate', 'score': 0.0012412415817379951}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992530941963196}, {'label': 'hate', 'score': 0.0007469189004041255}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992530941963196}, {'label': 'hate', 'score': 0.0007469189004041255}]\n",
            "Epoch 1, Loss: 18.80470085144043\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989816546440125}, {'label': 'hate', 'score': 0.0010182937839999795}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989816546440125}, {'label': 'hate', 'score': 0.0010182937839999795}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968005418777466}, {'label': 'hate', 'score': 0.0031994893215596676}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968005418777466}, {'label': 'hate', 'score': 0.0031994893215596676}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9960513710975647}, {'label': 'hate', 'score': 0.003948621451854706}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9960513710975647}, {'label': 'hate', 'score': 0.003948621451854706}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958716034889221}, {'label': 'hate', 'score': 0.0041283732280135155}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958716034889221}, {'label': 'hate', 'score': 0.0041283732280135155}]\n",
            "Epoch 1, Loss: 17.3671875\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991957545280457}, {'label': 'hate', 'score': 0.0008042494882829487}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991957545280457}, {'label': 'hate', 'score': 0.0008042494882829487}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996415376663208}, {'label': 'hate', 'score': 0.0003584424266591668}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996415376663208}, {'label': 'hate', 'score': 0.0003584424266591668}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9790197014808655}, {'label': 'hate', 'score': 0.02098027803003788}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9790197014808655}, {'label': 'hate', 'score': 0.02098027803003788}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995012283325195}, {'label': 'hate', 'score': 0.0004987583379261196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995012283325195}, {'label': 'hate', 'score': 0.0004987583379261196}]\n",
            "Epoch 1, Loss: 17.345012664794922\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983162879943848}, {'label': 'hate', 'score': 0.0016837319126352668}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983162879943848}, {'label': 'hate', 'score': 0.0016837319126352668}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9943594336509705}, {'label': 'hate', 'score': 0.005640608258545399}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9943594336509705}, {'label': 'hate', 'score': 0.005640608258545399}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9936922788619995}, {'label': 'hate', 'score': 0.006307695992290974}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9936922788619995}, {'label': 'hate', 'score': 0.006307695992290974}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9902792572975159}, {'label': 'hate', 'score': 0.009720705449581146}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9902792572975159}, {'label': 'hate', 'score': 0.009720705449581146}]\n",
            "Epoch 1, Loss: 17.181941986083984\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999792754650116}, {'label': 'hate', 'score': 0.00020726023649331182}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999792754650116}, {'label': 'hate', 'score': 0.00020726023649331182}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993649125099182}, {'label': 'hate', 'score': 0.0006350952899083495}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993649125099182}, {'label': 'hate', 'score': 0.0006350952899083495}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985588192939758}, {'label': 'hate', 'score': 0.001441235770471394}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985588192939758}, {'label': 'hate', 'score': 0.001441235770471394}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9019104838371277}, {'label': 'hate', 'score': 0.09808957576751709}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9019104838371277}, {'label': 'hate', 'score': 0.09808957576751709}]\n",
            "Epoch 1, Loss: 15.341182708740234\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9932953715324402}, {'label': 'hate', 'score': 0.006704570725560188}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9932953715324402}, {'label': 'hate', 'score': 0.006704570725560188}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9899508357048035}, {'label': 'hate', 'score': 0.01004917174577713}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9899508357048035}, {'label': 'hate', 'score': 0.01004917174577713}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9954760670661926}, {'label': 'hate', 'score': 0.004523900803178549}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9954760670661926}, {'label': 'hate', 'score': 0.004523900803178549}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.777674674987793}, {'label': 'hate', 'score': 0.22232533991336823}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.777674674987793}, {'label': 'hate', 'score': 0.22232533991336823}]\n",
            "Epoch 1, Loss: 15.690464973449707\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996826648712158}, {'label': 'hate', 'score': 0.00031738166580908}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996826648712158}, {'label': 'hate', 'score': 0.00031738166580908}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9938786625862122}, {'label': 'hate', 'score': 0.006121327634900808}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9938786625862122}, {'label': 'hate', 'score': 0.006121327634900808}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9862348437309265}, {'label': 'hate', 'score': 0.013765093870460987}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9862348437309265}, {'label': 'hate', 'score': 0.013765093870460987}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996036887168884}, {'label': 'hate', 'score': 0.00039636375731788576}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996036887168884}, {'label': 'hate', 'score': 0.00039636375731788576}]\n",
            "Epoch 1, Loss: 14.65967845916748\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9650341868400574}, {'label': 'hate', 'score': 0.03496577590703964}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9650341868400574}, {'label': 'hate', 'score': 0.03496577590703964}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996809959411621}, {'label': 'hate', 'score': 0.0003190739662386477}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996809959411621}, {'label': 'hate', 'score': 0.0003190739662386477}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984945058822632}, {'label': 'hate', 'score': 0.0015054825926199555}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984945058822632}, {'label': 'hate', 'score': 0.0015054825926199555}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987678527832031}, {'label': 'hate', 'score': 0.00123222719412297}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987678527832031}, {'label': 'hate', 'score': 0.00123222719412297}]\n",
            "Epoch 1, Loss: 12.107004165649414\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9918437600135803}, {'label': 'hate', 'score': 0.00815621018409729}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9918437600135803}, {'label': 'hate', 'score': 0.00815621018409729}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9739499092102051}, {'label': 'hate', 'score': 0.02605009824037552}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9739499092102051}, {'label': 'hate', 'score': 0.02605009824037552}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9961580634117126}, {'label': 'hate', 'score': 0.0038420187775045633}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9961580634117126}, {'label': 'hate', 'score': 0.0038420187775045633}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.993521511554718}, {'label': 'hate', 'score': 0.006478477269411087}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.993521511554718}, {'label': 'hate', 'score': 0.006478477269411087}]\n",
            "Epoch 1, Loss: 14.122015953063965\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9760857820510864}, {'label': 'hate', 'score': 0.02391420491039753}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9760857820510864}, {'label': 'hate', 'score': 0.02391420491039753}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9468493461608887}, {'label': 'hate', 'score': 0.053150612860918045}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9468493461608887}, {'label': 'hate', 'score': 0.053150612860918045}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9963923096656799}, {'label': 'hate', 'score': 0.0036076644901186228}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9963923096656799}, {'label': 'hate', 'score': 0.0036076644901186228}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9231534600257874}, {'label': 'hate', 'score': 0.07684648782014847}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9231534600257874}, {'label': 'hate', 'score': 0.07684648782014847}]\n",
            "Epoch 1, Loss: 16.8906192779541\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985315799713135}, {'label': 'hate', 'score': 0.001468421658501029}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985315799713135}, {'label': 'hate', 'score': 0.001468421658501029}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9972741007804871}, {'label': 'hate', 'score': 0.0027258533518761396}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9972741007804871}, {'label': 'hate', 'score': 0.0027258533518761396}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9916497468948364}, {'label': 'hate', 'score': 0.00835026428103447}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9916497468948364}, {'label': 'hate', 'score': 0.00835026428103447}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9701355695724487}, {'label': 'hate', 'score': 0.029864441603422165}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9701355695724487}, {'label': 'hate', 'score': 0.029864441603422165}]\n",
            "Epoch 1, Loss: 13.599148750305176\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8780015110969543}, {'label': 'hate', 'score': 0.12199854850769043}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8780015110969543}, {'label': 'hate', 'score': 0.12199854850769043}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8909525871276855}, {'label': 'hate', 'score': 0.10904738306999207}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8909525871276855}, {'label': 'hate', 'score': 0.10904738306999207}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9757492542266846}, {'label': 'hate', 'score': 0.024250706657767296}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9757492542266846}, {'label': 'hate', 'score': 0.024250706657767296}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7850112318992615}, {'label': 'hate', 'score': 0.2149887979030609}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7850112318992615}, {'label': 'hate', 'score': 0.2149887979030609}]\n",
            "Epoch 1, Loss: 11.907934188842773\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9947870969772339}, {'label': 'hate', 'score': 0.0052129351533949375}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9947870969772339}, {'label': 'hate', 'score': 0.0052129351533949375}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9719297289848328}, {'label': 'hate', 'score': 0.02807021513581276}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9719297289848328}, {'label': 'hate', 'score': 0.02807021513581276}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9922308325767517}, {'label': 'hate', 'score': 0.007769206538796425}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9922308325767517}, {'label': 'hate', 'score': 0.007769206538796425}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9871280193328857}, {'label': 'hate', 'score': 0.012871990911662579}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9871280193328857}, {'label': 'hate', 'score': 0.012871990911662579}]\n",
            "Epoch 1, Loss: 13.193615913391113\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9527844786643982}, {'label': 'hate', 'score': 0.04721549525856972}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9527844786643982}, {'label': 'hate', 'score': 0.04721549525856972}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.996488094329834}, {'label': 'hate', 'score': 0.0035118968226015568}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.996488094329834}, {'label': 'hate', 'score': 0.0035118968226015568}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9949923157691956}, {'label': 'hate', 'score': 0.005007732193917036}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9949923157691956}, {'label': 'hate', 'score': 0.005007732193917036}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7915987968444824}, {'label': 'hate', 'score': 0.20840123295783997}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7915987968444824}, {'label': 'hate', 'score': 0.20840123295783997}]\n",
            "Epoch 1, Loss: 10.667818069458008\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984562397003174}, {'label': 'hate', 'score': 0.0015437270049005747}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984562397003174}, {'label': 'hate', 'score': 0.0015437270049005747}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.544266939163208}, {'label': 'nothate', 'score': 0.4557330906391144}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.544266939163208}, {'label': 'nothate', 'score': 0.4557330906391144}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.984012246131897}, {'label': 'hate', 'score': 0.015987776219844818}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.984012246131897}, {'label': 'hate', 'score': 0.015987776219844818}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9479236006736755}, {'label': 'hate', 'score': 0.05207638442516327}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9479236006736755}, {'label': 'hate', 'score': 0.05207638442516327}]\n",
            "Epoch 1, Loss: 11.08017635345459\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991329312324524}, {'label': 'hate', 'score': 0.0008671055547893047}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991329312324524}, {'label': 'hate', 'score': 0.0008671055547893047}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9407562613487244}, {'label': 'hate', 'score': 0.05924370139837265}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9407562613487244}, {'label': 'hate', 'score': 0.05924370139837265}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999618649482727}, {'label': 'hate', 'score': 0.0003813693474512547}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999618649482727}, {'label': 'hate', 'score': 0.0003813693474512547}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979755282402039}, {'label': 'hate', 'score': 0.0020244813058525324}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979755282402039}, {'label': 'hate', 'score': 0.0020244813058525324}]\n",
            "Epoch 1, Loss: 12.54232406616211\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8963266015052795}, {'label': 'hate', 'score': 0.10367331653833389}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8963266015052795}, {'label': 'hate', 'score': 0.10367331653833389}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9972482323646545}, {'label': 'hate', 'score': 0.002751689637079835}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9972482323646545}, {'label': 'hate', 'score': 0.002751689637079835}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968000650405884}, {'label': 'hate', 'score': 0.0031999314669519663}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968000650405884}, {'label': 'hate', 'score': 0.0031999314669519663}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9943655729293823}, {'label': 'hate', 'score': 0.005634428467601538}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9943655729293823}, {'label': 'hate', 'score': 0.005634428467601538}]\n",
            "Epoch 1, Loss: 8.472105979919434\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9950792789459229}, {'label': 'hate', 'score': 0.004920759703963995}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9950792789459229}, {'label': 'hate', 'score': 0.004920759703963995}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9452423453330994}, {'label': 'hate', 'score': 0.05475764349102974}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9452423453330994}, {'label': 'hate', 'score': 0.05475764349102974}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995007514953613}, {'label': 'hate', 'score': 0.0004992558970116079}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995007514953613}, {'label': 'hate', 'score': 0.0004992558970116079}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988717436790466}, {'label': 'hate', 'score': 0.0011282524792477489}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988717436790466}, {'label': 'hate', 'score': 0.0011282524792477489}]\n",
            "Epoch 1, Loss: 8.399523735046387\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9939529299736023}, {'label': 'hate', 'score': 0.0060470085591077805}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9939529299736023}, {'label': 'hate', 'score': 0.0060470085591077805}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.7155728936195374}, {'label': 'nothate', 'score': 0.28442710638046265}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.7155728936195374}, {'label': 'nothate', 'score': 0.28442710638046265}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999498724937439}, {'label': 'hate', 'score': 0.0005012201727367938}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999498724937439}, {'label': 'hate', 'score': 0.0005012201727367938}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9972097277641296}, {'label': 'hate', 'score': 0.0027902869042009115}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9972097277641296}, {'label': 'hate', 'score': 0.0027902869042009115}]\n",
            "Epoch 1, Loss: 8.540112495422363\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9745939373970032}, {'label': 'hate', 'score': 0.025406060740351677}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9745939373970032}, {'label': 'hate', 'score': 0.025406060740351677}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996579885482788}, {'label': 'hate', 'score': 0.00034200804657302797}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996579885482788}, {'label': 'hate', 'score': 0.00034200804657302797}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979705214500427}, {'label': 'hate', 'score': 0.0020294818095862865}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979705214500427}, {'label': 'hate', 'score': 0.0020294818095862865}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9903646111488342}, {'label': 'hate', 'score': 0.009635444730520248}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9903646111488342}, {'label': 'hate', 'score': 0.009635444730520248}]\n",
            "Epoch 1, Loss: 8.725248336791992\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966577291488647}, {'label': 'hate', 'score': 0.00334226805716753}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966577291488647}, {'label': 'hate', 'score': 0.00334226805716753}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.937432050704956}, {'label': 'hate', 'score': 0.06256794929504395}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.937432050704956}, {'label': 'hate', 'score': 0.06256794929504395}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.941027820110321}, {'label': 'hate', 'score': 0.058972205966711044}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.941027820110321}, {'label': 'hate', 'score': 0.058972205966711044}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7058147192001343}, {'label': 'hate', 'score': 0.2941853106021881}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7058147192001343}, {'label': 'hate', 'score': 0.2941853106021881}]\n",
            "Epoch 1, Loss: 6.395439147949219\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8200082182884216}, {'label': 'hate', 'score': 0.17999178171157837}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8200082182884216}, {'label': 'hate', 'score': 0.17999178171157837}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9722267985343933}, {'label': 'hate', 'score': 0.027773156762123108}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9722267985343933}, {'label': 'hate', 'score': 0.027773156762123108}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9938143491744995}, {'label': 'hate', 'score': 0.00618562800809741}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9938143491744995}, {'label': 'hate', 'score': 0.00618562800809741}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958403706550598}, {'label': 'hate', 'score': 0.004159560892730951}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958403706550598}, {'label': 'hate', 'score': 0.004159560892730951}]\n",
            "Epoch 1, Loss: 8.088994979858398\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9827242493629456}, {'label': 'hate', 'score': 0.017275791615247726}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9827242493629456}, {'label': 'hate', 'score': 0.017275791615247726}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9927680492401123}, {'label': 'hate', 'score': 0.007231938652694225}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9927680492401123}, {'label': 'hate', 'score': 0.007231938652694225}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9927532076835632}, {'label': 'hate', 'score': 0.007246718741953373}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9927532076835632}, {'label': 'hate', 'score': 0.007246718741953373}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9498426914215088}, {'label': 'hate', 'score': 0.05015728622674942}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9498426914215088}, {'label': 'hate', 'score': 0.05015728622674942}]\n",
            "Epoch 1, Loss: 6.075150012969971\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991008043289185}, {'label': 'hate', 'score': 0.0008992737857624888}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991008043289185}, {'label': 'hate', 'score': 0.0008992737857624888}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9945934414863586}, {'label': 'hate', 'score': 0.005406592972576618}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9945934414863586}, {'label': 'hate', 'score': 0.005406592972576618}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9733428359031677}, {'label': 'hate', 'score': 0.026657208800315857}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9733428359031677}, {'label': 'hate', 'score': 0.026657208800315857}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9869911074638367}, {'label': 'hate', 'score': 0.013008895330131054}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9869911074638367}, {'label': 'hate', 'score': 0.013008895330131054}]\n",
            "Epoch 1, Loss: 5.447275161743164\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9959030747413635}, {'label': 'hate', 'score': 0.0040969885885715485}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9959030747413635}, {'label': 'hate', 'score': 0.0040969885885715485}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995808482170105}, {'label': 'hate', 'score': 0.004191530402749777}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995808482170105}, {'label': 'hate', 'score': 0.004191530402749777}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8920242190361023}, {'label': 'hate', 'score': 0.10797583311796188}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8920242190361023}, {'label': 'hate', 'score': 0.10797583311796188}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9904670119285583}, {'label': 'hate', 'score': 0.009533025324344635}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9904670119285583}, {'label': 'hate', 'score': 0.009533025324344635}]\n",
            "Epoch 1, Loss: 4.887855529785156\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9685336947441101}, {'label': 'hate', 'score': 0.03146630525588989}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9685336947441101}, {'label': 'hate', 'score': 0.03146630525588989}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9534886479377747}, {'label': 'hate', 'score': 0.04651139676570892}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9534886479377747}, {'label': 'hate', 'score': 0.04651139676570892}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9949796795845032}, {'label': 'hate', 'score': 0.005020297598093748}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9949796795845032}, {'label': 'hate', 'score': 0.005020297598093748}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983172416687012}, {'label': 'hate', 'score': 0.001682779984548688}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983172416687012}, {'label': 'hate', 'score': 0.001682779984548688}]\n",
            "Epoch 1, Loss: 5.746947765350342\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998520612716675}, {'label': 'hate', 'score': 0.00014794536400586367}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998520612716675}, {'label': 'hate', 'score': 0.00014794536400586367}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999531626701355}, {'label': 'hate', 'score': 0.0004684375016950071}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999531626701355}, {'label': 'hate', 'score': 0.0004684375016950071}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989006519317627}, {'label': 'hate', 'score': 0.0010993080213665962}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989006519317627}, {'label': 'hate', 'score': 0.0010993080213665962}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9858084917068481}, {'label': 'hate', 'score': 0.014191566966474056}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9858084917068481}, {'label': 'hate', 'score': 0.014191566966474056}]\n",
            "Epoch 1, Loss: 4.048111915588379\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997970461845398}, {'label': 'hate', 'score': 0.0002029792231041938}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997970461845398}, {'label': 'hate', 'score': 0.0002029792231041938}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9723806381225586}, {'label': 'hate', 'score': 0.02761932462453842}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9723806381225586}, {'label': 'hate', 'score': 0.02761932462453842}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994169473648071}, {'label': 'hate', 'score': 0.000583051994908601}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994169473648071}, {'label': 'hate', 'score': 0.000583051994908601}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8673244118690491}, {'label': 'hate', 'score': 0.1326756477355957}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8673244118690491}, {'label': 'hate', 'score': 0.1326756477355957}]\n",
            "Epoch 1, Loss: 4.063704490661621\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995525062084198}, {'label': 'hate', 'score': 0.004474858287721872}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995525062084198}, {'label': 'hate', 'score': 0.004474858287721872}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9945045113563538}, {'label': 'hate', 'score': 0.005495407618582249}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9945045113563538}, {'label': 'hate', 'score': 0.005495407618582249}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9952659606933594}, {'label': 'hate', 'score': 0.004734031390398741}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9952659606933594}, {'label': 'hate', 'score': 0.004734031390398741}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9941363334655762}, {'label': 'hate', 'score': 0.00586367305368185}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9941363334655762}, {'label': 'hate', 'score': 0.00586367305368185}]\n",
            "Epoch 1, Loss: 3.9099013805389404\n",
            "API Response: [[{'label': 'nothate', 'score': 0.989434540271759}, {'label': 'hate', 'score': 0.010565503500401974}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.989434540271759}, {'label': 'hate', 'score': 0.010565503500401974}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986866116523743}, {'label': 'hate', 'score': 0.0013133439933881164}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986866116523743}, {'label': 'hate', 'score': 0.0013133439933881164}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9975807666778564}, {'label': 'hate', 'score': 0.0024191790726035833}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9975807666778564}, {'label': 'hate', 'score': 0.0024191790726035833}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999394416809082}, {'label': 'hate', 'score': 0.0006056215497665107}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999394416809082}, {'label': 'hate', 'score': 0.0006056215497665107}]\n",
            "Epoch 1, Loss: 4.009568691253662\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9739145040512085}, {'label': 'hate', 'score': 0.026085475459694862}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9739145040512085}, {'label': 'hate', 'score': 0.026085475459694862}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9905146360397339}, {'label': 'hate', 'score': 0.009485390968620777}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9905146360397339}, {'label': 'hate', 'score': 0.009485390968620777}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9970247149467468}, {'label': 'hate', 'score': 0.0029752955306321383}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9970247149467468}, {'label': 'hate', 'score': 0.0029752955306321383}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9838898181915283}, {'label': 'hate', 'score': 0.01611022837460041}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9838898181915283}, {'label': 'hate', 'score': 0.01611022837460041}]\n",
            "Epoch 1, Loss: 3.8194875717163086\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[ -7.2158,   4.1336,  -0.1784,  ...,  -7.5849,  -6.9431,  -7.3638],\n",
            "         [-20.0000, -13.1363, -18.0035,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -7.2001,  -9.2852,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  12.0639,   9.8441,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 14.5129,   8.7357,   6.4195,  ...,  13.9553,  14.7729,  14.3178],\n",
            "         [ 20.0000,  10.6039,   8.5029,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -4.6591,   3.3725,   0.5509,  ...,  -5.0063,  -4.4922,  -4.7266],\n",
            "         [-20.0000,  -1.5966,  -0.7586,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -1.0928,  -3.4467,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  11.0881,   9.3190,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,   9.6635,   8.5173,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,   9.1732,   7.9948,  ...,  19.6920,  20.0000,  19.9633]],\n",
            "\n",
            "        [[ -3.1548,   4.6803,   1.1840,  ...,  -3.4438,  -2.9037,  -3.1581],\n",
            "         [-20.0000,  -8.5026, -10.7723,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -7.2707,  -8.1715,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 18.6092,  10.5440,   8.6500,  ...,  18.0793,  18.8713,  18.4563],\n",
            "         [ 12.2194,   7.0896,   4.8287,  ...,  11.8036,  12.5295,  12.1946],\n",
            "         [ 17.6458,   9.2420,   7.4054,  ...,  17.1231,  17.8999,  17.4571]],\n",
            "\n",
            "        [[ -8.0345,   3.4479,  -1.0811,  ...,  -8.3306,  -7.8964,  -8.2080],\n",
            "         [-20.0000,  -1.4404,  -3.7416,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -8.6409,  -6.5379,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  14.3560,  10.6927,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  12.6205,   9.3608,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  10.6143,   7.9339,  ...,  20.0000,  20.0000,  20.0000]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9926601052284241}, {'label': 'hate', 'score': 0.007339882664382458}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9926601052284241}, {'label': 'hate', 'score': 0.007339882664382458}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9920628666877747}, {'label': 'hate', 'score': 0.007937141694128513}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9920628666877747}, {'label': 'hate', 'score': 0.007937141694128513}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988601207733154}, {'label': 'hate', 'score': 0.0011398938950151205}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988601207733154}, {'label': 'hate', 'score': 0.0011398938950151205}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9970449805259705}, {'label': 'hate', 'score': 0.0029549789614975452}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9970449805259705}, {'label': 'hate', 'score': 0.0029549789614975452}]\n",
            "Epoch 1, Loss: 3.9685704708099365\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9506614208221436}, {'label': 'hate', 'score': 0.049338556826114655}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9506614208221436}, {'label': 'hate', 'score': 0.049338556826114655}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9922497272491455}, {'label': 'hate', 'score': 0.00775029044598341}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9922497272491455}, {'label': 'hate', 'score': 0.00775029044598341}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998089671134949}, {'label': 'hate', 'score': 0.00019104436796624213}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998089671134949}, {'label': 'hate', 'score': 0.00019104436796624213}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8944276571273804}, {'label': 'hate', 'score': 0.10557233542203903}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8944276571273804}, {'label': 'hate', 'score': 0.10557233542203903}]\n",
            "Epoch 1, Loss: 4.751058578491211\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9944950938224792}, {'label': 'hate', 'score': 0.005504838656634092}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9944950938224792}, {'label': 'hate', 'score': 0.005504838656634092}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9935529232025146}, {'label': 'hate', 'score': 0.006447069346904755}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9935529232025146}, {'label': 'hate', 'score': 0.006447069346904755}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994739890098572}, {'label': 'hate', 'score': 0.0005260171601548791}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994739890098572}, {'label': 'hate', 'score': 0.0005260171601548791}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8194730281829834}, {'label': 'hate', 'score': 0.18052692711353302}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8194730281829834}, {'label': 'hate', 'score': 0.18052692711353302}]\n",
            "Epoch 1, Loss: 3.7556097507476807\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9874380230903625}, {'label': 'hate', 'score': 0.012561973184347153}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9874380230903625}, {'label': 'hate', 'score': 0.012561973184347153}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9760017395019531}, {'label': 'hate', 'score': 0.02399824932217598}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9760017395019531}, {'label': 'hate', 'score': 0.02399824932217598}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993945360183716}, {'label': 'hate', 'score': 0.0006054628756828606}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993945360183716}, {'label': 'hate', 'score': 0.0006054628756828606}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9918951392173767}, {'label': 'hate', 'score': 0.008104819804430008}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9918951392173767}, {'label': 'hate', 'score': 0.008104819804430008}]\n",
            "Epoch 1, Loss: 3.93525767326355\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9965749382972717}, {'label': 'hate', 'score': 0.0034250044263899326}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9965749382972717}, {'label': 'hate', 'score': 0.0034250044263899326}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985578656196594}, {'label': 'hate', 'score': 0.00144211295992136}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985578656196594}, {'label': 'hate', 'score': 0.00144211295992136}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.989982545375824}, {'label': 'hate', 'score': 0.0100175142288208}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.989982545375824}, {'label': 'hate', 'score': 0.0100175142288208}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995100200176239}, {'label': 'hate', 'score': 0.00489983893930912}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995100200176239}, {'label': 'hate', 'score': 0.00489983893930912}]\n",
            "Epoch 1, Loss: 3.5307700634002686\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9952324032783508}, {'label': 'hate', 'score': 0.004767628386616707}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9952324032783508}, {'label': 'hate', 'score': 0.004767628386616707}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9965373277664185}, {'label': 'hate', 'score': 0.003462681546807289}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9965373277664185}, {'label': 'hate', 'score': 0.003462681546807289}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9469471573829651}, {'label': 'hate', 'score': 0.0530528649687767}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9469471573829651}, {'label': 'hate', 'score': 0.0530528649687767}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9865403771400452}, {'label': 'hate', 'score': 0.013459675945341587}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9865403771400452}, {'label': 'hate', 'score': 0.013459675945341587}]\n",
            "Epoch 1, Loss: 3.666745662689209\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969378709793091}, {'label': 'hate', 'score': 0.0030620961915701628}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969378709793091}, {'label': 'hate', 'score': 0.0030620961915701628}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9824603199958801}, {'label': 'hate', 'score': 0.01753963902592659}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9824603199958801}, {'label': 'hate', 'score': 0.01753963902592659}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9912478923797607}, {'label': 'hate', 'score': 0.008752104826271534}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9912478923797607}, {'label': 'hate', 'score': 0.008752104826271534}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9743402600288391}, {'label': 'hate', 'score': 0.025659771636128426}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9743402600288391}, {'label': 'hate', 'score': 0.025659771636128426}]\n",
            "Epoch 1, Loss: 2.844663143157959\n",
            "API Response: [[{'label': 'hate', 'score': 0.9388046264648438}, {'label': 'nothate', 'score': 0.06119536608457565}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.9388046264648438}, {'label': 'nothate', 'score': 0.06119536608457565}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968312382698059}, {'label': 'hate', 'score': 0.0031687761656939983}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968312382698059}, {'label': 'hate', 'score': 0.0031687761656939983}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9965460896492004}, {'label': 'hate', 'score': 0.003453904530033469}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9965460896492004}, {'label': 'hate', 'score': 0.003453904530033469}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9959190487861633}, {'label': 'hate', 'score': 0.004080995451658964}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9959190487861633}, {'label': 'hate', 'score': 0.004080995451658964}]\n",
            "Epoch 1, Loss: 3.3464698791503906\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969664216041565}, {'label': 'hate', 'score': 0.0030336356721818447}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969664216041565}, {'label': 'hate', 'score': 0.0030336356721818447}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9973987340927124}, {'label': 'hate', 'score': 0.002601232146844268}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9973987340927124}, {'label': 'hate', 'score': 0.002601232146844268}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995581328868866}, {'label': 'hate', 'score': 0.004418631549924612}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995581328868866}, {'label': 'hate', 'score': 0.004418631549924612}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9932264685630798}, {'label': 'hate', 'score': 0.006773525848984718}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9932264685630798}, {'label': 'hate', 'score': 0.006773525848984718}]\n",
            "Epoch 1, Loss: 3.6485602855682373\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993525147438049}, {'label': 'hate', 'score': 0.000647486827801913}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993525147438049}, {'label': 'hate', 'score': 0.000647486827801913}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981749057769775}, {'label': 'hate', 'score': 0.0018251203000545502}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981749057769775}, {'label': 'hate', 'score': 0.0018251203000545502}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9964562058448792}, {'label': 'hate', 'score': 0.0035437187179923058}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9964562058448792}, {'label': 'hate', 'score': 0.0035437187179923058}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991111159324646}, {'label': 'hate', 'score': 0.0008888226584531367}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991111159324646}, {'label': 'hate', 'score': 0.0008888226584531367}]\n",
            "Epoch 1, Loss: 3.2893989086151123\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9977503418922424}, {'label': 'hate', 'score': 0.0022496222518384457}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9977503418922424}, {'label': 'hate', 'score': 0.0022496222518384457}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9464003443717957}, {'label': 'hate', 'score': 0.05359963700175285}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9464003443717957}, {'label': 'hate', 'score': 0.05359963700175285}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999518871307373}, {'label': 'hate', 'score': 0.00048114865785464644}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999518871307373}, {'label': 'hate', 'score': 0.00048114865785464644}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992997646331787}, {'label': 'hate', 'score': 0.0007002708152867854}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992997646331787}, {'label': 'hate', 'score': 0.0007002708152867854}]\n",
            "Epoch 1, Loss: 3.57871675491333\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[-10.0144,   2.4447,  -0.7809,  ..., -10.3079,  -9.8223, -10.1586],\n",
            "         [-20.0000,  -2.3980,  -2.7514,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000, -10.1811,  -6.8273,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 19.6281,   9.8523,   8.1187,  ...,  19.1520,  19.6987,  19.3417],\n",
            "         [ 14.3481,   9.3717,   7.8065,  ...,  14.0064,  14.6321,  14.1535],\n",
            "         [ 20.0000,   9.7627,   8.2795,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -6.0218,   3.2660,  -1.0429,  ...,  -6.2602,  -5.8957,  -6.0846],\n",
            "         [-20.0000,  -4.6328,   0.1149,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -0.9851,  -1.5524,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  10.8338,   9.2768,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  12.6979,  11.8785,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  12.1502,  11.7029,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -4.1030,   4.1915,   0.7255,  ...,  -4.3832,  -4.0746,  -4.3033],\n",
            "         [-20.0000,  -7.5268, -11.4260,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -0.7715,  -7.8682,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  12.7363,  11.3528,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.0439,  13.3891,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  15.3731,  15.0844,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -5.1073,   4.7054,  -0.0630,  ...,  -5.3020,  -5.0578,  -5.2714],\n",
            "         [-20.0000,  -2.5490,  -7.4726,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -2.3647,  -7.1026,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  11.1836,   9.5823,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  17.1031,  14.8487,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  12.0118,  13.4160,  ...,  20.0000,  20.0000,  20.0000]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9819241166114807}, {'label': 'hate', 'score': 0.01807589828968048}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9819241166114807}, {'label': 'hate', 'score': 0.01807589828968048}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981643557548523}, {'label': 'hate', 'score': 0.001835636212490499}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981643557548523}, {'label': 'hate', 'score': 0.001835636212490499}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985822439193726}, {'label': 'hate', 'score': 0.0014177622506394982}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985822439193726}, {'label': 'hate', 'score': 0.0014177622506394982}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8282110691070557}, {'label': 'hate', 'score': 0.17178894579410553}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8282110691070557}, {'label': 'hate', 'score': 0.17178894579410553}]\n",
            "Epoch 1, Loss: 3.113135814666748\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989472031593323}, {'label': 'hate', 'score': 0.001052869949489832}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989472031593323}, {'label': 'hate', 'score': 0.001052869949489832}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983580708503723}, {'label': 'hate', 'score': 0.0016419574385508895}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983580708503723}, {'label': 'hate', 'score': 0.0016419574385508895}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9954440593719482}, {'label': 'hate', 'score': 0.004555955529212952}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9954440593719482}, {'label': 'hate', 'score': 0.004555955529212952}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998455047607422}, {'label': 'hate', 'score': 0.000154495908645913}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998455047607422}, {'label': 'hate', 'score': 0.000154495908645913}]\n",
            "Epoch 1, Loss: 3.4818179607391357\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991573095321655}, {'label': 'hate', 'score': 0.0008427193970419466}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991573095321655}, {'label': 'hate', 'score': 0.0008427193970419466}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998468816280365}, {'label': 'hate', 'score': 0.0015311137540265918}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998468816280365}, {'label': 'hate', 'score': 0.0015311137540265918}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9972125887870789}, {'label': 'hate', 'score': 0.0027874833904206753}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9972125887870789}, {'label': 'hate', 'score': 0.0027874833904206753}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958712458610535}, {'label': 'hate', 'score': 0.0041287969797849655}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958712458610535}, {'label': 'hate', 'score': 0.0041287969797849655}]\n",
            "Epoch 1, Loss: 3.9455108642578125\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[-7.2390e+00,  3.2723e+00,  3.8932e-01,  ..., -7.6754e+00,\n",
            "          -7.1513e+00, -7.4797e+00],\n",
            "         [-2.0000e+01, -3.0766e+00, -5.0685e-01,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         [-2.0000e+01, -5.0646e+00, -9.6342e+00,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         ...,\n",
            "         [ 2.0000e+01,  1.2278e+01,  1.4027e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  1.5541e+01,  1.5728e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  8.3963e+00,  1.2200e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01]],\n",
            "\n",
            "        [[-8.1871e+00,  3.9558e+00,  9.8967e-02,  ..., -8.5237e+00,\n",
            "          -8.0628e+00, -8.3547e+00],\n",
            "         [-2.0000e+01, -5.5724e+00, -1.2099e+01,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         [-2.0000e+01, -5.7323e+00, -8.6768e+00,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         ...,\n",
            "         [ 1.6209e+01,  6.9291e+00,  4.3517e+00,  ...,  1.5800e+01,\n",
            "           1.6209e+01,  1.5940e+01],\n",
            "         [ 2.0000e+01,  1.3179e+01,  1.0539e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  8.6430e+00,  6.6742e+00,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01]],\n",
            "\n",
            "        [[-4.5883e-01,  4.6215e+00,  1.6788e+00,  ..., -7.4593e-01,\n",
            "          -3.6786e-01, -5.9409e-01],\n",
            "         [-2.0000e+01, -2.4006e+00,  5.4717e-04,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         [-2.0000e+01, -3.5417e+00, -6.7930e+00,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         ...,\n",
            "         [ 2.0000e+01,  1.3972e+01,  1.3290e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  1.4755e+01,  1.3487e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 1.9074e+01,  9.9184e+00,  8.1642e+00,  ...,  1.8463e+01,\n",
            "           1.9221e+01,  1.8767e+01]],\n",
            "\n",
            "        [[-4.9380e+00,  4.0613e+00,  1.1375e-01,  ..., -5.2117e+00,\n",
            "          -4.7483e+00, -5.0699e+00],\n",
            "         [-2.0000e+01,  5.0653e-01, -6.1689e+00,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         [-2.0000e+01, -2.2641e+00, -6.8050e+00,  ..., -2.0000e+01,\n",
            "          -2.0000e+01, -2.0000e+01],\n",
            "         ...,\n",
            "         [ 2.0000e+01,  1.4179e+01,  1.0788e+01,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  1.0836e+01,  8.4922e+00,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01],\n",
            "         [ 2.0000e+01,  1.1984e+01,  9.8632e+00,  ...,  2.0000e+01,\n",
            "           2.0000e+01,  2.0000e+01]]], grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9494528770446777}, {'label': 'hate', 'score': 0.05054710432887077}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9494528770446777}, {'label': 'hate', 'score': 0.05054710432887077}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953712821006775}, {'label': 'hate', 'score': 0.004628696478903294}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953712821006775}, {'label': 'hate', 'score': 0.004628696478903294}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9679462909698486}, {'label': 'hate', 'score': 0.0320536307990551}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9679462909698486}, {'label': 'hate', 'score': 0.0320536307990551}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9902565479278564}, {'label': 'hate', 'score': 0.009743468835949898}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9902565479278564}, {'label': 'hate', 'score': 0.009743468835949898}]\n",
            "Epoch 1, Loss: 3.0547478199005127\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9847358465194702}, {'label': 'hate', 'score': 0.015264195390045643}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9847358465194702}, {'label': 'hate', 'score': 0.015264195390045643}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997010350227356}, {'label': 'hate', 'score': 0.0029896132182329893}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997010350227356}, {'label': 'hate', 'score': 0.0029896132182329893}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9967631101608276}, {'label': 'hate', 'score': 0.0032369138207286596}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9967631101608276}, {'label': 'hate', 'score': 0.0032369138207286596}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9924202561378479}, {'label': 'hate', 'score': 0.007579687517136335}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9924202561378479}, {'label': 'hate', 'score': 0.007579687517136335}]\n",
            "Epoch 1, Loss: 3.5896284580230713\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[ -5.8599,   3.0242,  -1.2953,  ...,  -6.0454,  -5.8418,  -6.0258],\n",
            "         [-20.0000,  -2.5846,  -9.5141,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -6.0890, -15.2681,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  12.0031,  11.6373,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.2217,  12.9389,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.5127,  14.6930,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[-10.2386,   1.7290,  -0.7443,  ..., -10.4739, -10.0691, -10.3341],\n",
            "         [-20.0000,  -3.7747,  -1.4338,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -5.3035,  -6.6232,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  15.7463,  17.8182,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.5015,  15.8582,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  11.6419,  11.7361,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -3.5706,   3.9140,   1.4184,  ...,  -3.8726,  -3.5170,  -3.7171],\n",
            "         [-20.0000,  -2.8077,  -1.1290,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -4.7103,  -7.6545,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  11.2614,   9.2792,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  13.5607,  12.8137,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.0880,  12.0640,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[-12.1452,   2.9040,  -3.1165,  ..., -12.3313, -12.0727, -12.2556],\n",
            "         [-20.0000,   0.1630,  -8.0434,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,   0.4011,  -8.2472,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 14.3459,   7.2881,   4.4767,  ...,  13.9521,  14.4168,  14.0964],\n",
            "         [ 12.0156,   5.8143,   2.7348,  ...,  11.6053,  12.0342,  11.7713],\n",
            "         [ 18.3897,   7.2061,   4.0208,  ...,  18.0921,  18.3102,  18.1938]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998915433883667}, {'label': 'hate', 'score': 0.0010845997603610158}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998915433883667}, {'label': 'hate', 'score': 0.0010845997603610158}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981689453125}, {'label': 'hate', 'score': 0.0018310027662664652}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981689453125}, {'label': 'hate', 'score': 0.0018310027662664652}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988046884536743}, {'label': 'hate', 'score': 0.0011952809290960431}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988046884536743}, {'label': 'hate', 'score': 0.0011952809290960431}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988321661949158}, {'label': 'hate', 'score': 0.0011678627924993634}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988321661949158}, {'label': 'hate', 'score': 0.0011678627924993634}]\n",
            "Epoch 1, Loss: 3.535703659057617\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9693753719329834}, {'label': 'hate', 'score': 0.030624637380242348}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9693753719329834}, {'label': 'hate', 'score': 0.030624637380242348}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9952514171600342}, {'label': 'hate', 'score': 0.0047486224211752415}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9952514171600342}, {'label': 'hate', 'score': 0.0047486224211752415}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7945821285247803}, {'label': 'hate', 'score': 0.20541782677173615}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7945821285247803}, {'label': 'hate', 'score': 0.20541782677173615}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993610978126526}, {'label': 'hate', 'score': 0.0006388935726135969}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993610978126526}, {'label': 'hate', 'score': 0.0006388935726135969}]\n",
            "Epoch 1, Loss: 3.334752082824707\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9555437564849854}, {'label': 'hate', 'score': 0.04445626959204674}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9555437564849854}, {'label': 'hate', 'score': 0.04445626959204674}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.949296772480011}, {'label': 'hate', 'score': 0.05070321261882782}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.949296772480011}, {'label': 'hate', 'score': 0.05070321261882782}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996204376220703}, {'label': 'hate', 'score': 0.000379590957891196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996204376220703}, {'label': 'hate', 'score': 0.000379590957891196}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99607914686203}, {'label': 'hate', 'score': 0.00392086012288928}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99607914686203}, {'label': 'hate', 'score': 0.00392086012288928}]\n",
            "Epoch 1, Loss: 3.47015643119812\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9390147924423218}, {'label': 'hate', 'score': 0.06098522990942001}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9390147924423218}, {'label': 'hate', 'score': 0.06098522990942001}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991329312324524}, {'label': 'hate', 'score': 0.0008670749957673252}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991329312324524}, {'label': 'hate', 'score': 0.0008670749957673252}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9976696372032166}, {'label': 'hate', 'score': 0.0023302871268242598}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9976696372032166}, {'label': 'hate', 'score': 0.0023302871268242598}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9964489936828613}, {'label': 'hate', 'score': 0.003550929017364979}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9964489936828613}, {'label': 'hate', 'score': 0.003550929017364979}]\n",
            "Epoch 1, Loss: 3.515573740005493\n",
            "API Response: [[{'label': 'nothate', 'score': 0.991957426071167}, {'label': 'hate', 'score': 0.008042555302381516}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.991957426071167}, {'label': 'hate', 'score': 0.008042555302381516}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9531574249267578}, {'label': 'hate', 'score': 0.04684252664446831}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9531574249267578}, {'label': 'hate', 'score': 0.04684252664446831}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.993187427520752}, {'label': 'hate', 'score': 0.006812594830989838}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.993187427520752}, {'label': 'hate', 'score': 0.006812594830989838}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999245285987854}, {'label': 'hate', 'score': 0.0007547090644948184}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999245285987854}, {'label': 'hate', 'score': 0.0007547090644948184}]\n",
            "Epoch 1, Loss: 3.323981523513794\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9915136694908142}, {'label': 'hate', 'score': 0.008486321195960045}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9915136694908142}, {'label': 'hate', 'score': 0.008486321195960045}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993259906768799}, {'label': 'hate', 'score': 0.0006740270764566958}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993259906768799}, {'label': 'hate', 'score': 0.0006740270764566958}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996342658996582}, {'label': 'hate', 'score': 0.0003656971384771168}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996342658996582}, {'label': 'hate', 'score': 0.0003656971384771168}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9581969380378723}, {'label': 'hate', 'score': 0.041803039610385895}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9581969380378723}, {'label': 'hate', 'score': 0.041803039610385895}]\n",
            "Epoch 1, Loss: 3.5313282012939453\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9897804260253906}, {'label': 'hate', 'score': 0.010219602845609188}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9897804260253906}, {'label': 'hate', 'score': 0.010219602845609188}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9926485419273376}, {'label': 'hate', 'score': 0.007351422682404518}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9926485419273376}, {'label': 'hate', 'score': 0.007351422682404518}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998571872711182}, {'label': 'hate', 'score': 0.00014275300782173872}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998571872711182}, {'label': 'hate', 'score': 0.00014275300782173872}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9842817187309265}, {'label': 'hate', 'score': 0.01571831665933132}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9842817187309265}, {'label': 'hate', 'score': 0.01571831665933132}]\n",
            "Epoch 1, Loss: 3.2713639736175537\n",
            "API Response: [[{'label': 'nothate', 'score': 0.877190887928009}, {'label': 'hate', 'score': 0.12280911952257156}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.877190887928009}, {'label': 'hate', 'score': 0.12280911952257156}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998650550842285}, {'label': 'hate', 'score': 0.00013498491898644716}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998650550842285}, {'label': 'hate', 'score': 0.00013498491898644716}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998511075973511}, {'label': 'hate', 'score': 0.00014885806012898684}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998511075973511}, {'label': 'hate', 'score': 0.00014885806012898684}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.0001467954571126029}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.0001467954571126029}]\n",
            "Epoch 1, Loss: 2.890443801879883\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[ -4.2218,   3.3716,   1.0475,  ...,  -4.4442,  -4.0056,  -4.3072],\n",
            "         [-20.0000,  -2.5237,  -0.3942,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -6.1948,  -6.1379,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  10.2216,   9.3487,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  20.0000,  20.0000,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  19.3885,  20.0000,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[-13.4402,   1.1655,  -1.8245,  ..., -13.6070, -13.4453, -13.6401],\n",
            "         [-20.0000,  -8.4960, -11.3218,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000, -12.4916, -11.6159,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  15.2296,  15.5715,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  14.2421,  14.7993,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  11.5936,  13.6121,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -6.4404,   3.6087,  -0.6815,  ...,  -6.6776,  -6.2571,  -6.4680],\n",
            "         [-20.0000,  -4.7853,  -9.0171,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000, -11.1578, -14.4053,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  18.7126,  14.6518,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  16.2970,  15.1691,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  17.1550,  15.6760,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[-10.6561,   0.7811,  -2.3758,  ..., -10.9414, -10.5387, -10.8137],\n",
            "         [-20.0000,  -5.5147, -11.5102,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000, -10.5793, -14.0855,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  11.7635,   8.3516,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 15.8021,   7.0356,   4.1028,  ...,  15.2076,  15.7693,  15.4973],\n",
            "         [ 20.0000,  11.6600,  10.0561,  ...,  20.0000,  20.0000,  20.0000]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999509334564209}, {'label': 'hate', 'score': 0.0004906646790914237}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999509334564209}, {'label': 'hate', 'score': 0.0004906646790914237}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9938401579856873}, {'label': 'hate', 'score': 0.006159886252135038}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9938401579856873}, {'label': 'hate', 'score': 0.006159886252135038}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994778037071228}, {'label': 'hate', 'score': 0.0005221737665124238}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994778037071228}, {'label': 'hate', 'score': 0.0005221737665124238}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969760179519653}, {'label': 'hate', 'score': 0.003024041885510087}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969760179519653}, {'label': 'hate', 'score': 0.003024041885510087}]\n",
            "Epoch 1, Loss: 3.082080602645874\n",
            "Rate limit reached with current token, switching to next token.\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9947742819786072}, {'label': 'hate', 'score': 0.005225758999586105}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9947742819786072}, {'label': 'hate', 'score': 0.005225758999586105}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9905331134796143}, {'label': 'hate', 'score': 0.009466842748224735}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9905331134796143}, {'label': 'hate', 'score': 0.009466842748224735}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.992644190788269}, {'label': 'hate', 'score': 0.007355812471359968}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.992644190788269}, {'label': 'hate', 'score': 0.007355812471359968}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9915953278541565}, {'label': 'hate', 'score': 0.008404664695262909}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9915953278541565}, {'label': 'hate', 'score': 0.008404664695262909}]\n",
            "Epoch 1, Loss: 2.9049134254455566\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9964119791984558}, {'label': 'hate', 'score': 0.0035880492068827152}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9964119791984558}, {'label': 'hate', 'score': 0.0035880492068827152}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983990788459778}, {'label': 'hate', 'score': 0.0016008819220587611}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983990788459778}, {'label': 'hate', 'score': 0.0016008819220587611}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9899077415466309}, {'label': 'hate', 'score': 0.010092190466821194}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9899077415466309}, {'label': 'hate', 'score': 0.010092190466821194}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987867474555969}, {'label': 'hate', 'score': 0.001213319250382483}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987867474555969}, {'label': 'hate', 'score': 0.001213319250382483}]\n",
            "Epoch 1, Loss: 3.054237127304077\n",
            "API Response: [[{'label': 'hate', 'score': 0.9989425539970398}, {'label': 'nothate', 'score': 0.0010574491461738944}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.9989425539970398}, {'label': 'nothate', 'score': 0.0010574491461738944}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999729573726654}, {'label': 'hate', 'score': 0.0002704023208934814}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999729573726654}, {'label': 'hate', 'score': 0.0002704023208934814}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984760880470276}, {'label': 'hate', 'score': 0.0015238993801176548}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984760880470276}, {'label': 'hate', 'score': 0.0015238993801176548}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.98993319272995}, {'label': 'hate', 'score': 0.010066785849630833}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.98993319272995}, {'label': 'hate', 'score': 0.010066785849630833}]\n",
            "Epoch 1, Loss: 3.12776780128479\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9928830862045288}, {'label': 'hate', 'score': 0.0071168988943099976}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9928830862045288}, {'label': 'hate', 'score': 0.0071168988943099976}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9514135122299194}, {'label': 'hate', 'score': 0.04858652502298355}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9514135122299194}, {'label': 'hate', 'score': 0.04858652502298355}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991381168365479}, {'label': 'hate', 'score': 0.0008617967832833529}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991381168365479}, {'label': 'hate', 'score': 0.0008617967832833529}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998641014099121}, {'label': 'hate', 'score': 0.000135914990096353}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998641014099121}, {'label': 'hate', 'score': 0.000135914990096353}]\n",
            "Epoch 1, Loss: 3.494800329208374\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995243549346924}, {'label': 'hate', 'score': 0.00047568263835273683}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995243549346924}, {'label': 'hate', 'score': 0.00047568263835273683}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9947056174278259}, {'label': 'hate', 'score': 0.005294425878673792}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9947056174278259}, {'label': 'hate', 'score': 0.005294425878673792}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9570730924606323}, {'label': 'hate', 'score': 0.04292690008878708}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9570730924606323}, {'label': 'hate', 'score': 0.04292690008878708}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9970851540565491}, {'label': 'hate', 'score': 0.0029148124158382416}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9970851540565491}, {'label': 'hate', 'score': 0.0029148124158382416}]\n",
            "Epoch 1, Loss: 3.047435760498047\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9919711351394653}, {'label': 'hate', 'score': 0.008028899319469929}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9919711351394653}, {'label': 'hate', 'score': 0.008028899319469929}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9563793540000916}, {'label': 'hate', 'score': 0.04362064599990845}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9563793540000916}, {'label': 'hate', 'score': 0.04362064599990845}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9978172779083252}, {'label': 'hate', 'score': 0.0021826832089573145}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9978172779083252}, {'label': 'hate', 'score': 0.0021826832089573145}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7704370617866516}, {'label': 'hate', 'score': 0.22956296801567078}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7704370617866516}, {'label': 'hate', 'score': 0.22956296801567078}]\n",
            "Epoch 1, Loss: 2.9965386390686035\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987012147903442}, {'label': 'hate', 'score': 0.0012987754307687283}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987012147903442}, {'label': 'hate', 'score': 0.0012987754307687283}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998130202293396}, {'label': 'hate', 'score': 0.000186951452633366}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998130202293396}, {'label': 'hate', 'score': 0.000186951452633366}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9523751735687256}, {'label': 'hate', 'score': 0.04762479290366173}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9523751735687256}, {'label': 'hate', 'score': 0.04762479290366173}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997366070747375}, {'label': 'hate', 'score': 0.00026334624271839857}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997366070747375}, {'label': 'hate', 'score': 0.00026334624271839857}]\n",
            "Epoch 1, Loss: 3.109255790710449\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9926626682281494}, {'label': 'hate', 'score': 0.00733729125931859}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9926626682281494}, {'label': 'hate', 'score': 0.00733729125931859}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992930889129639}, {'label': 'hate', 'score': 0.0007069113780744374}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992930889129639}, {'label': 'hate', 'score': 0.0007069113780744374}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8579115867614746}, {'label': 'hate', 'score': 0.142088383436203}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8579115867614746}, {'label': 'hate', 'score': 0.142088383436203}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981175661087036}, {'label': 'hate', 'score': 0.0018825047882273793}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981175661087036}, {'label': 'hate', 'score': 0.0018825047882273793}]\n",
            "Epoch 1, Loss: 2.8757312297821045\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[ -5.4867,   2.6267,  -0.3520,  ...,  -5.5958,  -5.4418,  -5.6067],\n",
            "         [-20.0000,  -4.1312,  -7.4699,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -6.9542, -11.5535,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  18.3433,  18.5795,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  19.7763,  18.7109,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  20.0000,  20.0000,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -5.2526,   2.7174,  -0.6329,  ...,  -5.4592,  -5.2701,  -5.4128],\n",
            "         [-20.0000,  -2.7114,  -0.1100,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -5.0635,  -8.3825,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 17.3240,   6.1666,   4.7026,  ...,  16.8316,  16.8724,  16.8047],\n",
            "         [ 20.0000,   8.6247,   7.9535,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  10.0157,   9.3528,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -6.8441,   2.6611,  -0.8956,  ...,  -7.1540,  -6.8243,  -7.0027],\n",
            "         [-20.0000,  -4.2727,  -8.8016,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -7.2882, -11.0892,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  12.2664,  12.7684,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  11.4133,   8.6502,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  16.8854,  15.2514,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[-10.2000,   2.0200,  -2.3792,  ..., -10.4355, -10.1301, -10.3610],\n",
            "         [-20.0000,  -4.5156, -10.3881,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -2.6906, -10.2350,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 16.1127,   7.6771,   6.2126,  ...,  15.5607,  16.1458,  15.7826],\n",
            "         [ 18.1087,   7.4798,   5.0080,  ...,  17.6314,  18.0426,  17.7940],\n",
            "         [ 13.8452,   7.2127,   4.7751,  ...,  13.3692,  13.8427,  13.5967]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985013008117676}, {'label': 'hate', 'score': 0.0014986754395067692}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985013008117676}, {'label': 'hate', 'score': 0.0014986754395067692}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983198046684265}, {'label': 'hate', 'score': 0.0016801569145172834}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983198046684265}, {'label': 'hate', 'score': 0.0016801569145172834}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988858103752136}, {'label': 'hate', 'score': 0.0011142228031530976}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988858103752136}, {'label': 'hate', 'score': 0.0011142228031530976}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989519119262695}, {'label': 'hate', 'score': 0.0010480459313839674}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989519119262695}, {'label': 'hate', 'score': 0.0010480459313839674}]\n",
            "Epoch 1, Loss: 3.3009324073791504\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995054006576538}, {'label': 'hate', 'score': 0.0004946020781062543}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995054006576538}, {'label': 'hate', 'score': 0.0004946020781062543}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983617663383484}, {'label': 'hate', 'score': 0.0016382047906517982}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983617663383484}, {'label': 'hate', 'score': 0.0016382047906517982}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969562292098999}, {'label': 'hate', 'score': 0.0030437863897532225}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969562292098999}, {'label': 'hate', 'score': 0.0030437863897532225}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995836615562439}, {'label': 'hate', 'score': 0.0004163509584031999}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995836615562439}, {'label': 'hate', 'score': 0.0004163509584031999}]\n",
            "Epoch 1, Loss: 2.7596144676208496\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985450506210327}, {'label': 'hate', 'score': 0.0014549768529832363}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985450506210327}, {'label': 'hate', 'score': 0.0014549768529832363}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999861478805542}, {'label': 'hate', 'score': 0.00013844417117070407}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999861478805542}, {'label': 'hate', 'score': 0.00013844417117070407}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8169154524803162}, {'label': 'hate', 'score': 0.1830846071243286}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8169154524803162}, {'label': 'hate', 'score': 0.1830846071243286}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9960849285125732}, {'label': 'hate', 'score': 0.0039151133969426155}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9960849285125732}, {'label': 'hate', 'score': 0.0039151133969426155}]\n",
            "Epoch 1, Loss: 3.155877113342285\n",
            "API Response: [[{'label': 'nothate', 'score': 0.6913411617279053}, {'label': 'hate', 'score': 0.3086588382720947}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.6913411617279053}, {'label': 'hate', 'score': 0.3086588382720947}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9710323810577393}, {'label': 'hate', 'score': 0.02896764501929283}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9710323810577393}, {'label': 'hate', 'score': 0.02896764501929283}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9939278364181519}, {'label': 'hate', 'score': 0.006072193384170532}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9939278364181519}, {'label': 'hate', 'score': 0.006072193384170532}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997245669364929}, {'label': 'hate', 'score': 0.0002753685985226184}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997245669364929}, {'label': 'hate', 'score': 0.0002753685985226184}]\n",
            "Epoch 1, Loss: 2.6708667278289795\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997249245643616}, {'label': 'hate', 'score': 0.00027501676231622696}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997249245643616}, {'label': 'hate', 'score': 0.00027501676231622696}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9982193112373352}, {'label': 'hate', 'score': 0.0017806428950279951}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9982193112373352}, {'label': 'hate', 'score': 0.0017806428950279951}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988141059875488}, {'label': 'hate', 'score': 0.0011858658399432898}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988141059875488}, {'label': 'hate', 'score': 0.0011858658399432898}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995405673980713}, {'label': 'hate', 'score': 0.00045951304491609335}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995405673980713}, {'label': 'hate', 'score': 0.00045951304491609335}]\n",
            "Epoch 1, Loss: 2.7089614868164062\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9408823847770691}, {'label': 'hate', 'score': 0.05911768600344658}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9408823847770691}, {'label': 'hate', 'score': 0.05911768600344658}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986479878425598}, {'label': 'hate', 'score': 0.0013520760694518685}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986479878425598}, {'label': 'hate', 'score': 0.0013520760694518685}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993690848350525}, {'label': 'hate', 'score': 0.000630898168310523}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993690848350525}, {'label': 'hate', 'score': 0.000630898168310523}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987591505050659}, {'label': 'hate', 'score': 0.001240891171619296}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987591505050659}, {'label': 'hate', 'score': 0.001240891171619296}]\n",
            "Epoch 1, Loss: 2.8294949531555176\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989650249481201}, {'label': 'hate', 'score': 0.0010349478106945753}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989650249481201}, {'label': 'hate', 'score': 0.0010349478106945753}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994238615036011}, {'label': 'hate', 'score': 0.0005761461798101664}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994238615036011}, {'label': 'hate', 'score': 0.0005761461798101664}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988756775856018}, {'label': 'hate', 'score': 0.0011243503540754318}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988756775856018}, {'label': 'hate', 'score': 0.0011243503540754318}]\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Epoch 1, Loss: 3.2984349727630615\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Epoch 1, Loss: 2.307117462158203\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997701048851013}, {'label': 'hate', 'score': 0.00022991628793533891}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997701048851013}, {'label': 'hate', 'score': 0.00022991628793533891}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994567036628723}, {'label': 'hate', 'score': 0.0005433015758171678}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994567036628723}, {'label': 'hate', 'score': 0.0005433015758171678}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985760450363159}, {'label': 'hate', 'score': 0.0014239174779504538}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985760450363159}, {'label': 'hate', 'score': 0.0014239174779504538}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9957363605499268}, {'label': 'hate', 'score': 0.004263608250766993}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9957363605499268}, {'label': 'hate', 'score': 0.004263608250766993}]\n",
            "Epoch 1, Loss: 3.032496452331543\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969377517700195}, {'label': 'hate', 'score': 0.003062234725803137}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969377517700195}, {'label': 'hate', 'score': 0.003062234725803137}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9720842838287354}, {'label': 'hate', 'score': 0.02791568450629711}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9720842838287354}, {'label': 'hate', 'score': 0.02791568450629711}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958897233009338}, {'label': 'hate', 'score': 0.004110274836421013}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958897233009338}, {'label': 'hate', 'score': 0.004110274836421013}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999685525894165}, {'label': 'hate', 'score': 0.00031454474083147943}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999685525894165}, {'label': 'hate', 'score': 0.00031454474083147943}]\n",
            "Epoch 1, Loss: 2.812023639678955\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998518228530884}, {'label': 'hate', 'score': 0.00014810965512879193}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998518228530884}, {'label': 'hate', 'score': 0.00014810965512879193}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.988355278968811}, {'label': 'hate', 'score': 0.011644775979220867}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.988355278968811}, {'label': 'hate', 'score': 0.011644775979220867}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.970526933670044}, {'label': 'hate', 'score': 0.029473016038537025}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.970526933670044}, {'label': 'hate', 'score': 0.029473016038537025}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986593723297119}, {'label': 'hate', 'score': 0.0013406409416347742}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986593723297119}, {'label': 'hate', 'score': 0.0013406409416347742}]\n",
            "Epoch 1, Loss: 2.863236904144287\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9978634715080261}, {'label': 'hate', 'score': 0.002136572962626815}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9978634715080261}, {'label': 'hate', 'score': 0.002136572962626815}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992799162864685}, {'label': 'hate', 'score': 0.0007201222470030189}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992799162864685}, {'label': 'hate', 'score': 0.0007201222470030189}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968104958534241}, {'label': 'hate', 'score': 0.0031895150896161795}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968104958534241}, {'label': 'hate', 'score': 0.0031895150896161795}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998629093170166}, {'label': 'hate', 'score': 0.0001370861427858472}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998629093170166}, {'label': 'hate', 'score': 0.0001370861427858472}]\n",
            "Epoch 1, Loss: 2.9443206787109375\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9659401774406433}, {'label': 'hate', 'score': 0.03405981510877609}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9659401774406433}, {'label': 'hate', 'score': 0.03405981510877609}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9856805801391602}, {'label': 'hate', 'score': 0.01431939285248518}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9856805801391602}, {'label': 'hate', 'score': 0.01431939285248518}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993932247161865}, {'label': 'hate', 'score': 0.0006068023503758013}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993932247161865}, {'label': 'hate', 'score': 0.0006068023503758013}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998292922973633}, {'label': 'hate', 'score': 0.00017073126218747348}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998292922973633}, {'label': 'hate', 'score': 0.00017073126218747348}]\n",
            "Epoch 1, Loss: 3.0121350288391113\n",
            "Decoding failed with error: piece id is out of range.\n",
            "Faulty Logits: tensor([[[ -7.4890,   2.8525,  -0.8054,  ...,  -7.8023,  -7.4358,  -7.5935],\n",
            "         [-20.0000,  -6.2270,  -9.4968,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -8.9616, -13.8660,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  14.3125,  12.6132,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  13.7803,  13.1054,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,   8.9209,   7.9381,  ...,  19.5885,  20.0000,  19.8294]],\n",
            "\n",
            "        [[ -4.9686,   3.1877,  -1.0689,  ...,  -5.4147,  -4.9623,  -5.2381],\n",
            "         [-20.0000,  -7.6351,  -9.1872,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -5.1120, -12.7967,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  10.4510,  10.9163,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  13.1851,  13.3031,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 16.7372,   8.0154,   6.0621,  ...,  15.8676,  16.5652,  16.1746]],\n",
            "\n",
            "        [[ -7.4522,   2.1217,  -1.3581,  ...,  -7.6139,  -7.4623,  -7.5865],\n",
            "         [-20.0000,  -3.1291,  -8.7637,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -3.9150,  -9.7624,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  16.0132,  16.1568,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  11.5999,  10.5140,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  10.1419,   9.0994,  ...,  20.0000,  20.0000,  20.0000]],\n",
            "\n",
            "        [[ -7.9381,   3.1371,  -0.8083,  ...,  -8.3766,  -7.8300,  -8.1313],\n",
            "         [-20.0000,  -7.9271, -12.3626,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         [-20.0000,  -6.6115, -12.7356,  ..., -20.0000, -20.0000, -20.0000],\n",
            "         ...,\n",
            "         [ 20.0000,  13.0687,  17.3850,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  20.0000,  20.0000,  ...,  20.0000,  20.0000,  20.0000],\n",
            "         [ 20.0000,  18.8961,  20.0000,  ...,  20.0000,  20.0000,  20.0000]]],\n",
            "       grad_fn=<ClampBackward1>)\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994809031486511}, {'label': 'hate', 'score': 0.0005191796226426959}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994809031486511}, {'label': 'hate', 'score': 0.0005191796226426959}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9967398047447205}, {'label': 'hate', 'score': 0.003260219469666481}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9967398047447205}, {'label': 'hate', 'score': 0.003260219469666481}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9954324960708618}, {'label': 'hate', 'score': 0.004567531403154135}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9954324960708618}, {'label': 'hate', 'score': 0.004567531403154135}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998432397842407}, {'label': 'hate', 'score': 0.00015674692986067384}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998432397842407}, {'label': 'hate', 'score': 0.00015674692986067384}]\n",
            "Epoch 1, Loss: 2.2852697372436523\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997467398643494}, {'label': 'hate', 'score': 0.0002532331563998014}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997467398643494}, {'label': 'hate', 'score': 0.0002532331563998014}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998459815979004}, {'label': 'hate', 'score': 0.00015404638543259352}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998459815979004}, {'label': 'hate', 'score': 0.00015404638543259352}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991204142570496}, {'label': 'hate', 'score': 0.0008795911562629044}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991204142570496}, {'label': 'hate', 'score': 0.0008795911562629044}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8287286162376404}, {'label': 'hate', 'score': 0.17127135396003723}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8287286162376404}, {'label': 'hate', 'score': 0.17127135396003723}]\n",
            "Epoch 1, Loss: 2.9572958946228027\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998432397842407}, {'label': 'hate', 'score': 0.0001567203289596364}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998432397842407}, {'label': 'hate', 'score': 0.0001567203289596364}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.5795142650604248}, {'label': 'hate', 'score': 0.4204857349395752}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.5795142650604248}, {'label': 'hate', 'score': 0.4204857349395752}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8624914884567261}, {'label': 'hate', 'score': 0.1375085413455963}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8624914884567261}, {'label': 'hate', 'score': 0.1375085413455963}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989857077598572}, {'label': 'hate', 'score': 0.001014301786199212}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989857077598572}, {'label': 'hate', 'score': 0.001014301786199212}]\n",
            "Epoch 1, Loss: 2.590618133544922\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9675546884536743}, {'label': 'hate', 'score': 0.032445356249809265}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9675546884536743}, {'label': 'hate', 'score': 0.032445356249809265}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.987987220287323}, {'label': 'hate', 'score': 0.01201283372938633}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.987987220287323}, {'label': 'hate', 'score': 0.01201283372938633}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999226450920105}, {'label': 'hate', 'score': 0.0007735901745036244}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999226450920105}, {'label': 'hate', 'score': 0.0007735901745036244}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9778509736061096}, {'label': 'hate', 'score': 0.02214907668530941}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9778509736061096}, {'label': 'hate', 'score': 0.02214907668530941}]\n",
            "Epoch 1, Loss: 2.197373151779175\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9199668169021606}, {'label': 'hate', 'score': 0.08003319054841995}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9199668169021606}, {'label': 'hate', 'score': 0.08003319054841995}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997812032699585}, {'label': 'hate', 'score': 0.0021879321429878473}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997812032699585}, {'label': 'hate', 'score': 0.0021879321429878473}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9961851239204407}, {'label': 'hate', 'score': 0.0038149291649460793}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9961851239204407}, {'label': 'hate', 'score': 0.0038149291649460793}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9938395619392395}, {'label': 'hate', 'score': 0.006160464603453875}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9938395619392395}, {'label': 'hate', 'score': 0.006160464603453875}]\n",
            "Epoch 1, Loss: 2.5624020099639893\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994196891784668}, {'label': 'hate', 'score': 0.0005803842796012759}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994196891784668}, {'label': 'hate', 'score': 0.0005803842796012759}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993384480476379}, {'label': 'hate', 'score': 0.0006615218590013683}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993384480476379}, {'label': 'hate', 'score': 0.0006615218590013683}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997864365577698}, {'label': 'hate', 'score': 0.00021362768893595785}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997864365577698}, {'label': 'hate', 'score': 0.00021362768893595785}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986133575439453}, {'label': 'hate', 'score': 0.0013866494409739971}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986133575439453}, {'label': 'hate', 'score': 0.0013866494409739971}]\n",
            "Epoch 1, Loss: 3.146453857421875\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996064305305481}, {'label': 'hate', 'score': 0.0003936300054192543}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996064305305481}, {'label': 'hate', 'score': 0.0003936300054192543}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998548030853271}, {'label': 'hate', 'score': 0.0001451548159820959}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998548030853271}, {'label': 'hate', 'score': 0.0001451548159820959}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991957545280457}, {'label': 'hate', 'score': 0.0008042115368880332}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991957545280457}, {'label': 'hate', 'score': 0.0008042115368880332}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983129501342773}, {'label': 'hate', 'score': 0.0016870660474523902}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983129501342773}, {'label': 'hate', 'score': 0.0016870660474523902}]\n",
            "Epoch 1, Loss: 3.2526822090148926\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993242025375366}, {'label': 'hate', 'score': 0.0006758042145520449}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993242025375366}, {'label': 'hate', 'score': 0.0006758042145520449}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9582836627960205}, {'label': 'hate', 'score': 0.041716329753398895}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9582836627960205}, {'label': 'hate', 'score': 0.041716329753398895}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9739470481872559}, {'label': 'hate', 'score': 0.026052962988615036}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9739470481872559}, {'label': 'hate', 'score': 0.026052962988615036}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966272115707397}, {'label': 'hate', 'score': 0.00337278563529253}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966272115707397}, {'label': 'hate', 'score': 0.00337278563529253}]\n",
            "Epoch 1, Loss: 2.588500738143921\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9584193825721741}, {'label': 'hate', 'score': 0.041580572724342346}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9584193825721741}, {'label': 'hate', 'score': 0.041580572724342346}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9388996958732605}, {'label': 'hate', 'score': 0.06110023707151413}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9388996958732605}, {'label': 'hate', 'score': 0.06110023707151413}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992419481277466}, {'label': 'hate', 'score': 0.0007580818491987884}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992419481277466}, {'label': 'hate', 'score': 0.0007580818491987884}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9973143935203552}, {'label': 'hate', 'score': 0.002685584593564272}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9973143935203552}, {'label': 'hate', 'score': 0.002685584593564272}]\n",
            "Epoch 1, Loss: 2.3701775074005127\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997101426124573}, {'label': 'hate', 'score': 0.00028979755006730556}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997101426124573}, {'label': 'hate', 'score': 0.00028979755006730556}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979206919670105}, {'label': 'hate', 'score': 0.0020793641451746225}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979206919670105}, {'label': 'hate', 'score': 0.0020793641451746225}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966127276420593}, {'label': 'hate', 'score': 0.0033872940111905336}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966127276420593}, {'label': 'hate', 'score': 0.0033872940111905336}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9980019927024841}, {'label': 'hate', 'score': 0.0019979632925242186}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9980019927024841}, {'label': 'hate', 'score': 0.0019979632925242186}]\n",
            "Epoch 1, Loss: 2.3517000675201416\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998205304145813}, {'label': 'hate', 'score': 0.00017948723689187318}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998205304145813}, {'label': 'hate', 'score': 0.00017948723689187318}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995720982551575}, {'label': 'hate', 'score': 0.0004279375134501606}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995720982551575}, {'label': 'hate', 'score': 0.0004279375134501606}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990707635879517}, {'label': 'hate', 'score': 0.0009292016620747745}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990707635879517}, {'label': 'hate', 'score': 0.0009292016620747745}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981561303138733}, {'label': 'hate', 'score': 0.0018438955303281546}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981561303138733}, {'label': 'hate', 'score': 0.0018438955303281546}]\n",
            "Epoch 1, Loss: 2.358157157897949\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997397780418396}, {'label': 'hate', 'score': 0.002602239605039358}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997397780418396}, {'label': 'hate', 'score': 0.002602239605039358}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9957393407821655}, {'label': 'hate', 'score': 0.0042607043869793415}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9957393407821655}, {'label': 'hate', 'score': 0.0042607043869793415}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998177886009216}, {'label': 'hate', 'score': 0.00018221503705717623}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998177886009216}, {'label': 'hate', 'score': 0.00018221503705717623}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99983811378479}, {'label': 'hate', 'score': 0.00016187145956791937}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99983811378479}, {'label': 'hate', 'score': 0.00016187145956791937}]\n",
            "Epoch 1, Loss: 2.7827234268188477\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985735416412354}, {'label': 'hate', 'score': 0.001426388742402196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985735416412354}, {'label': 'hate', 'score': 0.001426388742402196}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.9677877426147461}, {'label': 'nothate', 'score': 0.032212305814027786}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.9677877426147461}, {'label': 'nothate', 'score': 0.032212305814027786}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9865292310714722}, {'label': 'hate', 'score': 0.013470733538269997}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9865292310714722}, {'label': 'hate', 'score': 0.013470733538269997}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998244643211365}, {'label': 'hate', 'score': 0.00017554106307215989}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998244643211365}, {'label': 'hate', 'score': 0.00017554106307215989}]\n",
            "Epoch 1, Loss: 2.26350736618042\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998644590377808}, {'label': 'hate', 'score': 0.00013546858099289238}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998644590377808}, {'label': 'hate', 'score': 0.00013546858099289238}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9957374334335327}, {'label': 'hate', 'score': 0.004262527450919151}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9957374334335327}, {'label': 'hate', 'score': 0.004262527450919151}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9978898167610168}, {'label': 'hate', 'score': 0.0021102491300553083}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9978898167610168}, {'label': 'hate', 'score': 0.0021102491300553083}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987555742263794}, {'label': 'hate', 'score': 0.001244435436092317}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987555742263794}, {'label': 'hate', 'score': 0.001244435436092317}]\n",
            "Epoch 1, Loss: 2.390763282775879\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993076324462891}, {'label': 'hate', 'score': 0.0006923747714608908}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993076324462891}, {'label': 'hate', 'score': 0.0006923747714608908}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9977051615715027}, {'label': 'hate', 'score': 0.002294852863997221}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9977051615715027}, {'label': 'hate', 'score': 0.002294852863997221}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9936590790748596}, {'label': 'hate', 'score': 0.006340910214930773}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9936590790748596}, {'label': 'hate', 'score': 0.006340910214930773}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997109591960907}, {'label': 'hate', 'score': 0.0028904438950121403}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997109591960907}, {'label': 'hate', 'score': 0.0028904438950121403}]\n",
            "Epoch 1, Loss: 2.037501811981201\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990444779396057}, {'label': 'hate', 'score': 0.0009555374854244292}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990444779396057}, {'label': 'hate', 'score': 0.0009555374854244292}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996521472930908}, {'label': 'hate', 'score': 0.0003478967410046607}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996521472930908}, {'label': 'hate', 'score': 0.0003478967410046607}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9654648900032043}, {'label': 'hate', 'score': 0.034535132348537445}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9654648900032043}, {'label': 'hate', 'score': 0.034535132348537445}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998235106468201}, {'label': 'hate', 'score': 0.00017649958317633718}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998235106468201}, {'label': 'hate', 'score': 0.00017649958317633718}]\n",
            "Epoch 1, Loss: 1.551770567893982\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9952143430709839}, {'label': 'hate', 'score': 0.004785653203725815}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9952143430709839}, {'label': 'hate', 'score': 0.004785653203725815}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997957348823547}, {'label': 'hate', 'score': 0.00020424500689841807}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997957348823547}, {'label': 'hate', 'score': 0.00020424500689841807}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999683141708374}, {'label': 'hate', 'score': 0.0003168238908983767}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999683141708374}, {'label': 'hate', 'score': 0.0003168238908983767}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9928869605064392}, {'label': 'hate', 'score': 0.0071130855940282345}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9928869605064392}, {'label': 'hate', 'score': 0.0071130855940282345}]\n",
            "Epoch 1, Loss: 1.7064576148986816\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995941519737244}, {'label': 'hate', 'score': 0.00040580698987469077}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995941519737244}, {'label': 'hate', 'score': 0.00040580698987469077}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9967625141143799}, {'label': 'hate', 'score': 0.0032374674919992685}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9967625141143799}, {'label': 'hate', 'score': 0.0032374674919992685}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9956274032592773}, {'label': 'hate', 'score': 0.004372602794319391}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9956274032592773}, {'label': 'hate', 'score': 0.004372602794319391}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993649125099182}, {'label': 'hate', 'score': 0.0006350697949528694}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993649125099182}, {'label': 'hate', 'score': 0.0006350697949528694}]\n",
            "Epoch 1, Loss: 1.8509453535079956\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997400641441345}, {'label': 'hate', 'score': 0.0002598792198114097}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997400641441345}, {'label': 'hate', 'score': 0.0002598792198114097}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993995428085327}, {'label': 'hate', 'score': 0.000600455969106406}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993995428085327}, {'label': 'hate', 'score': 0.000600455969106406}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998315572738647}, {'label': 'hate', 'score': 0.00016845283971633762}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998315572738647}, {'label': 'hate', 'score': 0.00016845283971633762}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9232726693153381}, {'label': 'hate', 'score': 0.07672733813524246}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9232726693153381}, {'label': 'hate', 'score': 0.07672733813524246}]\n",
            "Epoch 1, Loss: 1.928780436515808\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9949451088905334}, {'label': 'hate', 'score': 0.005054855719208717}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9949451088905334}, {'label': 'hate', 'score': 0.005054855719208717}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9820021390914917}, {'label': 'hate', 'score': 0.017997827380895615}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9820021390914917}, {'label': 'hate', 'score': 0.017997827380895615}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9291039109230042}, {'label': 'hate', 'score': 0.07089612632989883}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9291039109230042}, {'label': 'hate', 'score': 0.07089612632989883}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9975002408027649}, {'label': 'hate', 'score': 0.002499769674614072}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9975002408027649}, {'label': 'hate', 'score': 0.002499769674614072}]\n",
            "Epoch 1, Loss: 1.6154428720474243\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9913655519485474}, {'label': 'hate', 'score': 0.0086344750598073}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9913655519485474}, {'label': 'hate', 'score': 0.0086344750598073}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9805611968040466}, {'label': 'hate', 'score': 0.01943878084421158}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9805611968040466}, {'label': 'hate', 'score': 0.01943878084421158}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9819101691246033}, {'label': 'hate', 'score': 0.01808982715010643}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9819101691246033}, {'label': 'hate', 'score': 0.01808982715010643}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996886253356934}, {'label': 'hate', 'score': 0.0003113386337645352}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996886253356934}, {'label': 'hate', 'score': 0.0003113386337645352}]\n",
            "Epoch 1, Loss: 1.5481963157653809\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9962544441223145}, {'label': 'hate', 'score': 0.003745530964806676}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9962544441223145}, {'label': 'hate', 'score': 0.003745530964806676}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9880025386810303}, {'label': 'hate', 'score': 0.011997438035905361}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9880025386810303}, {'label': 'hate', 'score': 0.011997438035905361}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997256398200989}, {'label': 'hate', 'score': 0.0002743021468631923}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997256398200989}, {'label': 'hate', 'score': 0.0002743021468631923}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7862263917922974}, {'label': 'hate', 'score': 0.21377362310886383}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7862263917922974}, {'label': 'hate', 'score': 0.21377362310886383}]\n",
            "Epoch 1, Loss: 1.852176547050476\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986491799354553}, {'label': 'hate', 'score': 0.001350893173366785}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986491799354553}, {'label': 'hate', 'score': 0.001350893173366785}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989257454872131}, {'label': 'hate', 'score': 0.0010742413578554988}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989257454872131}, {'label': 'hate', 'score': 0.0010742413578554988}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9965522289276123}, {'label': 'hate', 'score': 0.0034477252047508955}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9965522289276123}, {'label': 'hate', 'score': 0.0034477252047508955}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9378520250320435}, {'label': 'hate', 'score': 0.06214803829789162}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9378520250320435}, {'label': 'hate', 'score': 0.06214803829789162}]\n",
            "Epoch 1, Loss: 1.5032291412353516\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984433054924011}, {'label': 'hate', 'score': 0.0015566806541755795}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984433054924011}, {'label': 'hate', 'score': 0.0015566806541755795}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9960073828697205}, {'label': 'hate', 'score': 0.00399269163608551}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9960073828697205}, {'label': 'hate', 'score': 0.00399269163608551}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994914531707764}, {'label': 'hate', 'score': 0.0005085488082841039}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994914531707764}, {'label': 'hate', 'score': 0.0005085488082841039}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7488675713539124}, {'label': 'hate', 'score': 0.25113239884376526}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7488675713539124}, {'label': 'hate', 'score': 0.25113239884376526}]\n",
            "Epoch 1, Loss: 1.609614372253418\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9805241823196411}, {'label': 'hate', 'score': 0.01947585493326187}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9805241823196411}, {'label': 'hate', 'score': 0.01947585493326187}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995220899581909}, {'label': 'hate', 'score': 0.00047787409857846797}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995220899581909}, {'label': 'hate', 'score': 0.00047787409857846797}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998576641082764}, {'label': 'hate', 'score': 0.00014235908747650683}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998576641082764}, {'label': 'hate', 'score': 0.00014235908747650683}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995380640029907}, {'label': 'hate', 'score': 0.0004620161489583552}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995380640029907}, {'label': 'hate', 'score': 0.0004620161489583552}]\n",
            "Epoch 1, Loss: 1.64290189743042\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9853193759918213}, {'label': 'hate', 'score': 0.01468062587082386}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9853193759918213}, {'label': 'hate', 'score': 0.01468062587082386}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998575448989868}, {'label': 'hate', 'score': 0.00014238187577575445}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998575448989868}, {'label': 'hate', 'score': 0.00014238187577575445}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999830961227417}, {'label': 'hate', 'score': 0.0001689895143499598}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999830961227417}, {'label': 'hate', 'score': 0.0001689895143499598}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99810791015625}, {'label': 'hate', 'score': 0.001892094500362873}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99810791015625}, {'label': 'hate', 'score': 0.001892094500362873}]\n",
            "Epoch 1, Loss: 1.5052158832550049\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987139701843262}, {'label': 'hate', 'score': 0.0012860241113230586}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987139701843262}, {'label': 'hate', 'score': 0.0012860241113230586}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988490343093872}, {'label': 'hate', 'score': 0.001150910509750247}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988490343093872}, {'label': 'hate', 'score': 0.001150910509750247}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997877478599548}, {'label': 'hate', 'score': 0.00021230477432254702}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997877478599548}, {'label': 'hate', 'score': 0.00021230477432254702}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998249411582947}, {'label': 'hate', 'score': 0.0001751204690663144}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998249411582947}, {'label': 'hate', 'score': 0.0001751204690663144}]\n",
            "Epoch 1, Loss: 1.3378019332885742\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9951521158218384}, {'label': 'hate', 'score': 0.004847902804613113}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9951521158218384}, {'label': 'hate', 'score': 0.004847902804613113}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998600423336029}, {'label': 'hate', 'score': 0.0013995260233059525}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998600423336029}, {'label': 'hate', 'score': 0.0013995260233059525}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993818998336792}, {'label': 'hate', 'score': 0.0006180866039358079}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993818998336792}, {'label': 'hate', 'score': 0.0006180866039358079}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9471458196640015}, {'label': 'hate', 'score': 0.05285415053367615}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9471458196640015}, {'label': 'hate', 'score': 0.05285415053367615}]\n",
            "Epoch 1, Loss: 1.2369728088378906\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9885511994361877}, {'label': 'hate', 'score': 0.011448876932263374}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9885511994361877}, {'label': 'hate', 'score': 0.011448876932263374}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994385838508606}, {'label': 'hate', 'score': 0.0005613690591417253}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994385838508606}, {'label': 'hate', 'score': 0.0005613690591417253}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9637950658798218}, {'label': 'hate', 'score': 0.03620493784546852}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9637950658798218}, {'label': 'hate', 'score': 0.03620493784546852}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992709755897522}, {'label': 'hate', 'score': 0.0007290313951671124}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992709755897522}, {'label': 'hate', 'score': 0.0007290313951671124}]\n",
            "Epoch 1, Loss: 1.5938435792922974\n",
            "API Response: [[{'label': 'nothate', 'score': 0.996155321598053}, {'label': 'hate', 'score': 0.0038447165861725807}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.996155321598053}, {'label': 'hate', 'score': 0.0038447165861725807}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9741637706756592}, {'label': 'hate', 'score': 0.025836264714598656}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9741637706756592}, {'label': 'hate', 'score': 0.025836264714598656}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8818314671516418}, {'label': 'hate', 'score': 0.11816849559545517}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8818314671516418}, {'label': 'hate', 'score': 0.11816849559545517}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998526573181152}, {'label': 'hate', 'score': 0.00014730893599335104}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998526573181152}, {'label': 'hate', 'score': 0.00014730893599335104}]\n",
            "Epoch 1, Loss: 1.2993284463882446\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997194409370422}, {'label': 'hate', 'score': 0.00028048225794918835}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997194409370422}, {'label': 'hate', 'score': 0.00028048225794918835}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994499087333679}, {'label': 'hate', 'score': 0.0005501358537003398}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994499087333679}, {'label': 'hate', 'score': 0.0005501358537003398}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9781463146209717}, {'label': 'hate', 'score': 0.021853655576705933}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9781463146209717}, {'label': 'hate', 'score': 0.021853655576705933}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997871518135071}, {'label': 'hate', 'score': 0.00021285464754328132}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997871518135071}, {'label': 'hate', 'score': 0.00021285464754328132}]\n",
            "Epoch 1, Loss: 1.1941900253295898\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998493194580078}, {'label': 'hate', 'score': 0.00015065702609717846}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998493194580078}, {'label': 'hate', 'score': 0.00015065702609717846}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998219609260559}, {'label': 'hate', 'score': 0.00017805334937293082}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998219609260559}, {'label': 'hate', 'score': 0.00017805334937293082}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9954916834831238}, {'label': 'hate', 'score': 0.004508354235440493}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9954916834831238}, {'label': 'hate', 'score': 0.004508354235440493}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998352527618408}, {'label': 'hate', 'score': 0.0001647193857934326}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998352527618408}, {'label': 'hate', 'score': 0.0001647193857934326}]\n",
            "Epoch 1, Loss: 1.1606621742248535\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9974982142448425}, {'label': 'hate', 'score': 0.002501758513972163}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9974982142448425}, {'label': 'hate', 'score': 0.002501758513972163}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987727999687195}, {'label': 'hate', 'score': 0.0012272070161998272}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987727999687195}, {'label': 'hate', 'score': 0.0012272070161998272}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9935343265533447}, {'label': 'hate', 'score': 0.006465704645961523}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9935343265533447}, {'label': 'hate', 'score': 0.006465704645961523}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995187520980835}, {'label': 'hate', 'score': 0.00048125043394975364}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995187520980835}, {'label': 'hate', 'score': 0.00048125043394975364}]\n",
            "Epoch 1, Loss: 1.142266035079956\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9982463121414185}, {'label': 'hate', 'score': 0.0017537142848595977}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9982463121414185}, {'label': 'hate', 'score': 0.0017537142848595977}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9933159947395325}, {'label': 'hate', 'score': 0.006683986634016037}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9933159947395325}, {'label': 'hate', 'score': 0.006683986634016037}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995973706245422}, {'label': 'hate', 'score': 0.00040269020246341825}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995973706245422}, {'label': 'hate', 'score': 0.00040269020246341825}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8787293434143066}, {'label': 'hate', 'score': 0.12127063423395157}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8787293434143066}, {'label': 'hate', 'score': 0.12127063423395157}]\n",
            "Epoch 1, Loss: 1.0883010625839233\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996167421340942}, {'label': 'hate', 'score': 0.00038320483872666955}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996167421340942}, {'label': 'hate', 'score': 0.00038320483872666955}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.7731454372406006}, {'label': 'nothate', 'score': 0.22685450315475464}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.7731454372406006}, {'label': 'nothate', 'score': 0.22685450315475464}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9973505735397339}, {'label': 'hate', 'score': 0.0026494208723306656}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9973505735397339}, {'label': 'hate', 'score': 0.0026494208723306656}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998399019241333}, {'label': 'hate', 'score': 0.0001600776013219729}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998399019241333}, {'label': 'hate', 'score': 0.0001600776013219729}]\n",
            "Epoch 1, Loss: 1.2842057943344116\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988214373588562}, {'label': 'hate', 'score': 0.001178566599264741}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988214373588562}, {'label': 'hate', 'score': 0.001178566599264741}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9915999174118042}, {'label': 'hate', 'score': 0.00840012263506651}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9915999174118042}, {'label': 'hate', 'score': 0.00840012263506651}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9941127896308899}, {'label': 'hate', 'score': 0.005887207575142384}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9941127896308899}, {'label': 'hate', 'score': 0.005887207575142384}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991017580032349}, {'label': 'hate', 'score': 0.0008982127183116972}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991017580032349}, {'label': 'hate', 'score': 0.0008982127183116972}]\n",
            "Epoch 1, Loss: 1.2621891498565674\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9980670809745789}, {'label': 'hate', 'score': 0.0019329865463078022}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9980670809745789}, {'label': 'hate', 'score': 0.0019329865463078022}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983501434326172}, {'label': 'hate', 'score': 0.001649927580729127}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983501434326172}, {'label': 'hate', 'score': 0.001649927580729127}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9584277272224426}, {'label': 'hate', 'score': 0.04157223179936409}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9584277272224426}, {'label': 'hate', 'score': 0.04157223179936409}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998229146003723}, {'label': 'hate', 'score': 0.0001770716771716252}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998229146003723}, {'label': 'hate', 'score': 0.0001770716771716252}]\n",
            "Epoch 1, Loss: 0.9734403491020203\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968681931495667}, {'label': 'hate', 'score': 0.003131783800199628}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968681931495667}, {'label': 'hate', 'score': 0.003131783800199628}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992967844009399}, {'label': 'hate', 'score': 0.0007031865534372628}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992967844009399}, {'label': 'hate', 'score': 0.0007031865534372628}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9919835925102234}, {'label': 'hate', 'score': 0.008016436360776424}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9919835925102234}, {'label': 'hate', 'score': 0.008016436360776424}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998632669448853}, {'label': 'hate', 'score': 0.00013675949594471604}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998632669448853}, {'label': 'hate', 'score': 0.00013675949594471604}]\n",
            "Epoch 1, Loss: 0.9665650129318237\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998542070388794}, {'label': 'hate', 'score': 0.0014579214621335268}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998542070388794}, {'label': 'hate', 'score': 0.0014579214621335268}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998592138290405}, {'label': 'hate', 'score': 0.00014071392070036381}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998592138290405}, {'label': 'hate', 'score': 0.00014071392070036381}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997935891151428}, {'label': 'hate', 'score': 0.0002064423606498167}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997935891151428}, {'label': 'hate', 'score': 0.0002064423606498167}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998570680618286}, {'label': 'hate', 'score': 0.00014290430408436805}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998570680618286}, {'label': 'hate', 'score': 0.00014290430408436805}]\n",
            "Epoch 1, Loss: 0.8844420909881592\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995824694633484}, {'label': 'hate', 'score': 0.000417486036894843}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995824694633484}, {'label': 'hate', 'score': 0.000417486036894843}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9962365031242371}, {'label': 'hate', 'score': 0.0037634859327226877}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9962365031242371}, {'label': 'hate', 'score': 0.0037634859327226877}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9945021867752075}, {'label': 'hate', 'score': 0.0054978481493890285}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9945021867752075}, {'label': 'hate', 'score': 0.0054978481493890285}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.6607866883277893}, {'label': 'hate', 'score': 0.3392133414745331}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.6607866883277893}, {'label': 'hate', 'score': 0.3392133414745331}]\n",
            "Epoch 1, Loss: 0.7516288757324219\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9211028218269348}, {'label': 'hate', 'score': 0.0788971483707428}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9211028218269348}, {'label': 'hate', 'score': 0.0788971483707428}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984890222549438}, {'label': 'hate', 'score': 0.0015109054511412978}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984890222549438}, {'label': 'hate', 'score': 0.0015109054511412978}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993379712104797}, {'label': 'hate', 'score': 0.0006620635977014899}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993379712104797}, {'label': 'hate', 'score': 0.0006620635977014899}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9320828914642334}, {'label': 'hate', 'score': 0.06791709363460541}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9320828914642334}, {'label': 'hate', 'score': 0.06791709363460541}]\n",
            "Epoch 1, Loss: 0.7392385005950928\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987531900405884}, {'label': 'hate', 'score': 0.001246852451004088}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987531900405884}, {'label': 'hate', 'score': 0.001246852451004088}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9825053215026855}, {'label': 'hate', 'score': 0.01749468967318535}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9825053215026855}, {'label': 'hate', 'score': 0.01749468967318535}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996598958969116}, {'label': 'hate', 'score': 0.00034013352706097066}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996598958969116}, {'label': 'hate', 'score': 0.00034013352706097066}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9977545142173767}, {'label': 'hate', 'score': 0.0022455097641795874}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9977545142173767}, {'label': 'hate', 'score': 0.0022455097641795874}]\n",
            "Epoch 1, Loss: 1.072351098060608\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997722506523132}, {'label': 'hate', 'score': 0.00022774974058847874}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997722506523132}, {'label': 'hate', 'score': 0.00022774974058847874}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995643496513367}, {'label': 'hate', 'score': 0.0004356247663963586}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995643496513367}, {'label': 'hate', 'score': 0.0004356247663963586}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981938004493713}, {'label': 'hate', 'score': 0.0018062106100842357}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981938004493713}, {'label': 'hate', 'score': 0.0018062106100842357}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9688220620155334}, {'label': 'hate', 'score': 0.031177904456853867}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9688220620155334}, {'label': 'hate', 'score': 0.031177904456853867}]\n",
            "Epoch 1, Loss: 0.7779173254966736\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998648166656494}, {'label': 'hate', 'score': 0.00013516072067432106}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998648166656494}, {'label': 'hate', 'score': 0.00013516072067432106}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9977965354919434}, {'label': 'hate', 'score': 0.002203510608524084}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9977965354919434}, {'label': 'hate', 'score': 0.002203510608524084}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9922917485237122}, {'label': 'hate', 'score': 0.007708318531513214}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9922917485237122}, {'label': 'hate', 'score': 0.007708318531513214}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998655319213867}, {'label': 'hate', 'score': 0.000134430913021788}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998655319213867}, {'label': 'hate', 'score': 0.000134430913021788}]\n",
            "Epoch 1, Loss: 0.7473224401473999\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9799661040306091}, {'label': 'hate', 'score': 0.02003384940326214}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9799661040306091}, {'label': 'hate', 'score': 0.02003384940326214}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9852734208106995}, {'label': 'hate', 'score': 0.014726635999977589}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9852734208106995}, {'label': 'hate', 'score': 0.014726635999977589}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9714762568473816}, {'label': 'hate', 'score': 0.02852371521294117}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9714762568473816}, {'label': 'hate', 'score': 0.02852371521294117}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9672529101371765}, {'label': 'hate', 'score': 0.03274710848927498}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9672529101371765}, {'label': 'hate', 'score': 0.03274710848927498}]\n",
            "Epoch 1, Loss: 0.5827746391296387\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998600482940674}, {'label': 'hate', 'score': 0.0001398859458277002}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998600482940674}, {'label': 'hate', 'score': 0.0001398859458277002}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999472439289093}, {'label': 'hate', 'score': 0.0005275261355563998}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999472439289093}, {'label': 'hate', 'score': 0.0005275261355563998}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995738863945007}, {'label': 'hate', 'score': 0.00042607804061844945}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995738863945007}, {'label': 'hate', 'score': 0.00042607804061844945}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9829775094985962}, {'label': 'hate', 'score': 0.01702245883643627}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9829775094985962}, {'label': 'hate', 'score': 0.01702245883643627}]\n",
            "Epoch 1, Loss: 0.9003111124038696\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998082518577576}, {'label': 'hate', 'score': 0.00019181905372533947}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998082518577576}, {'label': 'hate', 'score': 0.00019181905372533947}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9920423626899719}, {'label': 'hate', 'score': 0.007957596331834793}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9920423626899719}, {'label': 'hate', 'score': 0.007957596331834793}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9387381076812744}, {'label': 'hate', 'score': 0.061261825263500214}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9387381076812744}, {'label': 'hate', 'score': 0.061261825263500214}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9836897253990173}, {'label': 'hate', 'score': 0.016310231760144234}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9836897253990173}, {'label': 'hate', 'score': 0.016310231760144234}]\n",
            "Epoch 1, Loss: 0.680159866809845\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953309893608093}, {'label': 'hate', 'score': 0.004668978974223137}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953309893608093}, {'label': 'hate', 'score': 0.004668978974223137}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998602867126465}, {'label': 'hate', 'score': 0.0001397530286340043}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998602867126465}, {'label': 'hate', 'score': 0.0001397530286340043}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998601675033569}, {'label': 'hate', 'score': 0.0001398183376295492}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998601675033569}, {'label': 'hate', 'score': 0.0001398183376295492}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997740387916565}, {'label': 'hate', 'score': 0.0002259855391457677}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997740387916565}, {'label': 'hate', 'score': 0.0002259855391457677}]\n",
            "Epoch 1, Loss: 0.6710384488105774\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999710738658905}, {'label': 'hate', 'score': 0.000289181771222502}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999710738658905}, {'label': 'hate', 'score': 0.000289181771222502}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9982458353042603}, {'label': 'hate', 'score': 0.0017541617853567004}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9982458353042603}, {'label': 'hate', 'score': 0.0017541617853567004}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9971650242805481}, {'label': 'hate', 'score': 0.002834984567016363}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9971650242805481}, {'label': 'hate', 'score': 0.002834984567016363}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992321729660034}, {'label': 'hate', 'score': 0.0007678018882870674}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992321729660034}, {'label': 'hate', 'score': 0.0007678018882870674}]\n",
            "Epoch 1, Loss: 0.5806078910827637\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9853111505508423}, {'label': 'hate', 'score': 0.014688823372125626}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9853111505508423}, {'label': 'hate', 'score': 0.014688823372125626}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8840316534042358}, {'label': 'hate', 'score': 0.11596833914518356}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8840316534042358}, {'label': 'hate', 'score': 0.11596833914518356}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987762570381165}, {'label': 'hate', 'score': 0.0012236934853717685}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987762570381165}, {'label': 'hate', 'score': 0.0012236934853717685}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998476505279541}, {'label': 'hate', 'score': 0.00015238237392622977}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998476505279541}, {'label': 'hate', 'score': 0.00015238237392622977}]\n",
            "Epoch 1, Loss: 0.6373494863510132\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9920386075973511}, {'label': 'hate', 'score': 0.007961380295455456}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9920386075973511}, {'label': 'hate', 'score': 0.007961380295455456}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991856217384338}, {'label': 'hate', 'score': 0.000814311089925468}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991856217384338}, {'label': 'hate', 'score': 0.000814311089925468}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981570839881897}, {'label': 'hate', 'score': 0.0018428793409839272}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981570839881897}, {'label': 'hate', 'score': 0.0018428793409839272}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.972223162651062}, {'label': 'hate', 'score': 0.02777678146958351}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.972223162651062}, {'label': 'hate', 'score': 0.02777678146958351}]\n",
            "Epoch 1, Loss: 0.6548348665237427\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999613344669342}, {'label': 'hate', 'score': 0.0003866255865432322}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999613344669342}, {'label': 'hate', 'score': 0.0003866255865432322}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9791206121444702}, {'label': 'hate', 'score': 0.020879369229078293}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9791206121444702}, {'label': 'hate', 'score': 0.020879369229078293}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9854684472084045}, {'label': 'hate', 'score': 0.014531583525240421}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9854684472084045}, {'label': 'hate', 'score': 0.014531583525240421}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998546838760376}, {'label': 'hate', 'score': 0.00014533349894918501}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998546838760376}, {'label': 'hate', 'score': 0.00014533349894918501}]\n",
            "Epoch 1, Loss: 0.52934330701828\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7068464159965515}, {'label': 'hate', 'score': 0.2931535542011261}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7068464159965515}, {'label': 'hate', 'score': 0.2931535542011261}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996334314346313}, {'label': 'hate', 'score': 0.000366543245036155}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996334314346313}, {'label': 'hate', 'score': 0.000366543245036155}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995641827583313}, {'label': 'hate', 'score': 0.004358136095106602}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995641827583313}, {'label': 'hate', 'score': 0.004358136095106602}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997207522392273}, {'label': 'hate', 'score': 0.00027920823777094483}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997207522392273}, {'label': 'hate', 'score': 0.00027920823777094483}]\n",
            "Epoch 1, Loss: 0.5242066979408264\n",
            "API Response: [[{'label': 'nothate', 'score': 0.6905407309532166}, {'label': 'hate', 'score': 0.30945923924446106}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.6905407309532166}, {'label': 'hate', 'score': 0.30945923924446106}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.989452600479126}, {'label': 'hate', 'score': 0.01054740883409977}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.989452600479126}, {'label': 'hate', 'score': 0.01054740883409977}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986121654510498}, {'label': 'hate', 'score': 0.001387858297675848}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986121654510498}, {'label': 'hate', 'score': 0.001387858297675848}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9636260867118835}, {'label': 'hate', 'score': 0.03637385368347168}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9636260867118835}, {'label': 'hate', 'score': 0.03637385368347168}]\n",
            "Epoch 1, Loss: 0.7302700877189636\n",
            "Rate limit reached with current token, switching to next token.\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998568296432495}, {'label': 'hate', 'score': 0.00014318394823931158}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998568296432495}, {'label': 'hate', 'score': 0.00014318394823931158}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998514652252197}, {'label': 'hate', 'score': 0.00014855180052109063}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998514652252197}, {'label': 'hate', 'score': 0.00014855180052109063}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995946288108826}, {'label': 'hate', 'score': 0.0004053360898979008}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995946288108826}, {'label': 'hate', 'score': 0.0004053360898979008}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99688321352005}, {'label': 'hate', 'score': 0.003116793464869261}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99688321352005}, {'label': 'hate', 'score': 0.003116793464869261}]\n",
            "Epoch 1, Loss: 0.47428539395332336\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998611211776733}, {'label': 'hate', 'score': 0.00013881694758310914}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998611211776733}, {'label': 'hate', 'score': 0.00013881694758310914}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995032548904419}, {'label': 'hate', 'score': 0.0004967414424754679}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995032548904419}, {'label': 'hate', 'score': 0.0004967414424754679}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998564720153809}, {'label': 'hate', 'score': 0.00014355263556353748}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998564720153809}, {'label': 'hate', 'score': 0.00014355263556353748}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996010661125183}, {'label': 'hate', 'score': 0.00039891788037493825}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996010661125183}, {'label': 'hate', 'score': 0.00039891788037493825}]\n",
            "Epoch 1, Loss: 0.47538676857948303\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9980237483978271}, {'label': 'hate', 'score': 0.001976233907043934}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9980237483978271}, {'label': 'hate', 'score': 0.001976233907043934}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9835216999053955}, {'label': 'hate', 'score': 0.016478288918733597}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9835216999053955}, {'label': 'hate', 'score': 0.016478288918733597}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9926320314407349}, {'label': 'hate', 'score': 0.007367938291281462}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9926320314407349}, {'label': 'hate', 'score': 0.007367938291281462}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981088638305664}, {'label': 'hate', 'score': 0.0018910771468654275}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981088638305664}, {'label': 'hate', 'score': 0.0018910771468654275}]\n",
            "Epoch 1, Loss: 0.5153065323829651\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998216032981873}, {'label': 'hate', 'score': 0.00017841327644418925}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998216032981873}, {'label': 'hate', 'score': 0.00017841327644418925}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9957450032234192}, {'label': 'hate', 'score': 0.004255005158483982}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9957450032234192}, {'label': 'hate', 'score': 0.004255005158483982}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9921987652778625}, {'label': 'hate', 'score': 0.007801192346960306}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9921987652778625}, {'label': 'hate', 'score': 0.007801192346960306}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9960312247276306}, {'label': 'hate', 'score': 0.003968813922256231}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9960312247276306}, {'label': 'hate', 'score': 0.003968813922256231}]\n",
            "Epoch 1, Loss: 0.4265003800392151\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995837807655334}, {'label': 'hate', 'score': 0.00041625535232014954}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995837807655334}, {'label': 'hate', 'score': 0.00041625535232014954}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996985197067261}, {'label': 'hate', 'score': 0.0003015651018358767}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996985197067261}, {'label': 'hate', 'score': 0.0003015651018358767}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997466206550598}, {'label': 'hate', 'score': 0.0002533930237405002}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997466206550598}, {'label': 'hate', 'score': 0.0002533930237405002}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9752771854400635}, {'label': 'hate', 'score': 0.024722810834646225}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9752771854400635}, {'label': 'hate', 'score': 0.024722810834646225}]\n",
            "Epoch 1, Loss: 0.5095970630645752\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9824459552764893}, {'label': 'hate', 'score': 0.017554081976413727}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9824459552764893}, {'label': 'hate', 'score': 0.017554081976413727}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999721348285675}, {'label': 'hate', 'score': 0.00027860517730005085}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999721348285675}, {'label': 'hate', 'score': 0.00027860517730005085}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997918009757996}, {'label': 'hate', 'score': 0.0002081937127513811}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997918009757996}, {'label': 'hate', 'score': 0.0002081937127513811}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979320764541626}, {'label': 'hate', 'score': 0.0020678776782006025}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979320764541626}, {'label': 'hate', 'score': 0.0020678776782006025}]\n",
            "Epoch 1, Loss: 0.6269894242286682\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995195865631104}, {'label': 'hate', 'score': 0.0004804355266969651}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995195865631104}, {'label': 'hate', 'score': 0.0004804355266969651}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9942271709442139}, {'label': 'hate', 'score': 0.005772810894995928}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9942271709442139}, {'label': 'hate', 'score': 0.005772810894995928}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995138645172119}, {'label': 'hate', 'score': 0.0004861916822846979}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995138645172119}, {'label': 'hate', 'score': 0.0004861916822846979}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997205138206482}, {'label': 'hate', 'score': 0.0002794514293782413}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997205138206482}, {'label': 'hate', 'score': 0.0002794514293782413}]\n",
            "Epoch 1, Loss: 0.41742756962776184\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994292855262756}, {'label': 'hate', 'score': 0.0005706334486603737}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994292855262756}, {'label': 'hate', 'score': 0.0005706334486603737}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999848484992981}, {'label': 'hate', 'score': 0.00015144096687436104}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999848484992981}, {'label': 'hate', 'score': 0.00015144096687436104}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8980633020401001}, {'label': 'hate', 'score': 0.1019366979598999}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8980633020401001}, {'label': 'hate', 'score': 0.1019366979598999}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983396530151367}, {'label': 'hate', 'score': 0.0016603352269157767}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983396530151367}, {'label': 'hate', 'score': 0.0016603352269157767}]\n",
            "Epoch 1, Loss: 0.4105525314807892\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994354844093323}, {'label': 'hate', 'score': 0.0005645041237585247}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994354844093323}, {'label': 'hate', 'score': 0.0005645041237585247}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.987953782081604}, {'label': 'hate', 'score': 0.01204619463533163}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.987953782081604}, {'label': 'hate', 'score': 0.01204619463533163}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995154142379761}, {'label': 'hate', 'score': 0.00048456378863193095}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995154142379761}, {'label': 'hate', 'score': 0.00048456378863193095}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8779085874557495}, {'label': 'hate', 'score': 0.1220913901925087}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8779085874557495}, {'label': 'hate', 'score': 0.1220913901925087}]\n",
            "Epoch 1, Loss: 0.5080493092536926\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995818734169006}, {'label': 'hate', 'score': 0.000418163399444893}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995818734169006}, {'label': 'hate', 'score': 0.000418163399444893}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9329857230186462}, {'label': 'hate', 'score': 0.06701431423425674}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9329857230186462}, {'label': 'hate', 'score': 0.06701431423425674}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9956555366516113}, {'label': 'hate', 'score': 0.004344501998275518}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9956555366516113}, {'label': 'hate', 'score': 0.004344501998275518}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9975312948226929}, {'label': 'hate', 'score': 0.002468646038323641}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9975312948226929}, {'label': 'hate', 'score': 0.002468646038323641}]\n",
            "Epoch 1, Loss: 0.3750465214252472\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998307228088379}, {'label': 'hate', 'score': 0.00016923702787607908}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998307228088379}, {'label': 'hate', 'score': 0.00016923702787607908}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9889639616012573}, {'label': 'hate', 'score': 0.011036035604774952}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9889639616012573}, {'label': 'hate', 'score': 0.011036035604774952}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966002106666565}, {'label': 'hate', 'score': 0.003399801440536976}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966002106666565}, {'label': 'hate', 'score': 0.003399801440536976}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997972846031189}, {'label': 'hate', 'score': 0.00020278964075259864}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997972846031189}, {'label': 'hate', 'score': 0.00020278964075259864}]\n",
            "Epoch 1, Loss: 0.39015063643455505\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9935867190361023}, {'label': 'hate', 'score': 0.0064132967963814735}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9935867190361023}, {'label': 'hate', 'score': 0.0064132967963814735}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990291595458984}, {'label': 'hate', 'score': 0.0009708682191558182}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990291595458984}, {'label': 'hate', 'score': 0.0009708682191558182}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9469833970069885}, {'label': 'hate', 'score': 0.05301664397120476}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9469833970069885}, {'label': 'hate', 'score': 0.05301664397120476}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998494386672974}, {'label': 'hate', 'score': 0.00015048013301566243}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998494386672974}, {'label': 'hate', 'score': 0.00015048013301566243}]\n",
            "Epoch 1, Loss: 0.43650785088539124\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998906135559082}, {'label': 'hate', 'score': 0.0010938334744423628}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998906135559082}, {'label': 'hate', 'score': 0.0010938334744423628}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998407363891602}, {'label': 'hate', 'score': 0.00015918821736704558}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998407363891602}, {'label': 'hate', 'score': 0.00015918821736704558}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998431205749512}, {'label': 'hate', 'score': 0.00015687805716879666}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998431205749512}, {'label': 'hate', 'score': 0.00015687805716879666}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9815851449966431}, {'label': 'hate', 'score': 0.01841488853096962}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9815851449966431}, {'label': 'hate', 'score': 0.01841488853096962}]\n",
            "Epoch 1, Loss: 0.6102581024169922\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997572302818298}, {'label': 'hate', 'score': 0.00024282504455186427}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997572302818298}, {'label': 'hate', 'score': 0.00024282504455186427}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968931674957275}, {'label': 'hate', 'score': 0.003106781980022788}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968931674957275}, {'label': 'hate', 'score': 0.003106781980022788}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997194409370422}, {'label': 'hate', 'score': 0.00028055181610397995}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997194409370422}, {'label': 'hate', 'score': 0.00028055181610397995}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998575448989868}, {'label': 'hate', 'score': 0.00014247369836084545}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998575448989868}, {'label': 'hate', 'score': 0.00014247369836084545}]\n",
            "Epoch 1, Loss: 0.36816638708114624\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996888637542725}, {'label': 'hate', 'score': 0.0003111291734967381}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996888637542725}, {'label': 'hate', 'score': 0.0003111291734967381}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9980796575546265}, {'label': 'hate', 'score': 0.0019203760894015431}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9980796575546265}, {'label': 'hate', 'score': 0.0019203760894015431}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989653825759888}, {'label': 'hate', 'score': 0.0010346358176320791}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989653825759888}, {'label': 'hate', 'score': 0.0010346358176320791}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991686344146729}, {'label': 'hate', 'score': 0.0008313316502608359}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991686344146729}, {'label': 'hate', 'score': 0.0008313316502608359}]\n",
            "Epoch 1, Loss: 0.3653515577316284\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997097849845886}, {'label': 'hate', 'score': 0.0002901730185840279}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997097849845886}, {'label': 'hate', 'score': 0.0002901730185840279}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987803101539612}, {'label': 'hate', 'score': 0.0012196818133816123}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987803101539612}, {'label': 'hate', 'score': 0.0012196818133816123}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9576165676116943}, {'label': 'hate', 'score': 0.04238341748714447}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9576165676116943}, {'label': 'hate', 'score': 0.04238341748714447}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.996776282787323}, {'label': 'hate', 'score': 0.0032237512059509754}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.996776282787323}, {'label': 'hate', 'score': 0.0032237512059509754}]\n",
            "Epoch 1, Loss: 0.4235870838165283\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998602867126465}, {'label': 'hate', 'score': 0.0001396776206092909}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998602867126465}, {'label': 'hate', 'score': 0.0001396776206092909}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996663331985474}, {'label': 'hate', 'score': 0.0003336822264827788}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996663331985474}, {'label': 'hate', 'score': 0.0003336822264827788}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997958540916443}, {'label': 'hate', 'score': 0.00020411086734384298}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997958540916443}, {'label': 'hate', 'score': 0.00020411086734384298}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988045692443848}, {'label': 'hate', 'score': 0.0011953747598454356}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988045692443848}, {'label': 'hate', 'score': 0.0011953747598454356}]\n",
            "Epoch 1, Loss: 0.3537777364253998\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996870756149292}, {'label': 'hate', 'score': 0.0003129366668872535}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996870756149292}, {'label': 'hate', 'score': 0.0003129366668872535}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984357953071594}, {'label': 'hate', 'score': 0.0015641592908650637}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984357953071594}, {'label': 'hate', 'score': 0.0015641592908650637}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997711777687073}, {'label': 'hate', 'score': 0.0002288756222696975}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997711777687073}, {'label': 'hate', 'score': 0.0002288756222696975}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9495205879211426}, {'label': 'hate', 'score': 0.050479378551244736}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9495205879211426}, {'label': 'hate', 'score': 0.050479378551244736}]\n",
            "Epoch 1, Loss: 0.30356404185295105\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999291181564331}, {'label': 'hate', 'score': 0.0007087900303304195}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999291181564331}, {'label': 'hate', 'score': 0.0007087900303304195}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.00014686057693324983}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.00014686057693324983}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9921395182609558}, {'label': 'hate', 'score': 0.007860506884753704}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9921395182609558}, {'label': 'hate', 'score': 0.007860506884753704}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.918556809425354}, {'label': 'hate', 'score': 0.0814431682229042}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.918556809425354}, {'label': 'hate', 'score': 0.0814431682229042}]\n",
            "Epoch 1, Loss: 0.47287148237228394\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998418092727661}, {'label': 'hate', 'score': 0.00015812803758308291}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998418092727661}, {'label': 'hate', 'score': 0.00015812803758308291}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997487664222717}, {'label': 'hate', 'score': 0.00025127563276328146}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997487664222717}, {'label': 'hate', 'score': 0.00025127563276328146}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9962034821510315}, {'label': 'hate', 'score': 0.003796554636210203}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9962034821510315}, {'label': 'hate', 'score': 0.003796554636210203}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997709393501282}, {'label': 'hate', 'score': 0.00022909854305908084}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997709393501282}, {'label': 'hate', 'score': 0.00022909854305908084}]\n",
            "Epoch 1, Loss: 0.40311306715011597\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996732473373413}, {'label': 'hate', 'score': 0.000326801382470876}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996732473373413}, {'label': 'hate', 'score': 0.000326801382470876}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981222748756409}, {'label': 'hate', 'score': 0.0018777677323669195}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981222748756409}, {'label': 'hate', 'score': 0.0018777677323669195}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994853734970093}, {'label': 'hate', 'score': 0.000514596700668335}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994853734970093}, {'label': 'hate', 'score': 0.000514596700668335}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9950020909309387}, {'label': 'hate', 'score': 0.004997864831238985}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9950020909309387}, {'label': 'hate', 'score': 0.004997864831238985}]\n",
            "Epoch 1, Loss: 0.2540854215621948\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9700447916984558}, {'label': 'hate', 'score': 0.02995520643889904}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9700447916984558}, {'label': 'hate', 'score': 0.02995520643889904}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995841383934021}, {'label': 'hate', 'score': 0.00041592097841203213}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995841383934021}, {'label': 'hate', 'score': 0.00041592097841203213}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998461008071899}, {'label': 'hate', 'score': 0.00015384393918793648}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998461008071899}, {'label': 'hate', 'score': 0.00015384393918793648}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8858030438423157}, {'label': 'hate', 'score': 0.11419696360826492}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8858030438423157}, {'label': 'hate', 'score': 0.11419696360826492}]\n",
            "Epoch 1, Loss: 0.3336663246154785\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996365308761597}, {'label': 'hate', 'score': 0.0003635089669842273}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996365308761597}, {'label': 'hate', 'score': 0.0003635089669842273}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9816646575927734}, {'label': 'hate', 'score': 0.01833532750606537}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9816646575927734}, {'label': 'hate', 'score': 0.01833532750606537}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998611211776733}, {'label': 'hate', 'score': 0.00013882463099434972}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998611211776733}, {'label': 'hate', 'score': 0.00013882463099434972}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998539686203003}, {'label': 'hate', 'score': 0.00014602916780859232}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998539686203003}, {'label': 'hate', 'score': 0.00014602916780859232}]\n",
            "Epoch 1, Loss: 0.31528738141059875\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995612502098083}, {'label': 'hate', 'score': 0.0004386846849229187}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995612502098083}, {'label': 'hate', 'score': 0.0004386846849229187}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992327690124512}, {'label': 'hate', 'score': 0.0007672909996472299}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992327690124512}, {'label': 'hate', 'score': 0.0007672909996472299}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998483657836914}, {'label': 'hate', 'score': 0.00015163127682171762}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998483657836914}, {'label': 'hate', 'score': 0.00015163127682171762}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9936103224754333}, {'label': 'hate', 'score': 0.006389598362147808}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9936103224754333}, {'label': 'hate', 'score': 0.006389598362147808}]\n",
            "Epoch 1, Loss: 0.2864384949207306\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9871965646743774}, {'label': 'hate', 'score': 0.012803482823073864}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9871965646743774}, {'label': 'hate', 'score': 0.012803482823073864}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997934699058533}, {'label': 'hate', 'score': 0.00020649665384553373}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997934699058533}, {'label': 'hate', 'score': 0.00020649665384553373}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997115731239319}, {'label': 'hate', 'score': 0.00028841194580309093}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997115731239319}, {'label': 'hate', 'score': 0.00028841194580309093}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995636343955994}, {'label': 'hate', 'score': 0.0004363320767879486}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995636343955994}, {'label': 'hate', 'score': 0.0004363320767879486}]\n",
            "Epoch 1, Loss: 0.2690860331058502\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9856357574462891}, {'label': 'hate', 'score': 0.014364264905452728}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9856357574462891}, {'label': 'hate', 'score': 0.014364264905452728}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9899113774299622}, {'label': 'hate', 'score': 0.010088658891618252}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9899113774299622}, {'label': 'hate', 'score': 0.010088658891618252}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984273910522461}, {'label': 'hate', 'score': 0.0015726147685199976}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984273910522461}, {'label': 'hate', 'score': 0.0015726147685199976}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998526573181152}, {'label': 'hate', 'score': 0.00014728015230502933}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998526573181152}, {'label': 'hate', 'score': 0.00014728015230502933}]\n",
            "Epoch 1, Loss: 0.2738991379737854\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995899796485901}, {'label': 'hate', 'score': 0.00041006284300237894}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995899796485901}, {'label': 'hate', 'score': 0.00041006284300237894}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9931524991989136}, {'label': 'hate', 'score': 0.006847534794360399}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9931524991989136}, {'label': 'hate', 'score': 0.006847534794360399}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9970027804374695}, {'label': 'hate', 'score': 0.0029972156044095755}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9970027804374695}, {'label': 'hate', 'score': 0.0029972156044095755}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99982088804245}, {'label': 'hate', 'score': 0.00017908720474224538}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99982088804245}, {'label': 'hate', 'score': 0.00017908720474224538}]\n",
            "Epoch 1, Loss: 0.25620582699775696\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993645548820496}, {'label': 'hate', 'score': 0.0006354167708195746}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993645548820496}, {'label': 'hate', 'score': 0.0006354167708195746}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998100399971008}, {'label': 'hate', 'score': 0.00019003300985787064}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998100399971008}, {'label': 'hate', 'score': 0.00019003300985787064}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998021721839905}, {'label': 'hate', 'score': 0.0001978779473574832}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998021721839905}, {'label': 'hate', 'score': 0.0001978779473574832}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9962618947029114}, {'label': 'hate', 'score': 0.003738123457878828}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9962618947029114}, {'label': 'hate', 'score': 0.003738123457878828}]\n",
            "Epoch 1, Loss: 0.270577996969223\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998633861541748}, {'label': 'hate', 'score': 0.00013658497482538223}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998633861541748}, {'label': 'hate', 'score': 0.00013658497482538223}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996364116668701}, {'label': 'hate', 'score': 0.0003635411849245429}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996364116668701}, {'label': 'hate', 'score': 0.0003635411849245429}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997639060020447}, {'label': 'hate', 'score': 0.0002361421356908977}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997639060020447}, {'label': 'hate', 'score': 0.0002361421356908977}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998321533203125}, {'label': 'hate', 'score': 0.000167798760230653}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998321533203125}, {'label': 'hate', 'score': 0.000167798760230653}]\n",
            "Epoch 1, Loss: 0.22742505371570587\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998589754104614}, {'label': 'hate', 'score': 0.00014098308747634292}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998589754104614}, {'label': 'hate', 'score': 0.00014098308747634292}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.995582640171051}, {'label': 'hate', 'score': 0.00441733980551362}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.995582640171051}, {'label': 'hate', 'score': 0.00441733980551362}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9966186285018921}, {'label': 'hate', 'score': 0.0033812851179391146}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9966186285018921}, {'label': 'hate', 'score': 0.0033812851179391146}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.894169270992279}, {'label': 'hate', 'score': 0.10583068430423737}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.894169270992279}, {'label': 'hate', 'score': 0.10583068430423737}]\n",
            "Epoch 1, Loss: 0.2602423429489136\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9932833909988403}, {'label': 'hate', 'score': 0.0067166113294661045}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9932833909988403}, {'label': 'hate', 'score': 0.0067166113294661045}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996781349182129}, {'label': 'hate', 'score': 0.0003219361533410847}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996781349182129}, {'label': 'hate', 'score': 0.0003219361533410847}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953965544700623}, {'label': 'hate', 'score': 0.004603405948728323}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953965544700623}, {'label': 'hate', 'score': 0.004603405948728323}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995654225349426}, {'label': 'hate', 'score': 0.0004346195491962135}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995654225349426}, {'label': 'hate', 'score': 0.0004346195491962135}]\n",
            "Epoch 1, Loss: 0.3088890016078949\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995965361595154}, {'label': 'hate', 'score': 0.0004035217862110585}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995965361595154}, {'label': 'hate', 'score': 0.0004035217862110585}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979299306869507}, {'label': 'hate', 'score': 0.0020700148306787014}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979299306869507}, {'label': 'hate', 'score': 0.0020700148306787014}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997196793556213}, {'label': 'hate', 'score': 0.0002802943345159292}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997196793556213}, {'label': 'hate', 'score': 0.0002802943345159292}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9964959025382996}, {'label': 'hate', 'score': 0.003504152875393629}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9964959025382996}, {'label': 'hate', 'score': 0.003504152875393629}]\n",
            "Epoch 1, Loss: 0.23469150066375732\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988613128662109}, {'label': 'hate', 'score': 0.0011386653641238809}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988613128662109}, {'label': 'hate', 'score': 0.0011386653641238809}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998536109924316}, {'label': 'hate', 'score': 0.00014632380043622106}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998536109924316}, {'label': 'hate', 'score': 0.00014632380043622106}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987936019897461}, {'label': 'hate', 'score': 0.001206372631713748}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987936019897461}, {'label': 'hate', 'score': 0.001206372631713748}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998480081558228}, {'label': 'hate', 'score': 0.00015199983317870647}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998480081558228}, {'label': 'hate', 'score': 0.00015199983317870647}]\n",
            "Epoch 1, Loss: 0.27068114280700684\n",
            "API Response: [[{'label': 'nothate', 'score': 0.947808027267456}, {'label': 'hate', 'score': 0.05219196900725365}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.947808027267456}, {'label': 'hate', 'score': 0.05219196900725365}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997444748878479}, {'label': 'hate', 'score': 0.0002554622187744826}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997444748878479}, {'label': 'hate', 'score': 0.0002554622187744826}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995858073234558}, {'label': 'hate', 'score': 0.0004141748941037804}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995858073234558}, {'label': 'hate', 'score': 0.0004141748941037804}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9923882484436035}, {'label': 'hate', 'score': 0.0076117850840091705}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9923882484436035}, {'label': 'hate', 'score': 0.0076117850840091705}]\n",
            "Epoch 1, Loss: 0.28294065594673157\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Epoch 1, Loss: 0.2342931032180786\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "Unexpected API response format or index error: {'error': 'Model facebook/roberta-hate-speech-dynabench-r4-target is currently loading', 'estimated_time': 20.0}\n",
            "API Response: {'error': 'Service Unavailable'}\n",
            "Unexpected API response format or index error: {'error': 'Service Unavailable'}\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991580247879028}, {'label': 'hate', 'score': 0.00084197852993384}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991580247879028}, {'label': 'hate', 'score': 0.00084197852993384}]\n",
            "Epoch 1, Loss: 0.21492241322994232\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9973210692405701}, {'label': 'hate', 'score': 0.0026789705734699965}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9973210692405701}, {'label': 'hate', 'score': 0.0026789705734699965}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998447895050049}, {'label': 'hate', 'score': 0.00015513302059844136}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998447895050049}, {'label': 'hate', 'score': 0.00015513302059844136}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998593330383301}, {'label': 'hate', 'score': 0.00014069328608457}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998593330383301}, {'label': 'hate', 'score': 0.00014069328608457}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9853192567825317}, {'label': 'hate', 'score': 0.014680793508887291}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9853192567825317}, {'label': 'hate', 'score': 0.014680793508887291}]\n",
            "Epoch 1, Loss: 0.21052557229995728\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9963003396987915}, {'label': 'hate', 'score': 0.0036996223498135805}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9963003396987915}, {'label': 'hate', 'score': 0.0036996223498135805}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998599290847778}, {'label': 'hate', 'score': 0.00014009220467414707}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998599290847778}, {'label': 'hate', 'score': 0.00014009220467414707}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987301230430603}, {'label': 'hate', 'score': 0.0012698844075202942}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987301230430603}, {'label': 'hate', 'score': 0.0012698844075202942}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997296929359436}, {'label': 'hate', 'score': 0.0002702463825698942}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997296929359436}, {'label': 'hate', 'score': 0.0002702463825698942}]\n",
            "Epoch 1, Loss: 0.24362307786941528\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9977195858955383}, {'label': 'hate', 'score': 0.0022803652100265026}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9977195858955383}, {'label': 'hate', 'score': 0.0022803652100265026}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998088479042053}, {'label': 'hate', 'score': 0.00019121402874588966}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998088479042053}, {'label': 'hate', 'score': 0.00019121402874588966}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9988781809806824}, {'label': 'hate', 'score': 0.0011218308936804533}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9988781809806824}, {'label': 'hate', 'score': 0.0011218308936804533}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997865557670593}, {'label': 'hate', 'score': 0.00021348717564251274}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997865557670593}, {'label': 'hate', 'score': 0.00021348717564251274}]\n",
            "Epoch 1, Loss: 0.1953759789466858\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997252821922302}, {'label': 'hate', 'score': 0.0002746986283455044}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997252821922302}, {'label': 'hate', 'score': 0.0002746986283455044}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.998175859451294}, {'label': 'hate', 'score': 0.0018241031793877482}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.998175859451294}, {'label': 'hate', 'score': 0.0018241031793877482}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981499910354614}, {'label': 'hate', 'score': 0.001850062981247902}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981499910354614}, {'label': 'hate', 'score': 0.001850062981247902}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996991157531738}, {'label': 'hate', 'score': 0.0003009599167853594}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996991157531738}, {'label': 'hate', 'score': 0.0003009599167853594}]\n",
            "Epoch 1, Loss: 0.20119494199752808\n",
            "API Response: [[{'label': 'nothate', 'score': 0.991080105304718}, {'label': 'hate', 'score': 0.008919844403862953}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.991080105304718}, {'label': 'hate', 'score': 0.008919844403862953}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997833371162415}, {'label': 'hate', 'score': 0.00021664790983777493}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997833371162415}, {'label': 'hate', 'score': 0.00021664790983777493}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997197985649109}, {'label': 'hate', 'score': 0.0002801933733280748}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997197985649109}, {'label': 'hate', 'score': 0.0002801933733280748}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991381168365479}, {'label': 'hate', 'score': 0.0008618749561719596}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991381168365479}, {'label': 'hate', 'score': 0.0008618749561719596}]\n",
            "Epoch 1, Loss: 0.2507995665073395\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9957504272460938}, {'label': 'hate', 'score': 0.004249600227922201}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9957504272460938}, {'label': 'hate', 'score': 0.004249600227922201}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999616265296936}, {'label': 'hate', 'score': 0.0003836875257547945}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999616265296936}, {'label': 'hate', 'score': 0.0003836875257547945}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953312277793884}, {'label': 'hate', 'score': 0.004668750800192356}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953312277793884}, {'label': 'hate', 'score': 0.004668750800192356}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9858697652816772}, {'label': 'hate', 'score': 0.014130196534097195}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9858697652816772}, {'label': 'hate', 'score': 0.014130196534097195}]\n",
            "Epoch 1, Loss: 0.3196789622306824\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958692193031311}, {'label': 'hate', 'score': 0.004130739718675613}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958692193031311}, {'label': 'hate', 'score': 0.004130739718675613}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984278678894043}, {'label': 'hate', 'score': 0.0015721074305474758}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984278678894043}, {'label': 'hate', 'score': 0.0015721074305474758}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9963157773017883}, {'label': 'hate', 'score': 0.003684196388348937}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9963157773017883}, {'label': 'hate', 'score': 0.003684196388348937}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996905326843262}, {'label': 'hate', 'score': 0.0003095238353125751}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996905326843262}, {'label': 'hate', 'score': 0.0003095238353125751}]\n",
            "Epoch 1, Loss: 0.2567552328109741\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998615980148315}, {'label': 'hate', 'score': 0.0001383854541927576}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998615980148315}, {'label': 'hate', 'score': 0.0001383854541927576}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9643153548240662}, {'label': 'hate', 'score': 0.03568470478057861}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9643153548240662}, {'label': 'hate', 'score': 0.03568470478057861}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9965656399726868}, {'label': 'hate', 'score': 0.0034344266168773174}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9965656399726868}, {'label': 'hate', 'score': 0.0034344266168773174}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.988609790802002}, {'label': 'hate', 'score': 0.011390211060643196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.988609790802002}, {'label': 'hate', 'score': 0.011390211060643196}]\n",
            "Epoch 1, Loss: 0.22264213860034943\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9928638339042664}, {'label': 'hate', 'score': 0.007136157248169184}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9928638339042664}, {'label': 'hate', 'score': 0.007136157248169184}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998624324798584}, {'label': 'hate', 'score': 0.0001375255233142525}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998624324798584}, {'label': 'hate', 'score': 0.0001375255233142525}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9916457533836365}, {'label': 'hate', 'score': 0.008354277350008488}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9916457533836365}, {'label': 'hate', 'score': 0.008354277350008488}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996976852416992}, {'label': 'hate', 'score': 0.0003022867313120514}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996976852416992}, {'label': 'hate', 'score': 0.0003022867313120514}]\n",
            "Epoch 1, Loss: 0.2026238590478897\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998559951782227}, {'label': 'hate', 'score': 0.0001439707266399637}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998559951782227}, {'label': 'hate', 'score': 0.0001439707266399637}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999847412109375}, {'label': 'hate', 'score': 0.00015251405420713127}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999847412109375}, {'label': 'hate', 'score': 0.00015251405420713127}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997568726539612}, {'label': 'hate', 'score': 0.00024316005874425173}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997568726539612}, {'label': 'hate', 'score': 0.00024316005874425173}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9936782717704773}, {'label': 'hate', 'score': 0.006321800872683525}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9936782717704773}, {'label': 'hate', 'score': 0.006321800872683525}]\n",
            "Epoch 1, Loss: 0.1921498030424118\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9974411725997925}, {'label': 'hate', 'score': 0.002558809472247958}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9974411725997925}, {'label': 'hate', 'score': 0.002558809472247958}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9899416565895081}, {'label': 'hate', 'score': 0.010058339685201645}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9899416565895081}, {'label': 'hate', 'score': 0.010058339685201645}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999222993850708}, {'label': 'hate', 'score': 0.000776949746068567}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999222993850708}, {'label': 'hate', 'score': 0.000776949746068567}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999863862991333}, {'label': 'hate', 'score': 0.0001361151080345735}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999863862991333}, {'label': 'hate', 'score': 0.0001361151080345735}]\n",
            "Epoch 1, Loss: 0.21451249718666077\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998364448547363}, {'label': 'hate', 'score': 0.00016350459191016853}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998364448547363}, {'label': 'hate', 'score': 0.00016350459191016853}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995198249816895}, {'label': 'hate', 'score': 0.0004801521135959774}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995198249816895}, {'label': 'hate', 'score': 0.0004801521135959774}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953881502151489}, {'label': 'hate', 'score': 0.004611781798303127}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953881502151489}, {'label': 'hate', 'score': 0.004611781798303127}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997703433036804}, {'label': 'hate', 'score': 0.00022969389101490378}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997703433036804}, {'label': 'hate', 'score': 0.00022969389101490378}]\n",
            "Epoch 1, Loss: 0.19579418003559113\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9959096908569336}, {'label': 'hate', 'score': 0.004090269561856985}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9959096908569336}, {'label': 'hate', 'score': 0.004090269561856985}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.987119197845459}, {'label': 'hate', 'score': 0.012880761176347733}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.987119197845459}, {'label': 'hate', 'score': 0.012880761176347733}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999451220035553}, {'label': 'hate', 'score': 0.0005487260059453547}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999451220035553}, {'label': 'hate', 'score': 0.0005487260059453547}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9976235032081604}, {'label': 'hate', 'score': 0.002376481657847762}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9976235032081604}, {'label': 'hate', 'score': 0.002376481657847762}]\n",
            "Epoch 1, Loss: 0.2286841869354248\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981169700622559}, {'label': 'hate', 'score': 0.0018829959444701672}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981169700622559}, {'label': 'hate', 'score': 0.0018829959444701672}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990496039390564}, {'label': 'hate', 'score': 0.0009504226036369801}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990496039390564}, {'label': 'hate', 'score': 0.0009504226036369801}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997970461845398}, {'label': 'hate', 'score': 0.00020298734307289124}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997970461845398}, {'label': 'hate', 'score': 0.00020298734307289124}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9938457608222961}, {'label': 'hate', 'score': 0.0061542135663330555}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9938457608222961}, {'label': 'hate', 'score': 0.0061542135663330555}]\n",
            "Epoch 1, Loss: 0.17726284265518188\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986699819564819}, {'label': 'hate', 'score': 0.001329977298155427}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986699819564819}, {'label': 'hate', 'score': 0.001329977298155427}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987665414810181}, {'label': 'hate', 'score': 0.00123345956671983}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987665414810181}, {'label': 'hate', 'score': 0.00123345956671983}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998457431793213}, {'label': 'hate', 'score': 0.00015423654986079782}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998457431793213}, {'label': 'hate', 'score': 0.00015423654986079782}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985975623130798}, {'label': 'hate', 'score': 0.0014024446718394756}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985975623130798}, {'label': 'hate', 'score': 0.0014024446718394756}]\n",
            "Epoch 1, Loss: 0.19182439148426056\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996416568756104}, {'label': 'hate', 'score': 0.00035829481203109026}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996416568756104}, {'label': 'hate', 'score': 0.00035829481203109026}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9263548254966736}, {'label': 'hate', 'score': 0.07364518195390701}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9263548254966736}, {'label': 'hate', 'score': 0.07364518195390701}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9958785772323608}, {'label': 'hate', 'score': 0.004121417645365}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9958785772323608}, {'label': 'hate', 'score': 0.004121417645365}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9992914199829102}, {'label': 'hate', 'score': 0.0007085046381689608}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9992914199829102}, {'label': 'hate', 'score': 0.0007085046381689608}]\n",
            "Epoch 1, Loss: 0.1842094212770462\n",
            "API Response: [[{'label': 'nothate', 'score': 0.992449164390564}, {'label': 'hate', 'score': 0.007550903130322695}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.992449164390564}, {'label': 'hate', 'score': 0.007550903130322695}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.9446324110031128}, {'label': 'nothate', 'score': 0.055367596447467804}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.9446324110031128}, {'label': 'nothate', 'score': 0.055367596447467804}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9648534059524536}, {'label': 'hate', 'score': 0.03514665737748146}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9648534059524536}, {'label': 'hate', 'score': 0.03514665737748146}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997443556785583}, {'label': 'hate', 'score': 0.00025561521761119366}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997443556785583}, {'label': 'hate', 'score': 0.00025561521761119366}]\n",
            "Epoch 1, Loss: 0.18595856428146362\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995504021644592}, {'label': 'hate', 'score': 0.00044952897587791085}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995504021644592}, {'label': 'hate', 'score': 0.00044952897587791085}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9906131029129028}, {'label': 'hate', 'score': 0.009386936202645302}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9906131029129028}, {'label': 'hate', 'score': 0.009386936202645302}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997251629829407}, {'label': 'hate', 'score': 0.00027484039310365915}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997251629829407}, {'label': 'hate', 'score': 0.00027484039310365915}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9960589408874512}, {'label': 'hate', 'score': 0.003941065166145563}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9960589408874512}, {'label': 'hate', 'score': 0.003941065166145563}]\n",
            "Epoch 1, Loss: 0.33204346895217896\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9989257454872131}, {'label': 'hate', 'score': 0.0010742668528109789}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9989257454872131}, {'label': 'hate', 'score': 0.0010742668528109789}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9968072175979614}, {'label': 'hate', 'score': 0.0031927835661917925}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9968072175979614}, {'label': 'hate', 'score': 0.0031927835661917925}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998621940612793}, {'label': 'hate', 'score': 0.00013773524551652372}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998621940612793}, {'label': 'hate', 'score': 0.00013773524551652372}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.990829586982727}, {'label': 'hate', 'score': 0.009170472621917725}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.990829586982727}, {'label': 'hate', 'score': 0.009170472621917725}]\n",
            "Epoch 1, Loss: 0.1769074648618698\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8526836633682251}, {'label': 'hate', 'score': 0.14731639623641968}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8526836633682251}, {'label': 'hate', 'score': 0.14731639623641968}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9948256015777588}, {'label': 'hate', 'score': 0.005174428224563599}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9948256015777588}, {'label': 'hate', 'score': 0.005174428224563599}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9620023965835571}, {'label': 'hate', 'score': 0.03799758106470108}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9620023965835571}, {'label': 'hate', 'score': 0.03799758106470108}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9382529258728027}, {'label': 'hate', 'score': 0.06174704432487488}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9382529258728027}, {'label': 'hate', 'score': 0.06174704432487488}]\n",
            "Epoch 1, Loss: 0.24632689356803894\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9969624876976013}, {'label': 'hate', 'score': 0.0030374799389392138}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9969624876976013}, {'label': 'hate', 'score': 0.0030374799389392138}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998668432235718}, {'label': 'hate', 'score': 0.00013317976845428348}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998668432235718}, {'label': 'hate', 'score': 0.00013317976845428348}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998363256454468}, {'label': 'hate', 'score': 0.00016365839110221714}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998363256454468}, {'label': 'hate', 'score': 0.00016365839110221714}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996707439422607}, {'label': 'hate', 'score': 0.000329275120748207}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996707439422607}, {'label': 'hate', 'score': 0.000329275120748207}]\n",
            "Epoch 1, Loss: 0.16474448144435883\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991397857666016}, {'label': 'hate', 'score': 0.0008601364097557962}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991397857666016}, {'label': 'hate', 'score': 0.0008601364097557962}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9953126907348633}, {'label': 'hate', 'score': 0.004687233828008175}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9953126907348633}, {'label': 'hate', 'score': 0.004687233828008175}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999767005443573}, {'label': 'hate', 'score': 0.00023301452165469527}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999767005443573}, {'label': 'hate', 'score': 0.00023301452165469527}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996688365936279}, {'label': 'hate', 'score': 0.0003311526670586318}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996688365936279}, {'label': 'hate', 'score': 0.0003311526670586318}]\n",
            "Epoch 1, Loss: 0.19096042215824127\n",
            "API Response: [[{'label': 'nothate', 'score': 0.993560791015625}, {'label': 'hate', 'score': 0.006439219228923321}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.993560791015625}, {'label': 'hate', 'score': 0.006439219228923321}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997276663780212}, {'label': 'hate', 'score': 0.0002723630459513515}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997276663780212}, {'label': 'hate', 'score': 0.0002723630459513515}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9964566826820374}, {'label': 'hate', 'score': 0.003543244209140539}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9964566826820374}, {'label': 'hate', 'score': 0.003543244209140539}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999729335308075}, {'label': 'hate', 'score': 0.00027064321329817176}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999729335308075}, {'label': 'hate', 'score': 0.00027064321329817176}]\n",
            "Epoch 1, Loss: 0.1595742255449295\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9822706580162048}, {'label': 'hate', 'score': 0.01772933080792427}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9822706580162048}, {'label': 'hate', 'score': 0.01772933080792427}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9923531413078308}, {'label': 'hate', 'score': 0.007646927610039711}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9923531413078308}, {'label': 'hate', 'score': 0.007646927610039711}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996834993362427}, {'label': 'hate', 'score': 0.0003165141388308257}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996834993362427}, {'label': 'hate', 'score': 0.0003165141388308257}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999690055847168}, {'label': 'hate', 'score': 0.00031000637682154775}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999690055847168}, {'label': 'hate', 'score': 0.00031000637682154775}]\n",
            "Epoch 1, Loss: 0.15493598580360413\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995321035385132}, {'label': 'hate', 'score': 0.00046795926755294204}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995321035385132}, {'label': 'hate', 'score': 0.00046795926755294204}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.5302101373672485}, {'label': 'nothate', 'score': 0.46978986263275146}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.5302101373672485}, {'label': 'nothate', 'score': 0.46978986263275146}]\n",
            "API Response: [[{'label': 'hate', 'score': 0.7470793128013611}, {'label': 'nothate', 'score': 0.25292065739631653}]]\n",
            "First item of the response: [{'label': 'hate', 'score': 0.7470793128013611}, {'label': 'nothate', 'score': 0.25292065739631653}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9939737915992737}, {'label': 'hate', 'score': 0.006026208400726318}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9939737915992737}, {'label': 'hate', 'score': 0.006026208400726318}]\n",
            "Epoch 1, Loss: 0.2208692878484726\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995399713516235}, {'label': 'hate', 'score': 0.0004600436077453196}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995399713516235}, {'label': 'hate', 'score': 0.0004600436077453196}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998522996902466}, {'label': 'hate', 'score': 0.0001476555917179212}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998522996902466}, {'label': 'hate', 'score': 0.0001476555917179212}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997281432151794}, {'label': 'hate', 'score': 0.00027185690123587847}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997281432151794}, {'label': 'hate', 'score': 0.00027185690123587847}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987332224845886}, {'label': 'hate', 'score': 0.0012667725095525384}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987332224845886}, {'label': 'hate', 'score': 0.0012667725095525384}]\n",
            "Epoch 1, Loss: 0.15185733139514923\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998471736907959}, {'label': 'hate', 'score': 0.00015279966464731842}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998471736907959}, {'label': 'hate', 'score': 0.00015279966464731842}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9984979629516602}, {'label': 'hate', 'score': 0.0015020559076219797}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9984979629516602}, {'label': 'hate', 'score': 0.0015020559076219797}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999637246131897}, {'label': 'hate', 'score': 0.0003627809346653521}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999637246131897}, {'label': 'hate', 'score': 0.0003627809346653521}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9982343912124634}, {'label': 'hate', 'score': 0.001765639171935618}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9982343912124634}, {'label': 'hate', 'score': 0.001765639171935618}]\n",
            "Epoch 1, Loss: 0.22365400195121765\n",
            "API Response: [[{'label': 'nothate', 'score': 0.973936915397644}, {'label': 'hate', 'score': 0.026063092052936554}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.973936915397644}, {'label': 'hate', 'score': 0.026063092052936554}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995842576026917}, {'label': 'hate', 'score': 0.00041572892223484814}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995842576026917}, {'label': 'hate', 'score': 0.00041572892223484814}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997261166572571}, {'label': 'hate', 'score': 0.00027391279581934214}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997261166572571}, {'label': 'hate', 'score': 0.00027391279581934214}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996687173843384}, {'label': 'hate', 'score': 0.0003312606131657958}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996687173843384}, {'label': 'hate', 'score': 0.0003312606131657958}]\n",
            "Epoch 1, Loss: 0.14199870824813843\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9943549633026123}, {'label': 'hate', 'score': 0.00564504973590374}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9943549633026123}, {'label': 'hate', 'score': 0.00564504973590374}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997510313987732}, {'label': 'hate', 'score': 0.0002489741309545934}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997510313987732}, {'label': 'hate', 'score': 0.0002489741309545934}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9925469756126404}, {'label': 'hate', 'score': 0.007453070022165775}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9925469756126404}, {'label': 'hate', 'score': 0.007453070022165775}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998514652252197}, {'label': 'hate', 'score': 0.00014853621541988105}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998514652252197}, {'label': 'hate', 'score': 0.00014853621541988105}]\n",
            "Epoch 1, Loss: 0.20153552293777466\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9979629516601562}, {'label': 'hate', 'score': 0.0020370986312627792}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9979629516601562}, {'label': 'hate', 'score': 0.0020370986312627792}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997554421424866}, {'label': 'hate', 'score': 0.00024452569778077304}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997554421424866}, {'label': 'hate', 'score': 0.00024452569778077304}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9930428266525269}, {'label': 'hate', 'score': 0.0069571505300700665}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9930428266525269}, {'label': 'hate', 'score': 0.0069571505300700665}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9978419542312622}, {'label': 'hate', 'score': 0.0021580145694315434}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9978419542312622}, {'label': 'hate', 'score': 0.0021580145694315434}]\n",
            "Epoch 1, Loss: 0.13993526995182037\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999855637550354}, {'label': 'hate', 'score': 0.00014432205352932215}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999855637550354}, {'label': 'hate', 'score': 0.00014432205352932215}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999819815158844}, {'label': 'hate', 'score': 0.00018020212883129716}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999819815158844}, {'label': 'hate', 'score': 0.00018020212883129716}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996887445449829}, {'label': 'hate', 'score': 0.0003112810954917222}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996887445449829}, {'label': 'hate', 'score': 0.0003112810954917222}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9905123114585876}, {'label': 'hate', 'score': 0.009487729519605637}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9905123114585876}, {'label': 'hate', 'score': 0.009487729519605637}]\n",
            "Epoch 1, Loss: 0.14991052448749542\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999235987663269}, {'label': 'hate', 'score': 0.0007639938266947865}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999235987663269}, {'label': 'hate', 'score': 0.0007639938266947865}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9851183891296387}, {'label': 'hate', 'score': 0.014881610870361328}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9851183891296387}, {'label': 'hate', 'score': 0.014881610870361328}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999554455280304}, {'label': 'hate', 'score': 0.00044551899190992117}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999554455280304}, {'label': 'hate', 'score': 0.00044551899190992117}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.978411078453064}, {'label': 'hate', 'score': 0.021588876843452454}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.978411078453064}, {'label': 'hate', 'score': 0.021588876843452454}]\n",
            "Epoch 1, Loss: 0.16633360087871552\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995967745780945}, {'label': 'hate', 'score': 0.0004032669821754098}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995967745780945}, {'label': 'hate', 'score': 0.0004032669821754098}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998589754104614}, {'label': 'hate', 'score': 0.0001410169352311641}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998589754104614}, {'label': 'hate', 'score': 0.0001410169352311641}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.99750816822052}, {'label': 'hate', 'score': 0.002491849474608898}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.99750816822052}, {'label': 'hate', 'score': 0.002491849474608898}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9987561702728271}, {'label': 'hate', 'score': 0.001243808539584279}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9987561702728271}, {'label': 'hate', 'score': 0.001243808539584279}]\n",
            "Epoch 1, Loss: 0.16730442643165588\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997074007987976}, {'label': 'hate', 'score': 0.0002925176522694528}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997074007987976}, {'label': 'hate', 'score': 0.0002925176522694528}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9991645812988281}, {'label': 'hate', 'score': 0.0008354890160262585}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9991645812988281}, {'label': 'hate', 'score': 0.0008354890160262585}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997954964637756}, {'label': 'hate', 'score': 0.0002045088476734236}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997954964637756}, {'label': 'hate', 'score': 0.0002045088476734236}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9996944665908813}, {'label': 'hate', 'score': 0.00030555741977877915}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9996944665908813}, {'label': 'hate', 'score': 0.00030555741977877915}]\n",
            "Epoch 1, Loss: 0.14831000566482544\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9993723034858704}, {'label': 'hate', 'score': 0.0006276954663917422}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9993723034858704}, {'label': 'hate', 'score': 0.0006276954663917422}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997945427894592}, {'label': 'hate', 'score': 0.00020553398644551635}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997945427894592}, {'label': 'hate', 'score': 0.00020553398644551635}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9945058226585388}, {'label': 'hate', 'score': 0.00549412053078413}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9945058226585388}, {'label': 'hate', 'score': 0.00549412053078413}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994801878929138}, {'label': 'hate', 'score': 0.0005198571016080678}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994801878929138}, {'label': 'hate', 'score': 0.0005198571016080678}]\n",
            "Epoch 1, Loss: 0.14397333562374115\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998462200164795}, {'label': 'hate', 'score': 0.0001537364296382293}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998462200164795}, {'label': 'hate', 'score': 0.0001537364296382293}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9916867613792419}, {'label': 'hate', 'score': 0.008313254453241825}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9916867613792419}, {'label': 'hate', 'score': 0.008313254453241825}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9961148500442505}, {'label': 'hate', 'score': 0.0038851669523864985}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9961148500442505}, {'label': 'hate', 'score': 0.0038851669523864985}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.7941713333129883}, {'label': 'hate', 'score': 0.20582862198352814}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.7941713333129883}, {'label': 'hate', 'score': 0.20582862198352814}]\n",
            "Epoch 1, Loss: 0.1607045829296112\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9674339294433594}, {'label': 'hate', 'score': 0.03256608918309212}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9674339294433594}, {'label': 'hate', 'score': 0.03256608918309212}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9985349178314209}, {'label': 'hate', 'score': 0.0014650982338935137}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9985349178314209}, {'label': 'hate', 'score': 0.0014650982338935137}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999859094619751}, {'label': 'hate', 'score': 0.00014092150377109647}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999859094619751}, {'label': 'hate', 'score': 0.00014092150377109647}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9995378255844116}, {'label': 'hate', 'score': 0.0004621621628757566}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9995378255844116}, {'label': 'hate', 'score': 0.0004621621628757566}]\n",
            "Epoch 1, Loss: 0.13734757900238037\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998652935028076}, {'label': 'hate', 'score': 0.00013465312076732516}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998652935028076}, {'label': 'hate', 'score': 0.00013465312076732516}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9956303834915161}, {'label': 'hate', 'score': 0.0043695783242583275}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9956303834915161}, {'label': 'hate', 'score': 0.0043695783242583275}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9754873514175415}, {'label': 'hate', 'score': 0.024512596428394318}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9754873514175415}, {'label': 'hate', 'score': 0.024512596428394318}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9572814702987671}, {'label': 'hate', 'score': 0.042718540877103806}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9572814702987671}, {'label': 'hate', 'score': 0.042718540877103806}]\n",
            "Epoch 1, Loss: 0.1457860767841339\n",
            "API Response: [[{'label': 'nothate', 'score': 0.8481703400611877}, {'label': 'hate', 'score': 0.15182967483997345}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.8481703400611877}, {'label': 'hate', 'score': 0.15182967483997345}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990069270133972}, {'label': 'hate', 'score': 0.000993156572803855}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990069270133972}, {'label': 'hate', 'score': 0.000993156572803855}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9975550770759583}, {'label': 'hate', 'score': 0.0024449352640658617}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9975550770759583}, {'label': 'hate', 'score': 0.0024449352640658617}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.00014687975635752082}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998531341552734}, {'label': 'hate', 'score': 0.00014687975635752082}]\n",
            "Epoch 1, Loss: 0.1848861128091812\n",
            "API Response: [[{'label': 'nothate', 'score': 0.999832272529602}, {'label': 'hate', 'score': 0.00016772164963185787}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.999832272529602}, {'label': 'hate', 'score': 0.00016772164963185787}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9986819624900818}, {'label': 'hate', 'score': 0.001318030059337616}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9986819624900818}, {'label': 'hate', 'score': 0.001318030059337616}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998359680175781}, {'label': 'hate', 'score': 0.00016398112347815186}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998359680175781}, {'label': 'hate', 'score': 0.00016398112347815186}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9981793165206909}, {'label': 'hate', 'score': 0.0018206475069746375}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9981793165206909}, {'label': 'hate', 'score': 0.0018206475069746375}]\n",
            "Epoch 1, Loss: 0.22538818418979645\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998605251312256}, {'label': 'hate', 'score': 0.00013943809608463198}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998605251312256}, {'label': 'hate', 'score': 0.00013943809608463198}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998468160629272}, {'label': 'hate', 'score': 0.00015311512106563896}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998468160629272}, {'label': 'hate', 'score': 0.00015311512106563896}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9878503680229187}, {'label': 'hate', 'score': 0.012149687856435776}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9878503680229187}, {'label': 'hate', 'score': 0.012149687856435776}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9827674627304077}, {'label': 'hate', 'score': 0.017232617363333702}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9827674627304077}, {'label': 'hate', 'score': 0.017232617363333702}]\n",
            "Epoch 1, Loss: 0.16240106523036957\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9994463324546814}, {'label': 'hate', 'score': 0.000553652411326766}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9994463324546814}, {'label': 'hate', 'score': 0.000553652411326766}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997908473014832}, {'label': 'hate', 'score': 0.00020914114429615438}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997908473014832}, {'label': 'hate', 'score': 0.00020914114429615438}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9997655749320984}, {'label': 'hate', 'score': 0.00023438261996489018}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9997655749320984}, {'label': 'hate', 'score': 0.00023438261996489018}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.992295503616333}, {'label': 'hate', 'score': 0.007704508490860462}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.992295503616333}, {'label': 'hate', 'score': 0.007704508490860462}]\n",
            "Epoch 1, Loss: 0.14035575091838837\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9971315860748291}, {'label': 'hate', 'score': 0.002868358278647065}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9971315860748291}, {'label': 'hate', 'score': 0.002868358278647065}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9790626764297485}, {'label': 'hate', 'score': 0.020937364548444748}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9790626764297485}, {'label': 'hate', 'score': 0.020937364548444748}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9910581111907959}, {'label': 'hate', 'score': 0.008941968902945518}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9910581111907959}, {'label': 'hate', 'score': 0.008941968902945518}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9983845949172974}, {'label': 'hate', 'score': 0.0016154699260368943}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9983845949172974}, {'label': 'hate', 'score': 0.0016154699260368943}]\n",
            "Epoch 1, Loss: 0.15143153071403503\n",
            "API Response: [[{'label': 'nothate', 'score': 0.997028648853302}, {'label': 'hate', 'score': 0.0029713399708271027}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.997028648853302}, {'label': 'hate', 'score': 0.0029713399708271027}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9990768432617188}, {'label': 'hate', 'score': 0.0009230978903360665}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9990768432617188}, {'label': 'hate', 'score': 0.0009230978903360665}]\n",
            "API Response: [[{'label': 'nothate', 'score': 0.9998583793640137}, {'label': 'hate', 'score': 0.0001415590668329969}]]\n",
            "First item of the response: [{'label': 'nothate', 'score': 0.9998583793640137}, {'label': 'hate', 'score': 0.0001415590668329969}]\n",
            "Rate limit reached with current token, switching to next token.\n",
            "All tokens have reached rate limits. Training will stop and model will be saved.\n",
            "All tokens exhausted\n",
            "Model saved as /home/ridit.jain.21cse/llma/model_final2.pth\n"
          ]
        }
      ],
      "source": [
        "def train(model, data_loader, optimizer, device, epochs=3):\n",
        "    model.train()\n",
        "    try:\n",
        "        for epoch in range(epochs):\n",
        "            for input_ids, attention_mask, labels in data_loader:\n",
        "                input_ids = input_ids.to(device)\n",
        "                attention_mask = attention_mask.to(device)\n",
        "                labels = labels.to(device)\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "                outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n",
        "                logits = torch.clamp(outputs.logits, min=-20, max=20)\n",
        "\n",
        "                try:\n",
        "                    predictions = tokenizer.batch_decode(logits.argmax(dim=-1), skip_special_tokens=True)\n",
        "                except Exception as e:\n",
        "                    print(\"Decoding failed with error:\", e)\n",
        "                    print(\"Faulty Logits:\", logits)\n",
        "                    continue\n",
        "\n",
        "                rewards = calculate_reward(predictions, device)\n",
        "                weighted_loss = (outputs.loss * rewards.mean())\n",
        "                weighted_loss.backward()\n",
        "                optimizer.step()\n",
        "\n",
        "                print(f'Epoch {epoch+1}, Loss: {outputs.loss.item()}')\n",
        "\n",
        "    except RuntimeError as e:\n",
        "        print(str(e))\n",
        "\n",
        "\n",
        "train(model, data_loader, optimizer, device)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Saving the Model"
      ],
      "metadata": {
        "id": "Iar1yYVxikGS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UdPf43bmfyz4",
        "outputId": "37afc731-0f0c-40ae-8ef7-aaa0442db2d1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model saved as /home/ridit.jain.21cse/llma/model_final2.pth\n"
          ]
        }
      ],
      "source": [
        "model_save_path = '/home/ridit.jain.21cse/llma/model_final2.pth'\n",
        "torch.save(model.state_dict(), model_save_path)\n",
        "print(f\"Model saved as {model_save_path}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Evaluation and Comparison"
      ],
      "metadata": {
        "id": "k5otq4YlirC1"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yaxyQVTjfyz5",
        "outputId": "6d33f8cd-7b2e-45d1-d74a-248c64f9e6ad"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "No model was supplied, defaulted to distilbert/distilbert-base-uncased-finetuned-sst-2-english and revision af0f99b (https://huggingface.co/distilbert/distilbert-base-uncased-finetuned-sst-2-english).\n",
            "Using a pipeline without specifying a model name and revision in production is not recommended.\n",
            "Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.\n",
            "/home/ridit.jain.21cse/.local/lib/python3.8/site-packages/nltk/translate/bleu_score.py:552: UserWarning: \n",
            "The hypothesis contains 0 counts of 2-gram overlaps.\n",
            "Therefore the BLEU score evaluates to 0, independently of\n",
            "how many N-gram overlaps of lower order it contains.\n",
            "Consider using lower n-gram order or use SmoothingFunction()\n",
            "  warnings.warn(_msg)\n",
            "/home/ridit.jain.21cse/.local/lib/python3.8/site-packages/nltk/translate/bleu_score.py:552: UserWarning: \n",
            "The hypothesis contains 0 counts of 3-gram overlaps.\n",
            "Therefore the BLEU score evaluates to 0, independently of\n",
            "how many N-gram overlaps of lower order it contains.\n",
            "Consider using lower n-gram order or use SmoothingFunction()\n",
            "  warnings.warn(_msg)\n",
            "/home/ridit.jain.21cse/.local/lib/python3.8/site-packages/nltk/translate/bleu_score.py:552: UserWarning: \n",
            "The hypothesis contains 0 counts of 4-gram overlaps.\n",
            "Therefore the BLEU score evaluates to 0, independently of\n",
            "how many N-gram overlaps of lower order it contains.\n",
            "Consider using lower n-gram order or use SmoothingFunction()\n",
            "  warnings.warn(_msg)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from transformers import pipeline, T5Tokenizer, T5ForConditionalGeneration\n",
        "from nltk.translate.bleu_score import sentence_bleu\n",
        "from rouge import Rouge\n",
        "import torch\n",
        "\n",
        "# Load sentiment analysis and toxicity detection models\n",
        "sentiment_analyzer = pipeline(\"sentiment-analysis\")\n",
        "toxicity_analyzer = pipeline(\"text-classification\", model=\"facebook/roberta-hate-speech-dynabench-r4-target\")\n",
        "\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/home/ridit.jain.21cse/llma/testdatallm.csv')\n",
        "\n",
        "def generate_summary(text, model, tokenizer, max_length=150):\n",
        "    try:\n",
        "        inputs = tokenizer.encode(\"summarize: \" + text, return_tensors=\"pt\", max_length=512, truncation=True)\n",
        "        inputs = inputs.to(device)\n",
        "        summary_ids = model.generate(inputs, max_length=max_length, min_length=30, length_penalty=2.0, num_beams=4, early_stopping=True)\n",
        "        summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n",
        "        return summary\n",
        "    except Exception as e:\n",
        "        print(f\"Error generating summary for text: {text[:30]}...: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "df['Generated_Summary'] = df['Abstract'].apply(lambda x: generate_summary(x, model, tokenizer))\n",
        "\n",
        "def evaluate_positivity(summary):\n",
        "    if summary:\n",
        "        result = sentiment_analyzer(summary)[0]\n",
        "        return result['score'] if result['label'] == 'POSITIVE' else 0\n",
        "    return 0\n",
        "\n",
        "def evaluate_toxicity(summary):\n",
        "    if summary:\n",
        "        result = toxicity_analyzer(summary)[0]\n",
        "        return result['score'] if result['label'] == 'LABEL_1' else 0\n",
        "    return 0\n",
        "\n",
        "df['Positivity_Score'] = df['Generated_Summary'].apply(evaluate_positivity)\n",
        "df['Toxicity_Score'] = df['Generated_Summary'].apply(evaluate_toxicity)\n",
        "\n",
        "rouge = Rouge()\n",
        "\n",
        "def compute_bleu(reference, hypothesis):\n",
        "    if hypothesis:\n",
        "        reference = [reference.split()]\n",
        "        hypothesis = hypothesis.split()\n",
        "        return sentence_bleu(reference, hypothesis)\n",
        "    return 0\n",
        "\n",
        "def compute_rouge(reference, hypothesis):\n",
        "    if hypothesis:\n",
        "        scores = rouge.get_scores(hypothesis, reference, avg=True)\n",
        "        return scores\n",
        "    return {\"rouge-l\": {\"f\": 0}}\n",
        "\n",
        "df['BLEU_Score'] = df.apply(lambda row: compute_bleu(row['Headline'], row['Generated_Summary']), axis=1)\n",
        "df['ROUGE_Score'] = df.apply(lambda row: compute_rouge(row['Headline'], row['Generated_Summary']), axis=1)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7NJcVllDfyz5"
      },
      "outputs": [],
      "source": [
        "positivity_scores = df[df['Positivity_Score'] != 0]['Positivity_Score']\n",
        "average_positivity = positivity_scores.mean()\n",
        "\n",
        "average_toxicity = df['Toxicity_Score'].mean()\n",
        "\n",
        "bleu_scores = df[df['BLEU_Score'] != 0]['BLEU_Score']\n",
        "average_bleu = bleu_scores.mean()\n",
        "\n",
        "rouge_scores = df[df['ROUGE_Score'].apply(lambda x: x['rouge-l']['f']) != 0]['ROUGE_Score'].apply(lambda x: x['rouge-l']['f'])\n",
        "average_rouge = rouge_scores.mean()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ywYD_G3dfyz5",
        "outputId": "5c3636cc-e735-4b82-8805-4c575c9e46e2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Average Positivity Score: 0.993049042565482\n",
            "Average Toxicity Score: 0.0\n",
            "Average BLEU Score: 0.253256932323494\n",
            "Average ROUGE-L Score: 0.28823452650831183\n"
          ]
        }
      ],
      "source": [
        "print(f\"Average Positivity Score: {average_positivity}\")\n",
        "print(f\"Average Toxicity Score: {average_toxicity}\")\n",
        "print(f\"Average BLEU Score: {average_bleu}\")\n",
        "print(f\"Average ROUGE-L Score: {average_rouge}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2qISWpC4fyz5",
        "outputId": "eca8b442-ff23-4ed9-e9ab-13d16bc27815"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Headline</th>\n",
              "      <th>Abstract</th>\n",
              "      <th>Generated_Summary</th>\n",
              "      <th>Positivity_Score</th>\n",
              "      <th>Toxicity_Score</th>\n",
              "      <th>BLEU_Score</th>\n",
              "      <th>ROUGE_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Positives With Roots In Tragedy On Campus</td>\n",
              "      <td>Some of the best mental health programs for co...</td>\n",
              "      <td>Pima Community College in Tucson — alma mater ...</td>\n",
              "      <td>0.996017</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>{'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Good News From the Middle East (Really)</td>\n",
              "      <td>Recent progress by President Mahmoud Abbas of ...</td>\n",
              "      <td>Israel should cooperate with Abbas to push for...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>8.614912e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.14285714285714285, 'p': 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>In News Conference, Rex Ryan Is Willing to Adm...</td>\n",
              "      <td>The transcript of Coach Rex Ryan’s news confer...</td>\n",
              "      <td>Rex Ryan admits he was wrong when he said no o...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>4.234402e-155</td>\n",
              "      <td>{'rouge-1': {'r': 0.3, 'p': 0.1578947368421052...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>$10 Million in Pay for Bank of America Chief</td>\n",
              "      <td>Brian T. Moynihan is to receive a $9.05 millio...</td>\n",
              "      <td>Brian T. Moynihan is to receive a $9.05 millio...</td>\n",
              "      <td>0.966948</td>\n",
              "      <td>0</td>\n",
              "      <td>8.319100e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.1111111111111111, 'p': 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Why Parents Fear the Needle</td>\n",
              "      <td>How to finally change the conversation on immu...</td>\n",
              "      <td>Talking about immunization isn't the only way ...</td>\n",
              "      <td>0.996700</td>\n",
              "      <td>0</td>\n",
              "      <td>8.412066e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.2, 'p': 0.0625, 'f': 0.095...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Contador Questions Process and Says He’ll Appe...</td>\n",
              "      <td>Alberto Contador said that he would not stand ...</td>\n",
              "      <td>Contador says he won't stand for any punishmen...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>9.504404e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.25, 'p': 0.125, 'f': 0.166...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>A Strong Night for ‘Idol’ — and its Rivals</td>\n",
              "      <td>While Fox’s “American Idol” remained the domin...</td>\n",
              "      <td>Fox’s “American Idol” remained the dominant ra...</td>\n",
              "      <td>0.998155</td>\n",
              "      <td>0</td>\n",
              "      <td>9.504404e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.2222222222222222, 'p': 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Rh Factor, 1944</td>\n",
              "      <td>The so-called Rh factor makes few headlines th...</td>\n",
              "      <td>The Rh factor is a serious public-health conce...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>8.067983e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.3333333333333333, 'p': 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Another Afghanistan Marathon for Pentagon: Sev...</td>\n",
              "      <td>The Tricyle Theater will present two special p...</td>\n",
              "      <td>The Tricyle Theater in Washington, D.C., will ...</td>\n",
              "      <td>0.998021</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>{'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Praise for Obama, From the Right and Left</td>\n",
              "      <td>Reaction to President Obama’s speech at the me...</td>\n",
              "      <td>President Obama’s speech at the memorial servi...</td>\n",
              "      <td>0.999425</td>\n",
              "      <td>0</td>\n",
              "      <td>8.319100e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.125, 'p': 0.04545454545454...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Spanish Officials Propose One-Year Ban for Con...</td>\n",
              "      <td>Spanish cycling officials have chosen to be le...</td>\n",
              "      <td>Contador will be banned for one year instead o...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1.107090e-231</td>\n",
              "      <td>{'rouge-1': {'r': 0.42857142857142855, 'p': 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Nelson Mandela Returns Home From Hospital</td>\n",
              "      <td>The 92-year-old former president was treated f...</td>\n",
              "      <td>Former US President George W. Bush has been ho...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>{'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>The Chicken, The Egg, The Media and Sarah Palin</td>\n",
              "      <td>Palin stirs passions among many people, and th...</td>\n",
              "      <td>Palin may not be able to win a presidential el...</td>\n",
              "      <td>0.996077</td>\n",
              "      <td>0</td>\n",
              "      <td>8.231055e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.14285714285714285, 'p': 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>U.S. Suspends 2 Contractors That Failed to Pay...</td>\n",
              "      <td>The suspension bars Bennett-Fouch Associates o...</td>\n",
              "      <td>Two companies have been suspended from America...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>7.992219e-232</td>\n",
              "      <td>{'rouge-1': {'r': 0.2, 'p': 0.0740740740740740...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Belarus Ejects European Watchdog Agency</td>\n",
              "      <td>The decision by the government appears to be a...</td>\n",
              "      <td>The government's decision to impose a moratori...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>{'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             Headline   \n",
              "0           Positives With Roots In Tragedy On Campus  \\\n",
              "1             Good News From the Middle East (Really)   \n",
              "2   In News Conference, Rex Ryan Is Willing to Adm...   \n",
              "3        $10 Million in Pay for Bank of America Chief   \n",
              "4                         Why Parents Fear the Needle   \n",
              "5   Contador Questions Process and Says He’ll Appe...   \n",
              "6          A Strong Night for ‘Idol’ — and its Rivals   \n",
              "7                                     Rh Factor, 1944   \n",
              "8   Another Afghanistan Marathon for Pentagon: Sev...   \n",
              "9           Praise for Obama, From the Right and Left   \n",
              "10  Spanish Officials Propose One-Year Ban for Con...   \n",
              "11          Nelson Mandela Returns Home From Hospital   \n",
              "12    The Chicken, The Egg, The Media and Sarah Palin   \n",
              "13  U.S. Suspends 2 Contractors That Failed to Pay...   \n",
              "14            Belarus Ejects European Watchdog Agency   \n",
              "\n",
              "                                             Abstract   \n",
              "0   Some of the best mental health programs for co...  \\\n",
              "1   Recent progress by President Mahmoud Abbas of ...   \n",
              "2   The transcript of Coach Rex Ryan’s news confer...   \n",
              "3   Brian T. Moynihan is to receive a $9.05 millio...   \n",
              "4   How to finally change the conversation on immu...   \n",
              "5   Alberto Contador said that he would not stand ...   \n",
              "6   While Fox’s “American Idol” remained the domin...   \n",
              "7   The so-called Rh factor makes few headlines th...   \n",
              "8   The Tricyle Theater will present two special p...   \n",
              "9   Reaction to President Obama’s speech at the me...   \n",
              "10  Spanish cycling officials have chosen to be le...   \n",
              "11  The 92-year-old former president was treated f...   \n",
              "12  Palin stirs passions among many people, and th...   \n",
              "13  The suspension bars Bennett-Fouch Associates o...   \n",
              "14  The decision by the government appears to be a...   \n",
              "\n",
              "                                    Generated_Summary  Positivity_Score   \n",
              "0   Pima Community College in Tucson — alma mater ...          0.996017  \\\n",
              "1   Israel should cooperate with Abbas to push for...          0.000000   \n",
              "2   Rex Ryan admits he was wrong when he said no o...          0.000000   \n",
              "3   Brian T. Moynihan is to receive a $9.05 millio...          0.966948   \n",
              "4   Talking about immunization isn't the only way ...          0.996700   \n",
              "5   Contador says he won't stand for any punishmen...          0.000000   \n",
              "6   Fox’s “American Idol” remained the dominant ra...          0.998155   \n",
              "7   The Rh factor is a serious public-health conce...          0.000000   \n",
              "8   The Tricyle Theater in Washington, D.C., will ...          0.998021   \n",
              "9   President Obama’s speech at the memorial servi...          0.999425   \n",
              "10  Contador will be banned for one year instead o...          0.000000   \n",
              "11  Former US President George W. Bush has been ho...          0.000000   \n",
              "12  Palin may not be able to win a presidential el...          0.996077   \n",
              "13  Two companies have been suspended from America...          0.000000   \n",
              "14  The government's decision to impose a moratori...          0.000000   \n",
              "\n",
              "    Toxicity_Score     BLEU_Score   \n",
              "0                0   0.000000e+00  \\\n",
              "1                0  8.614912e-232   \n",
              "2                0  4.234402e-155   \n",
              "3                0  8.319100e-232   \n",
              "4                0  8.412066e-232   \n",
              "5                0  9.504404e-232   \n",
              "6                0  9.504404e-232   \n",
              "7                0  8.067983e-232   \n",
              "8                0   0.000000e+00   \n",
              "9                0  8.319100e-232   \n",
              "10               0  1.107090e-231   \n",
              "11               0   0.000000e+00   \n",
              "12               0  8.231055e-232   \n",
              "13               0  7.992219e-232   \n",
              "14               0   0.000000e+00   \n",
              "\n",
              "                                          ROUGE_Score  \n",
              "0   {'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...  \n",
              "1   {'rouge-1': {'r': 0.14285714285714285, 'p': 0....  \n",
              "2   {'rouge-1': {'r': 0.3, 'p': 0.1578947368421052...  \n",
              "3   {'rouge-1': {'r': 0.1111111111111111, 'p': 0.0...  \n",
              "4   {'rouge-1': {'r': 0.2, 'p': 0.0625, 'f': 0.095...  \n",
              "5   {'rouge-1': {'r': 0.25, 'p': 0.125, 'f': 0.166...  \n",
              "6   {'rouge-1': {'r': 0.2222222222222222, 'p': 0.0...  \n",
              "7   {'rouge-1': {'r': 0.3333333333333333, 'p': 0.0...  \n",
              "8   {'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...  \n",
              "9   {'rouge-1': {'r': 0.125, 'p': 0.04545454545454...  \n",
              "10  {'rouge-1': {'r': 0.42857142857142855, 'p': 0....  \n",
              "11  {'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...  \n",
              "12  {'rouge-1': {'r': 0.14285714285714285, 'p': 0....  \n",
              "13  {'rouge-1': {'r': 0.2, 'p': 0.0740740740740740...  \n",
              "14  {'rouge-1': {'r': 0.0, 'p': 0.0, 'f': 0.0}, 'r...  "
            ]
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JUP9StGTfyz6",
        "outputId": "51e63406-280e-4671-f36f-d45989a0ba80"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Histograms for positivity and toxicity scores\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(df['Positivity_Score'], bins=20, alpha=0.7, label='Positivity Score')\n",
        "plt.xlabel('Score')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Positivity Scores')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(df['Toxicity_Score'], bins=20, alpha=0.7, label='Toxicity Score', color='orange')\n",
        "plt.xlabel('Score')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Toxicity Scores')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8uOIl1cmfyz6",
        "outputId": "715dac85-254f-47fb-8229-c664e366938f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA04AAAIQCAYAAAC2Uz6yAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAA9hAAAPYQGoP6dpAABNJ0lEQVR4nO3de3zO9f/H8ee12Xk2h53C2Bph5dQcQqLCqIiIEKOEIqf6llXO369DPyQSX8qx5FTpQKTlbCU0FXI+FYZkYw6z7f37o9uur8s2n23G5fC4327Xrfb+vD/vz+tzXZ9rruf1+XzesxljjAAAAAAAOXJxdgEAAAAAcLMjOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAG4ZcycOVM2m00HDhy46epo0KCBGjRocMNrcdZ28yIxMVGtW7dW8eLFZbPZNH78+AIb+8CBA7LZbJo5c6ZD+7Jly1S1alV5enrKZrPp9OnTkqQ5c+aoQoUKcnNzU5EiRQqsDmRvyJAhstlszi4DAAoEwQmA0zRv3lze3t46c+ZMjn06dOggd3d3/fXXXzewspvL9u3bNWTIEKcHxvzq16+fli9frtjYWM2ZM0dNmjTJsa/NZrM/ChUqpGLFiikqKkp9+vTR9u3bc7W9v/76S23atJGXl5cmTZqkOXPmyMfHR7///rs6d+6siIgITZs2TVOnTi2oXSxweX3NMwOKi4uLDh8+nGV5cnKyvLy8ZLPZ1KtXr3zVNGLECC1evDhf6xaUdevWqWnTpipZsqQ8PT1VunRpNWvWTHPnznVqXQDuEAYAnGTevHlGkpk1a1a2y1NSUoyPj49p1qyZMcaYtLQ0c/78eZORkXEjy8xixowZRpLZv3+/ve3ixYvm4sWL12V7CxcuNJLMypUrsyy7ntstKMHBwaZDhw656ivJNGrUyMyZM8fMnj3bTJw40XTt2tX4+/ubQoUKmbFjxzr0z8jIMOfPnzdpaWn2tm+++cZIMitWrHDoO3nyZCPJ7N69+9p36jq72muencGDBxtJxtPT04wePTrL8hkzZhhPT08jyfTs2TNfNfn4+JiYmJg8rXPp0iVz/vz5fG3vSgsWLDA2m81Uq1bNjB492kydOtXExsaaunXrmgYNGhTINgDgago5LbEBuOM1b95chQsX1ty5c9WpU6csy7/44gulpKSoQ4cOkiRXV1e5urre6DJzxd3d/Y7abl4cP348T5fF3XPPPXr22Wcd2kaNGqVmzZrplVdeUYUKFfTYY49J+ucMlaenZ5btScqyzZzar0VKSop8fHwKbLxr9dhjj+mTTz7Ra6+95tA+d+5cPf744/r0009vSB2Zz0uhQoVUqFDBfNQYMmSIIiMj9cMPP2Q57jNf2xvBGKMLFy7Iy8vrhm0TwM2BS/UAOI2Xl5eeeuopxcXFZfvBZ+7cuSpcuLCaN28uKft7izZt2qTo6GgFBATIy8tL4eHheu655+zLV61aJZvNplWrVjmMnd29Mb/88os6d+6su+++W56engoJCdFzzz2Xq8sEr7zXKCwszOGys8sfmbUcPHhQL730ksqXLy8vLy8VL15cTz/9tMP+zZw5U08//bQk6eGHH84yRnb3OB0/flzPP/+8goOD5enpqSpVqmjWrFnZ7v+YMWM0depURUREyMPDQzVq1NBPP/1kub+StG/fPj399NMqVqyYvL299cADD2jJkiUOtdtsNhljNGnSJHvt+VG8eHHNmzdPhQoV0n/+858s+5H5OjZo0EAxMTGSpBo1ashms6lz584KCwvT4MGDJUmBgYGy2WwaMmSIfZxvvvlG9erVk4+PjwoXLqzHH39c27Ztc6ihc+fO8vX11d69e/XYY4+pcOHC9lCfkZGh8ePH695775Wnp6eCg4PVvXt3/f333w5jhIWF6YknntC6detUs2ZNeXp66u6779bs2bMdnrerveZX0759eyUkJOj333+3tx07dkzff/+92rdvn+06Fy9e1ODBg1W2bFl5eHgoNDRUr732mi5evGjvY7PZlJKSolmzZtnr6dy5s6T/XSa4fft2tW/fXkWLFtWDDz7osOxKH330kWrWrClvb28VLVpUDz30kL799tur7tvevXtVo0aNbL8sCAoKcvg5IyND7777ripVqiRPT08FBgaqSZMm2rRpk71PWlqahg8fbj/2w8LC9MYbbzjst/S/12z58uWqXr26vLy89N///leSdPr0afXt21ehoaHy8PBQ2bJlNXr0aGVkZDiMMW/ePEVFRalw4cLy8/NTpUqV9O677151fwHcfDjjBMCpOnTooFmzZmnBggUO916cOnVKy5cvV7t27XL8Zvf48eNq3LixAgMDNWDAABUpUkQHDhzQZ599lq9aVqxYoX379qlLly4KCQnRtm3bNHXqVG3btk0//PBDnj70jx8/XmfPnnVoe+edd5SQkKDixYtLkn766Sdt2LBBzzzzjEqVKqUDBw5o8uTJatCggbZv3y5vb2899NBD6t27tyZMmKA33nhDFStWlCT7f690/vx5NWjQQHv27FGvXr0UHh6uhQsXqnPnzjp9+rT69Onj0H/u3Lk6c+aMunfvLpvNprfffltPPfWU9u3bJzc3txz3LzExUXXq1NG5c+fUu3dvFS9eXLNmzVLz5s21aNEitWzZUg899JDmzJmjjh07qlGjRtmeVcyL0qVLq379+lq5cqWSk5Pl5+eXpc+bb76p8uXLa+rUqRo2bJjCw8MVERGhFi1aaPbs2fr88881efJk+fr6qnLlypL+mTAiJiZG0dHRGj16tM6dO6fJkyfrwQcf1M8//6ywsDD7+GlpaYqOjtaDDz6oMWPGyNvbW5LUvXt3zZw5U126dFHv3r21f/9+vffee/r555+1fv16h+dyz549at26tZ5//nnFxMRo+vTp6ty5s6KionTvvffm+TW/3EMPPaRSpUpp7ty5GjZsmCRp/vz58vX11eOPP56lf0ZGhpo3b65169apW7duqlixon799Ve988472rVrl/2epjlz5qhr166qWbOmunXrJkmKiIhwGOvpp59WuXLlNGLECBljcqxx6NChGjJkiOrUqaNhw4bJ3d1dP/74o77//ns1btw4x/XKlCmjuLg4/fHHHypVqtRVn4fnn39eM2fOVNOmTdW1a1elpaVp7dq1+uGHH1S9enVJUteuXTVr1iy1bt1ar7zyin788UeNHDlSO3bs0Oeff+4w3s6dO9WuXTt1795dL7zwgsqXL69z586pfv36+vPPP9W9e3eVLl1aGzZsUGxsrI4ePWqfBGXFihVq166dHn30UY0ePVqStGPHDq1fvz7L+xHATc7JlwoCuMOlpaWZu+66y9SuXduhfcqUKUaSWb58ub3tynuLPv/8cyPJ/PTTTzmOv3LlymzvFdm/f7+RZGbMmGFvO3fuXJb1P/nkEyPJrFmzJsc6jDGmfv36pn79+jnWsWDBAiPJDBs27Krbi4+PN5LM7Nmz7W1Xu9/lyu2OHz/eSDIfffSRvS01NdXUrl3b+Pr6muTkZIf9L168uDl16pS97xdffGEk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cePu7q5mzZqpWbNmysjI0EsvvaT//ve/GjhwYJazXgBuXlyqB+CmkHl2adCgQUpISLA82yT9E3au/JY+88NY5uV6ZcqUkaurq/1+g0zvv/++w8+ZZwGuHC9zZqy8+u677/TWW2/pzTffVIsWLbLt4+rqmmV7EydOzHI2LPPvBF0ZqLLz2GOP6dixY5o/f769LS0tTRMnTpSvr6/q16+ftx25ynY2btyo+Ph4e1tKSoqmTp2qsLCwfF+KlZNTp06pXbt2Sk9P15tvvllg40ZHR8vPz08jRozI9j65EydOWI7Rpk0bpaena/jw4VmWpaWl5ep1u1JeXvPsREREaPz48Ro5cqRq1qyZY782bdrozz//1LRp07IsO3/+vFJSUhxqym89mVq0aCEXFxcNGzYsy1lVqzNucXFx2bZn3q+Ueeloq1atZIzR0KFDs/TN3Ebm3wG78v2deeYtuxkIr9SmTRvFx8dr+fLlWZadPn1aaWlpkpTlzxm4uLjYZ3TM72XFAJyDM04Abgrh4eGqU6eOvvjiC0nKVXCaNWuW3n//fbVs2VIRERE6c+aMpk2bJj8/P/sHI39/fz399NOaOHGibDabIiIi9PXXX2e5d8PPz08PPfSQ3n77bV26dEklS5bUt99+q/379+drf9q1a6fAwECVK1dOH330kcOyRo0aKTg4WE888YTmzJkjf39/RUZGKj4+Xt999519uvJMVatWlaurq0aPHq2kpCR5eHjokUceyfK3aySpW7du+u9//6vOnTtr8+bNCgsL06JFi7R+/XqNHz++wM7UDBgwQJ988omaNm2q3r17q1ixYpo1a5b279+vTz/9NMdLw3Jj165d+uijj2SMUXJysrZu3aqFCxfq7NmzGjdunJo0aVIg+yD987pPnjxZHTt21P33369nnnlGgYGBOnTokJYsWaK6devqvffeu+oY9evXV/fu3TVy5EglJCSocePGcnNz0+7du7Vw4UK9++67at26dZ7qystrnpPcTHXdsWNHLViwQD169NDKlStVt25dpaen6/fff9eCBQvsf7tI+ueS2u+++07jxo1TiRIlFB4erlq1auVpv8qWLas333zTPrHDU089JQ8PD/30008qUaKERo4cmeO6Tz75pMLDw9WsWTNFREQoJSVF3333nb766ivVqFFDzZo1k/TP377q2LGjJkyYoN27d9sv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CwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALBAcAIAAAAACwQnAAAAALDg9OA0adIkhYWFydPTU7Vq1dLGjRuv2n/8+PEqX768vLy8FBoaqn79+unChQs3qFoAAAAAdyKnBqf58+erf//+Gjx4sLZs2aIqVaooOjpax48fz7b/3LlzNWDAAA0ePFg7duzQhx9+qPnz5+uNN964wZUDAAAAuJM4NTiNGzdOL7zwgrp06aLIyEhNmTJF3t7emj59erb9N2zYoLp166p9+/YKCwtT48aN1a5dO8uzVAAAAABwLZwWnFJTU7V582Y1bNjwf8W4uKhhw4aKj4/Pdp06depo8+bN9qC0b98+LV26VI899liO27l48aKSk5MdHgAAAACQF4WcteGTJ08qPT1dwcHBDu3BwcH6/fffs12nffv2OnnypB588EEZY5SWlqYePXpc9VK9kSNHaujQoQVaOwAAAIA7i9Mnh8iLVatWacSIEXr//fe1ZcsWffbZZ1qyZImGDx+e4zqxsbFKSkqyPw4fPnwDKwYAAABwO3DaGaeAgAC5uroqMTHRoT0xMVEhISHZrjNw4EB17NhRXbt2lSRVqlRJKSkp6tatm9588025uGTNgR4eHvLw8Cj4HQAAAABwx3DaGSd3d3dFRUUpLi7O3paRkaG4uDjVrl0723XOnTuXJRy5urpKkowx169YAAAAAHc0p51xkqT+/fsrJiZG1atXV82aNTV+/HilpKSoS5cukqROnTqpZMmSGjlypCSpWbNmGjdunKpVq6ZatWppz549GjhwoJo1a2YPUAAAAABQ0JwanNq2basTJ05o0KBBOnbsmKpWraply5bZJ4w4dOiQwxmmt956SzabTW+99Zb+/PNPBQYGqlmzZvrPf/7jrF0AAAAAcAewmTvsGrfk5GT5+/srKSlJfn5+zi5HkmQbanN2CbiNmMF31FsaAAAg3/KSDW6pWfUAAAAAwBkITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABacHpwmTZqksLAweXp6qlatWtq4ceNV+58+fVo9e/bUXXfdJQ8PD91zzz1aunTpDaoWAAAAwJ2okDM3Pn/+fPXv319TpkxRrVq1NH78eEVHR2vnzp0KCgrK0j81NVWNGjVSUFCQFi1apJIlS+rgwYMqUqTIjS8eAAAAwB3DqcFp3LhxeuGFF9SlSxdJ0pQpU7RkyRJNnz5dAwYMyNJ/+vTpOnXqlDZs2CA3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okUmMjLSuLu7mzJlypgxY8Y4rF+mTBkzbNgw07FjR1O4cGETExNjjDFm7dq15sEHHzSenp6mVKlS5uWXXzZnz569ai0oGDNmzDD+/v72n9PT083QoUNNyZIljbu7u6lSpYr55ptvjDHGZGRkmEcffdQ0btzYZGRkGGOM+euvv0zJkiXNwIEDjTGOx32mdevWmfr16xsvLy9TpEgR07hxY3Pq1CljDMcznCe73/9r1641kszx48ftbZLM559/nu0Y2R3vudlObtZ95513TFhYmMVeXP39deHCBfPyyy+bwMBA4+HhYerWrWs2btyYpYalS5ea+++/37i5uZmVK1ea9PR0M2LECBMWFmY8PT1N5cqVs7wHcWNldxw99dRTplq1avafDx06ZNzc3Ez//v2zrD9hwgQjyfzwww/GmKsff5d/Ljl48KBxc3Mz/fr1y7auzH8LrMbM675djb+/v5k5c+ZV+1y4cMG89tprplSpUsbd3d1ERESYDz74wL581apVpkaNGsbd3d2EhISY119/3Vy6dMm+vH79+qZnz56mT58+pnjx4qZBgwbGGGN+/fVX06RJE+Pj42OCgoLMs88+a06cOJGn/b3dcaneHcbLy8t+GUTnzp21adMmffnll4qPj5cxRo899pguXbokSerZs6cuXryoNWvW6Ndff9Xo0aOz/ba+Tp06Gj9+vPz8/HT06FEdPXpUr776apZ+HTp00FdffaWzZ8/a25YvX65z586pZcuWWfp/9tlnKlWqlIYNG2Yf18fHR88884z9W9RMM2bMUOvWrVW4cOEs4/j6+srX11eLFy/WxYsXs31eMjIy1LRpU61fv14fffSRtm/frlGjRsnV1VWStHnzZrVp00bPPPOMfv31Vw0ZMkQDBw7McnnAmDFjVKVKFf38888aOHCg9u7dqyZNmqhVq1b65ZdfNH/+fK1bt069evXKtg5cX++++67Gjh2rMWPG6JdfflF0dLSaN2+u3bt3y2azadasWfrpp580YcIESf9881eyZEkNGjQo2/ESEhL06KOPKjIyUvHx8Vq3bp2aNWuW7TfmHM9wprNnz+qjjz5S2bJlVbx4cWeXo5CQEB09etThUqgrWb2/XnvtNX366aeaNWuWtmzZorJlyyo6OlqnTp1yGGfAgAEaNWqUduzYocqVK2vkyJGaPXu2pkyZom3btqlfv356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zYSFhZkvvvjC7Nu3z6xevdo88MAD5oEHHnC4/2fChAnGZrOZTp06me+//97s37/fbN682fTr189IynKP09XeDzntW4MGDbK8xw4dOpRt//r165spU6aYTZs2mf3795slS5aY8uXLm0ceecTep3PnziY0NNR8/vnnZt++fWblypVm/vz5xhhj/vjjD+Pt7W169uxpduzYYRYvXmwCAgLssx1nbuPyf5uMMebPP/80gYGBpnXr1mbjxo1mz549ZtmyZaZz584mLS0tx/270xCcbmNWwSlzOnJ/f3/j5eVloqOjHW6E79Wrl4mIiDAeHh4mMDDQdOzY0Zw8edIYk/0/SD169DDFixfPcTryTNu3bzeSTJkyZRx+eRmT9c0cHx9vKleubL9Z9HJxcXFGkn0yi5xcuHDBDBgwwNx///3G39/feHt7m/Lly5u33nrLnDt3zt7vr7/+Ml26dDHFixc3np6e5r777jNff/21fXnm9M1ubm6mdOnSDr/Mc9pXY4zZuHGjadSokfH19TU+Pj6mcuXKWSYowPWR3XTkQ4YMMSVLljRubm4O05EfP37cBAcHmxEjRtj7p6ammqioqBy/MDDmn2lf69SpYzw8PEyRIkVMdHS0fTnHM5wlJibGYer7woULmxo1ajjcbG+MyTJFfuZj7dq12f6picxHfHy8fYydO3eali1bmhIlShgfHx9TpUoVM23atCy/3y+3ZcsW8+yzz5rw8HDj4eFhihcvbh566CHz5ZdfOvS72vvr/Pnz5uWXXzYBAQFXnY78yuCUkZFhxo8fb8qXL2/c3NxMYGCgiY6ONqtXr87ns41rldPnlZEjR5rAwECHP3nwxRdfmHr16hkfHx/j6elpoqKizPTp07Ose/78eTN48GBToUIF4+XlZcLDw023bt2ynV57xYoVpmnTpqZYsWKmUKFCJjg42LRo0cIsW7bM3ie374fs9i27dZ5//vls+48YMcLUrl3bFCtWzHh6epq7777b9O7d2/75K3Pf+vXrZ+666y7j7u5uypYt6/Ac5GY68iuDkzHG7Nq1y7Rs2dL+Z2oqVKhg+vbte9X38p3GZsxl5/KAW8icOXPUr18/HTlyhMuEcMvjeAYA4ObGn8/GLefcuXM6evSoRo0ape7du/MhE7c0jmcAAG4NTA6BW87bb7+tChUqKCQkRLGxsc4uB7gmHM8AANwauFQPAAAAACxwxgkAAAAALBCcAAAAAMACwQkAAAAALBCcAAAAAMACwQkAAAAALBCcAAAAAMACwQkAAAAALBCcAAAAAMACwQkAAAAALPw/TaIxQeeoeuoAAAAASUVORK5CYII=",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data to plot\n",
        "scores = {\n",
        "    'Positivity Score': 0.993049042565482,\n",
        "    'Toxicity Score': 0.0,\n",
        "    'BLEU Score': 0.253256932323494,\n",
        "    'ROUGE-L Score': 0.28823452650831183\n",
        "}\n",
        "\n",
        "# Names of the scores\n",
        "labels = list(scores.keys())\n",
        "values = list(scores.values())\n",
        "\n",
        "# Create the bar chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(labels, values, color=['green', 'red', 'blue', 'purple'])\n",
        "plt.title('Visualization of Different Metric Scores')\n",
        "plt.ylabel('Scores')\n",
        "plt.ylim(0, 1.1)  # Set y-axis limits to show scores clearly\n",
        "\n",
        "# Display the plot\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
